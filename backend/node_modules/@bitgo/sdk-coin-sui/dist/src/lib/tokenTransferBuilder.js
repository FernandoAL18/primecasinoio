"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransferBuilder = void 0;
const assert_1 = __importDefault(require("assert"));
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const transactionBuilder_1 = require("./transactionBuilder");
const tokenTransferTransaction_1 = require("./tokenTransferTransaction");
const utils_1 = __importDefault(require("./utils"));
const builder_1 = require("./mystenlab/builder");
class TokenTransferBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new tokenTransferTransaction_1.TokenTransferTransaction(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.suiTransaction) {
            return;
        }
        this.validateTransactionFields();
    }
    /** @inheritdoc */
    sign(key) {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        super.sign(key);
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new tokenTransferTransaction_1.TokenTransferTransaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        this.transaction.transactionType(this.transactionType);
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        this._signatures.forEach((signature) => {
            this.transaction.addSignature(signature.publicKey, signature.signature);
        });
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /** @inheritdoc */
    initBuilder(tx) {
        this._transaction = tx;
        if (tx.signature && tx.signature.length > 0) {
            this._signatures = [tx.suiSignature];
        }
        const txData = tx.toJson();
        this.type(iface_1.SuiTransactionType.TokenTransfer);
        this.sender(txData.sender);
        this.gasData(txData.gasData);
        const recipients = utils_1.default.getRecipients(tx.suiTransaction);
        this.send(recipients);
        (0, assert_1.default)(txData.inputObjects);
        this.inputObjects(txData.inputObjects);
    }
    send(recipients) {
        this.validateRecipients(recipients);
        this._recipients = recipients;
        return this;
    }
    inputObjects(inputObject) {
        this.validateInputObjects(inputObject);
        this._inputObjects = inputObject;
        return this;
    }
    /**
     * Validates all fields are defined correctly
     */
    validateTransactionFields() {
        (0, assert_1.default)(this._type, new sdk_core_1.BuildTransactionError('type is required before building'));
        (0, assert_1.default)(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        (0, assert_1.default)(this._recipients && this._recipients.length > 0, new sdk_core_1.BuildTransactionError('at least one recipient is required before building'));
        (0, assert_1.default)(this._gasData, new sdk_core_1.BuildTransactionError('gasData is required before building'));
        this.validateGasData(this._gasData);
        this.validateInputObjects(this._inputObjects);
    }
    validateInputObjects(inputObjects) {
        (0, assert_1.default)(inputObjects && inputObjects.length > 0, new sdk_core_1.BuildTransactionError('input objects required before building'));
        inputObjects.forEach((inputObject) => {
            this.validateSuiObjectRef(inputObject, 'input object');
        });
    }
    /**
     * Build SuiTransaction
     *
     * @return {SuiTransaction<TokenTransferProgrammableTransaction>}
     * @protected
     */
    buildSuiTransaction() {
        this.validateTransactionFields();
        const programmableTxBuilder = new builder_1.TransactionBlock();
        const inputObjects = this._inputObjects.map((object) => programmableTxBuilder.object(builder_1.Inputs.ObjectRef(object)));
        const mergedObject = inputObjects.shift();
        if (inputObjects.length > 0) {
            programmableTxBuilder.mergeCoins(mergedObject, inputObjects);
        }
        this._recipients.forEach((recipient) => {
            const splitObject = programmableTxBuilder.splitCoins(mergedObject, [
                programmableTxBuilder.pure(Number(recipient.amount)),
            ]);
            programmableTxBuilder.transferObjects([splitObject], programmableTxBuilder.object(recipient.address));
        });
        const txData = programmableTxBuilder.blockData;
        return {
            type: this._type,
            sender: this._sender,
            tx: {
                inputs: [...txData.inputs],
                transactions: [...txData.transactions],
            },
            gasData: {
                ...this._gasData,
            },
        };
    }
}
exports.TokenTransferBuilder = TokenTransferBuilder;
//# sourceMappingURL=data:application/json;base64,
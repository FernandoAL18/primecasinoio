"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SCAN_FACTOR = exports.MAX_OBJECT_LIMIT = exports.DEFAULT_GAS_OVERHEAD = exports.DEFAULT_GAS_PRICE = exports.MAX_GAS_BUDGET = exports.MIN_STAKING_THRESHOLD = exports.SIGNATURE_SCHEME_BYTES = exports.SUI_INTENT_BYTES = exports.MAX_GAS_OBJECTS = exports.MAX_COMMAND_ARGS = exports.SER_BUFFER_SIZE = exports.SUI_ADDRESS_LENGTH = exports.DUMMY_SUI_GAS_PRICE = exports.AMOUNT_UNKNOWN_TEXT = exports.UNAVAILABLE_TEXT = void 0;
exports.UNAVAILABLE_TEXT = 'UNAVAILABLE';
exports.AMOUNT_UNKNOWN_TEXT = 'AMOUNT_UNKNOWN';
// Refer to
// https://github.com/MystenLabs/sui/blob/main/crates/sui-types/src/messages.rs#L50
exports.DUMMY_SUI_GAS_PRICE = 1000;
exports.SUI_ADDRESS_LENGTH = 32;
exports.SER_BUFFER_SIZE = 8192;
// https://github.com/MystenLabs/sui/blob/e62839aecb192545c3951b6fa0bc84039120b373/crates/sui-protocol-config/src/lib.rs#L1496
exports.MAX_COMMAND_ARGS = 512;
// https://github.com/MystenLabs/sui/blob/e62839aecb192545c3951b6fa0bc84039120b373/crates/sui-protocol-config/src/lib.rs#L1493
exports.MAX_GAS_OBJECTS = 256;
exports.SUI_INTENT_BYTES = Buffer.from([0, 0, 0]);
exports.SIGNATURE_SCHEME_BYTES = [0x00];
exports.MIN_STAKING_THRESHOLD = 1000000000; // 1 SUI
// The maximum gas that is allowed. 0.1 SUI
exports.MAX_GAS_BUDGET = 100000000;
exports.DEFAULT_GAS_PRICE = 1000;
exports.DEFAULT_GAS_OVERHEAD = 1.1;
/*
 * SUI transactions have a limit of 128 KB on the tx size,
 * that corresponds to a tx with max ~1600 objects depending on other transaction details,
 * we chose 1280 as the object limit, keeping in mind other things like multiple recipients etc.
 */
exports.MAX_OBJECT_LIMIT = 1280;
exports.DEFAULT_SCAN_FACTOR = 20; // default number of receive addresses to scan for funds
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQWEsUUFBQSxnQkFBZ0IsR0FBRyxhQUFhLENBQUM7QUFDakMsUUFBQSxtQkFBbUIsR0FBRyxnQkFBZ0IsQ0FBQztBQUVwRCxXQUFXO0FBQ1gsbUZBQW1GO0FBQ3RFLFFBQUEsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0FBQzNCLFFBQUEsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQUEsZUFBZSxHQUFHLElBQUksQ0FBQztBQUNwQyw4SEFBOEg7QUFDakgsUUFBQSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsOEhBQThIO0FBQ2pILFFBQUEsZUFBZSxHQUFHLEdBQUcsQ0FBQztBQUV0QixRQUFBLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFMUMsUUFBQSxzQkFBc0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRWhDLFFBQUEscUJBQXFCLEdBQUcsVUFBYSxDQUFDLENBQUMsUUFBUTtBQUU1RCwyQ0FBMkM7QUFDOUIsUUFBQSxjQUFjLEdBQUcsU0FBUyxDQUFDO0FBQzNCLFFBQUEsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQ3pCLFFBQUEsb0JBQW9CLEdBQUcsR0FBRyxDQUFDO0FBRXhDOzs7O0dBSUc7QUFDVSxRQUFBLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUV4QixRQUFBLG1CQUFtQixHQUFHLEVBQUUsQ0FBQyxDQUFDLHdEQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBVTkFWQUlMQUJMRV9URVhUID0gJ1VOQVZBSUxBQkxFJztcbmV4cG9ydCBjb25zdCBBTU9VTlRfVU5LTk9XTl9URVhUID0gJ0FNT1VOVF9VTktOT1dOJztcblxuLy8gUmVmZXIgdG9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NeXN0ZW5MYWJzL3N1aS9ibG9iL21haW4vY3JhdGVzL3N1aS10eXBlcy9zcmMvbWVzc2FnZXMucnMjTDUwXG5leHBvcnQgY29uc3QgRFVNTVlfU1VJX0dBU19QUklDRSA9IDEwMDA7XG5leHBvcnQgY29uc3QgU1VJX0FERFJFU1NfTEVOR1RIID0gMzI7XG5leHBvcnQgY29uc3QgU0VSX0JVRkZFUl9TSVpFID0gODE5Mjtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NeXN0ZW5MYWJzL3N1aS9ibG9iL2U2MjgzOWFlY2IxOTI1NDVjMzk1MWI2ZmEwYmM4NDAzOTEyMGIzNzMvY3JhdGVzL3N1aS1wcm90b2NvbC1jb25maWcvc3JjL2xpYi5ycyNMMTQ5NlxuZXhwb3J0IGNvbnN0IE1BWF9DT01NQU5EX0FSR1MgPSA1MTI7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vTXlzdGVuTGFicy9zdWkvYmxvYi9lNjI4MzlhZWNiMTkyNTQ1YzM5NTFiNmZhMGJjODQwMzkxMjBiMzczL2NyYXRlcy9zdWktcHJvdG9jb2wtY29uZmlnL3NyYy9saWIucnMjTDE0OTNcbmV4cG9ydCBjb25zdCBNQVhfR0FTX09CSkVDVFMgPSAyNTY7XG5cbmV4cG9ydCBjb25zdCBTVUlfSU5URU5UX0JZVEVTID0gQnVmZmVyLmZyb20oWzAsIDAsIDBdKTtcblxuZXhwb3J0IGNvbnN0IFNJR05BVFVSRV9TQ0hFTUVfQllURVMgPSBbMHgwMF07XG5cbmV4cG9ydCBjb25zdCBNSU5fU1RBS0lOR19USFJFU0hPTEQgPSAxXzAwMF8wMDBfMDAwOyAvLyAxIFNVSVxuXG4vLyBUaGUgbWF4aW11bSBnYXMgdGhhdCBpcyBhbGxvd2VkLiAwLjEgU1VJXG5leHBvcnQgY29uc3QgTUFYX0dBU19CVURHRVQgPSAxMDAwMDAwMDA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9HQVNfUFJJQ0UgPSAxMDAwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfR0FTX09WRVJIRUFEID0gMS4xO1xuXG4vKlxuICogU1VJIHRyYW5zYWN0aW9ucyBoYXZlIGEgbGltaXQgb2YgMTI4IEtCIG9uIHRoZSB0eCBzaXplLFxuICogdGhhdCBjb3JyZXNwb25kcyB0byBhIHR4IHdpdGggbWF4IH4xNjAwIG9iamVjdHMgZGVwZW5kaW5nIG9uIG90aGVyIHRyYW5zYWN0aW9uIGRldGFpbHMsXG4gKiB3ZSBjaG9zZSAxMjgwIGFzIHRoZSBvYmplY3QgbGltaXQsIGtlZXBpbmcgaW4gbWluZCBvdGhlciB0aGluZ3MgbGlrZSBtdWx0aXBsZSByZWNpcGllbnRzIGV0Yy5cbiAqL1xuZXhwb3J0IGNvbnN0IE1BWF9PQkpFQ1RfTElNSVQgPSAxMjgwO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TQ0FOX0ZBQ1RPUiA9IDIwOyAvLyBkZWZhdWx0IG51bWJlciBvZiByZWNlaXZlIGFkZHJlc3NlcyB0byBzY2FuIGZvciBmdW5kc1xuIl19
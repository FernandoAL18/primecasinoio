"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilderFactory = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transferBuilder_1 = require("./transferBuilder");
const transaction_1 = require("./transaction");
const stakingBuilder_1 = require("./stakingBuilder");
const iface_1 = require("./iface");
const stakingTransaction_1 = require("./stakingTransaction");
const transferTransaction_1 = require("./transferTransaction");
const utils_1 = __importDefault(require("./utils"));
const unstakingBuilder_1 = require("./unstakingBuilder");
const unstakingTransaction_1 = require("./unstakingTransaction");
const customTransaction_1 = require("./customTransaction");
const customTransactionBuilder_1 = require("./customTransactionBuilder");
const tokenTransferBuilder_1 = require("./tokenTransferBuilder");
const tokenTransferTransaction_1 = require("./tokenTransferTransaction");
class TransactionBuilderFactory extends sdk_core_1.BaseTransactionBuilderFactory {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    /** @inheritdoc */
    from(raw) {
        utils_1.default.validateRawTransaction(raw);
        const tx = this.parseTransaction(raw);
        try {
            switch (tx.type) {
                case iface_1.SuiTransactionType.Transfer:
                    const transferTx = new transferTransaction_1.TransferTransaction(this._coinConfig);
                    transferTx.fromRawTransaction(raw);
                    return this.getTransferBuilder(transferTx);
                case iface_1.SuiTransactionType.AddStake:
                    const stakingTransaction = new stakingTransaction_1.StakingTransaction(this._coinConfig);
                    stakingTransaction.fromRawTransaction(raw);
                    return this.getStakingBuilder(stakingTransaction);
                case iface_1.SuiTransactionType.WithdrawStake:
                    const unstakingTransaction = new unstakingTransaction_1.UnstakingTransaction(this._coinConfig);
                    unstakingTransaction.fromRawTransaction(raw);
                    return this.getUnstakingBuilder(unstakingTransaction);
                case iface_1.SuiTransactionType.CustomTx:
                    const customTransaction = new customTransaction_1.CustomTransaction(this._coinConfig);
                    customTransaction.fromRawTransaction(raw);
                    return this.getCustomTransactionBuilder(customTransaction);
                case iface_1.SuiTransactionType.TokenTransfer:
                    const tokenTransferTx = new tokenTransferTransaction_1.TokenTransferTransaction(this._coinConfig);
                    tokenTransferTx.fromRawTransaction(raw);
                    return this.getTokenTransferBuilder(tokenTransferTx);
                default:
                    throw new sdk_core_1.InvalidTransactionError('Invalid transaction');
            }
        }
        catch (e) {
            throw e;
        }
    }
    /** @inheritdoc */
    getTransferBuilder(tx) {
        return this.initializeBuilder(tx, new transferBuilder_1.TransferBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getStakingBuilder(tx) {
        return this.initializeBuilder(tx, new stakingBuilder_1.StakingBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getUnstakingBuilder(tx) {
        return this.initializeBuilder(tx, new unstakingBuilder_1.UnstakingBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getCustomTransactionBuilder(tx) {
        return this.initializeBuilder(tx, new customTransactionBuilder_1.CustomTransactionBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getTokenTransferBuilder(tx) {
        return this.initializeBuilder(tx, new tokenTransferBuilder_1.TokenTransferBuilder(this._coinConfig));
    }
    /** @inheritdoc */
    getWalletInitializationBuilder() {
        throw new Error('Method not implemented.');
    }
    /**
     * Initialize the builder with the given transaction
     *
     * @param {Transaction | undefined} tx - the transaction used to initialize the builder
     * @param {TransactionBuilder} builder - the builder to be initialized
     * @returns {TransactionBuilder} the builder initialized
     */
    initializeBuilder(tx, builder) {
        if (tx) {
            builder.initBuilder(tx);
        }
        return builder;
    }
    /** Parse the transaction from a raw transaction
     *
     * @param {string} rawTransaction - the raw tx
     * @returns {Transaction} parsedtransaction
     */
    parseTransaction(rawTransaction) {
        return transaction_1.Transaction.deserializeSuiTransaction(rawTransaction);
    }
}
exports.TransactionBuilderFactory = TransactionBuilderFactory;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const assert_1 = __importDefault(require("assert"));
const utils_1 = __importDefault(require("./utils"));
const constants_1 = require("./constants");
const keyPair_1 = require("./keyPair");
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._signatures = [];
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        const signer = new keyPair_1.KeyPair({ prv: key.key });
        this._signer = signer;
        this.transaction.sign(signer);
        return this.transaction;
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this._signatures.push({ publicKey, signature });
        this.transaction.addSignature(publicKey, signature);
        this.transaction.setSerializedSig(publicKey, signature);
    }
    /**
     * Sets the sender of this transaction.
     * This account will be responsible for paying transaction fees.
     *
     * @param {string} senderAddress the account that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(senderAddress) {
        utils_1.default.validateAddress(senderAddress, 'sender');
        this._sender = senderAddress;
        return this;
    }
    type(type) {
        this._type = type;
        return this;
    }
    gasData(gasData) {
        this.validateGasData(gasData);
        this._gasData = gasData;
        return this;
    }
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    validateRecipients(recipients) {
        (0, assert_1.default)(recipients && recipients.length > 0, new sdk_core_1.BuildTransactionError('at least one recipient is required before building'));
        recipients.forEach((recipient) => {
            utils_1.default.validateAddress(recipient.address, 'address');
            (0, assert_1.default)(utils_1.default.isValidAmount(recipient.amount), 'Invalid recipient amount');
        });
    }
    validateGasData(gasData) {
        if (!utils_1.default.isValidAddress(gasData.owner)) {
            throw new sdk_core_1.BuildTransactionError('Invalid gas address ' + gasData.owner);
        }
        this.validateGasPayment(gasData.payment);
        this.validateGasBudget(gasData.budget);
        this.validateGasPrice(gasData.price);
    }
    validateGasBudget(gasBudget) {
        if (gasBudget <= 0) {
            throw new sdk_core_1.BuildTransactionError('Invalid gas budget ' + gasBudget);
        }
    }
    validateGasPrice(gasPrice) {
        // TODO: check with Sui on the gas price
        if (gasPrice !== constants_1.DUMMY_SUI_GAS_PRICE) {
            throw new sdk_core_1.BuildTransactionError('Invalid gas price ' + gasPrice);
        }
    }
    validateGasPayment(payments) {
        (0, assert_1.default)(payments && payments.length > 0, new sdk_core_1.BuildTransactionError('gas payment is required before building'));
        payments.forEach((payment) => {
            this.validateSuiObjectRef(payment, 'payment');
        });
    }
    validateSuiObjectRef(suiObjectRef, field) {
        if (!suiObjectRef.hasOwnProperty('objectId')) {
            throw new sdk_core_1.BuildTransactionError(`Invalid ${field}, missing objectId`);
        }
        if (!suiObjectRef.hasOwnProperty('version') || !utils_1.default.isValidAmount(suiObjectRef.version)) {
            throw new sdk_core_1.BuildTransactionError(`Invalid ${field}, invalid or missing version`);
        }
        if (!suiObjectRef.hasOwnProperty('digest')) {
            throw new sdk_core_1.BuildTransactionError(`Invalid ${field}, missing digest`);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        try {
            new keyPair_1.KeyPair({ prv: key.key });
        }
        catch {
            throw new sdk_core_1.BuildTransactionError(`Key validation failed`);
        }
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction: Undefined');
        }
        if (!utils_1.default.isValidRawTransaction(rawTransaction)) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction');
        }
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,
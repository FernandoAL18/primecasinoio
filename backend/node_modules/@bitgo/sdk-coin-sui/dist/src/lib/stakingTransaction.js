"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingTransaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const utils_1 = __importDefault(require("./utils"));
const buffer_1 = require("buffer");
const transaction_1 = require("./transaction");
const builder_1 = require("./mystenlab/builder");
const types_1 = require("./mystenlab/types");
const bcs_1 = require("@mysten/bcs");
const constants_1 = require("./constants");
class StakingTransaction extends transaction_1.Transaction {
    constructor(_coinConfig) {
        super(_coinConfig);
    }
    get suiTransaction() {
        return this._suiTransaction;
    }
    setSuiTransaction(tx) {
        this._suiTransaction = tx;
    }
    addSignature(publicKey, signature) {
        this._signatures.push(signature.toString('hex'));
        this._signature = { publicKey, signature };
        this.serialize();
    }
    get suiSignature() {
        return this._signature;
    }
    /** @inheritdoc */
    canSign(key) {
        return true;
    }
    /** @inheritdoc */
    toBroadcastFormat() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('Empty transaction');
        }
        return this.serialize();
    }
    /** @inheritdoc */
    toJson() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.ParseTransactionError('Empty transaction');
        }
        const tx = this._suiTransaction;
        return {
            id: this._id,
            sender: tx.sender,
            kind: { ProgrammableTransaction: tx.tx },
            gasData: {
                ...tx.gasData,
                payment: [...tx.gasData.payment, ...this.getInputGasPaymentObjectsFromTx(tx.tx)],
            },
            expiration: { None: null },
        };
    }
    /** @inheritDoc */
    explainTransaction() {
        const result = this.toJson();
        const displayOrder = [
            'id',
            'outputs',
            'outputAmount',
            'changeOutputs',
            'changeAmount',
            'fee',
            'type',
            'module',
            'function',
            'validatorAddress',
        ];
        const outputs = [];
        const explanationResult = {
            displayOrder,
            id: this.id,
            outputs,
            outputAmount: '0',
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: this.suiTransaction.gasData.budget.toString() },
            type: this.type,
        };
        switch (this.type) {
            case sdk_core_1.TransactionType.StakingAdd:
                return this.explainAddDelegationTransaction(result, explanationResult);
            default:
                throw new sdk_core_1.InvalidTransactionError('Transaction type not supported');
        }
    }
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType) {
        this._type = transactionType;
    }
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs() {
        if (!this.suiTransaction) {
            return;
        }
        const requests = utils_1.default.getStakeRequests(this.suiTransaction.tx);
        this._outputs = requests.map((request) => {
            return {
                address: request.validatorAddress,
                value: request.amount.toString(),
                coin: this._coinConfig.name,
            };
        });
        this._inputs = [
            {
                address: this.suiTransaction.sender,
                value: this._outputs.reduce((acc, output) => acc + Number(output.value), 0).toString(),
                coin: this._coinConfig.name,
            },
        ];
    }
    /**
     * Sets this transaction payload
     *
     * @param {string} rawTransaction
     */
    fromRawTransaction(rawTransaction) {
        try {
            utils_1.default.isValidRawTransaction(rawTransaction);
            this._suiTransaction = transaction_1.Transaction.deserializeSuiTransaction(rawTransaction);
            this._type = utils_1.default.getTransactionType(this._suiTransaction.type);
            this._id = this._suiTransaction.id;
            this.loadInputsAndOutputs();
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Helper function for serialize() to get the correct txData with transaction type
     *
     * @return {TxData}
     */
    getTxData() {
        if (!this._suiTransaction) {
            throw new sdk_core_1.InvalidTransactionError('empty transaction');
        }
        const inputs = this._suiTransaction.tx.inputs.map((input, index) => {
            if (input.hasOwnProperty('Object')) {
                return input;
            }
            if (input.hasOwnProperty('Pure')) {
                if (input.Pure.length === constants_1.SUI_ADDRESS_LENGTH) {
                    const address = (0, types_1.normalizeSuiAddress)(builder_1.builder.de(bcs_1.BCS.ADDRESS, buffer_1.Buffer.from(input.Pure).toString('base64'), 'base64'));
                    return builder_1.Inputs.Pure(address, bcs_1.BCS.ADDRESS);
                }
                else {
                    const amount = builder_1.builder.de(bcs_1.BCS.U64, buffer_1.Buffer.from(input.Pure).toString('base64'), 'base64');
                    return builder_1.Inputs.Pure(amount, bcs_1.BCS.U64);
                }
            }
            if (input.kind === 'Input' && (input.value.hasOwnProperty('Object') || input.value.hasOwnProperty('Pure'))) {
                return input.value;
            }
            // what's left is the pure number or address string
            return builder_1.Inputs.Pure(input.value, input.type === 'pure' ? bcs_1.BCS.U64 : bcs_1.BCS.ADDRESS);
        });
        const programmableTx = {
            inputs: inputs,
            transactions: this._suiTransaction.tx.transactions,
        };
        return {
            sender: this._suiTransaction.sender,
            expiration: { None: null },
            gasData: {
                ...this._suiTransaction.gasData,
                payment: this._suiTransaction.gasData.payment.slice(0, constants_1.MAX_GAS_OBJECTS - 1),
            },
            kind: {
                ProgrammableTransaction: programmableTx,
            },
        };
    }
    /**
     * Returns a complete explanation for a staking transaction
     *
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainAddDelegationTransaction(json, explanationResult) {
        const outputs = [];
        this.suiTransaction.tx.transactions.forEach((transaction, txIndex) => {
            if (builder_1.SplitCoinsTransaction.is(transaction)) {
                const amountInputIdx = transaction.amounts[0].index;
                const amount = BigInt(this.suiTransaction.tx.inputs[amountInputIdx].value);
                // For AddStake, every split is followed by a move call
                const validatorAddressInputIdx = this.suiTransaction.tx.transactions[txIndex + 1]
                    .arguments[2].index;
                const validatorAddress = utils_1.default.getAddress(this.suiTransaction.tx.inputs[validatorAddressInputIdx]);
                outputs.push({
                    address: validatorAddress,
                    amount: amount.toString(10),
                });
            }
        });
        const outputAmount = outputs.reduce((sum, output) => sum + BigInt(output.amount), BigInt(0)).toString(10);
        return {
            ...explanationResult,
            outputAmount,
            outputs,
        };
    }
}
exports.StakingTransaction = StakingTransaction;
//# sourceMappingURL=data:application/json;base64,
import { TransactionType, Recipient, BaseKey } from '@bitgo/sdk-core';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { SuiTransaction, TokenTransferProgrammableTransaction } from './iface';
import { Transaction } from './transaction';
import { TransactionBuilder } from './transactionBuilder';
import { TokenTransferTransaction } from './tokenTransferTransaction';
import { SuiObjectRef } from './mystenlab/types';
export declare class TokenTransferBuilder extends TransactionBuilder<TokenTransferProgrammableTransaction> {
    protected _recipients: Recipient[];
    protected _inputObjects: SuiObjectRef[];
    constructor(_coinConfig: Readonly<CoinConfig>);
    protected get transactionType(): TransactionType;
    /** @inheritdoc */
    validateTransaction(transaction: TokenTransferTransaction): void;
    /** @inheritdoc */
    sign(key: BaseKey): void;
    /** @inheritdoc */
    protected fromImplementation(rawTransaction: string): Transaction<TokenTransferProgrammableTransaction>;
    /** @inheritdoc */
    protected buildImplementation(): Promise<Transaction<TokenTransferProgrammableTransaction>>;
    /** @inheritdoc */
    initBuilder(tx: TokenTransferTransaction): void;
    send(recipients: Recipient[]): this;
    inputObjects(inputObject: SuiObjectRef[]): this;
    /**
     * Validates all fields are defined correctly
     */
    private validateTransactionFields;
    private validateInputObjects;
    /**
     * Build SuiTransaction
     *
     * @return {SuiTransaction<TokenTransferProgrammableTransaction>}
     * @protected
     */
    protected buildSuiTransaction(): SuiTransaction<TokenTransferProgrammableTransaction>;
}
//# sourceMappingURL=tokenTransferBuilder.d.ts.map
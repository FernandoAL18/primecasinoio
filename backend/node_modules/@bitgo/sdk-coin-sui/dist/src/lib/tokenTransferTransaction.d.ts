/// <reference types="node" />
import { SuiTransaction, TokenTransferProgrammableTransaction, TransactionExplanation, TxData } from './iface';
import { BaseCoin as CoinConfig } from '@bitgo/statics';
import { Transaction } from './transaction';
import { BaseKey, PublicKey as BasePublicKey, Signature, TransactionType } from '@bitgo/sdk-core';
export declare class TokenTransferTransaction extends Transaction<TokenTransferProgrammableTransaction> {
    constructor(_coinConfig: Readonly<CoinConfig>);
    get suiTransaction(): SuiTransaction<TokenTransferProgrammableTransaction>;
    setSuiTransaction(tx: SuiTransaction<TokenTransferProgrammableTransaction>): void;
    /** @inheritDoc */
    get id(): string;
    addSignature(publicKey: BasePublicKey, signature: Buffer): void;
    get suiSignature(): Signature;
    /** @inheritdoc */
    canSign(key: BaseKey): boolean;
    /** @inheritdoc */
    toBroadcastFormat(): string;
    /** @inheritdoc */
    toJson(): TxData;
    /** @inheritDoc */
    explainTransaction(): TransactionExplanation;
    /**
     * Set the transaction type.
     *
     * @param {TransactionType} transactionType The transaction type to be set.
     */
    transactionType(transactionType: TransactionType): void;
    /**
     * Load the input and output data on this transaction.
     */
    loadInputsAndOutputs(): void;
    /**
     * Sets this transaction payload
     *
     * @param {string} rawTransaction
     */
    fromRawTransaction(rawTransaction: string): void;
    /**
     * Helper function for serialize() to get the correct txData with transaction type
     *
     * @return {TxData}
     */
    getTxData(): TxData;
    /**
     * Returns a complete explanation for a transfer transaction
     * @param {TxData} json The transaction data in json format
     * @param {TransactionExplanation} explanationResult The transaction explanation to be completed
     * @returns {TransactionExplanation}
     */
    explainTokenTransferTransaction(json: TxData, explanationResult: TransactionExplanation): TransactionExplanation;
    /**
     * Extracts the objects that were provided as inputs while building the transaction
     * @param tx
     * @returns {SuiObjectRef[]} Objects that are inputs for the transaction
     */
    private getInputObjectsFromTx;
}
//# sourceMappingURL=tokenTransferTransaction.d.ts.map
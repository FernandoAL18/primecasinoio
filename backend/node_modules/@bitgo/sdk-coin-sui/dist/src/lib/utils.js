"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentScope = exports.IntentVersion = exports.AppId = exports.Utils = exports.isImmOrOwnedObj = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("./constants");
const sui_bcs_1 = require("./mystenlab/types/sui-bcs");
const bcs_1 = require("@mysten/bcs");
const iface_1 = require("./iface");
const buffer_1 = require("buffer");
const types_1 = require("./mystenlab/types");
const builder_1 = require("./mystenlab/builder");
const keyPair_1 = require("./keyPair");
const blake2b_1 = __importDefault(require("@bitgo/blake2b"));
const TransactionDataBlock_1 = require("./mystenlab/builder/TransactionDataBlock");
const rpcClient_1 = require("./rpcClient");
const assert_1 = __importDefault(require("assert"));
function isImmOrOwnedObj(obj) {
    return 'ImmOrOwned' in obj;
}
exports.isImmOrOwnedObj = isImmOrOwnedObj;
class Utils {
    /** @inheritdoc */
    isValidBlockId(hash) {
        throw new Error('Method not implemented.');
    }
    /** @inheritdoc */
    isValidPrivateKey(key) {
        throw new Error('Method not implemented.');
    }
    /** @inheritdoc */
    isValidPublicKey(key) {
        return (0, sdk_core_1.isValidEd25519PublicKey)(key);
    }
    /** @inheritdoc */
    isValidSignature(signature) {
        throw new Error('Method not implemented.');
    }
    /** @inheritdoc */
    isValidTransactionId(txId) {
        throw new Error('Method not implemented.');
    }
    /**
     * Checks if raw transaction can be deserialized
     *
     * @param {string} rawTransaction - transaction in base64 string format
     * @returns {boolean} - the validation result
     */
    isValidRawTransaction(rawTransaction) {
        try {
            const data = (0, bcs_1.fromB64)(rawTransaction);
            const deserialized = builder_1.builder.de('TransactionData', data);
            builder_1.builder.ser('TransactionData', deserialized, { maxSize: TransactionDataBlock_1.TRANSACTION_DATA_MAX_SIZE });
            return true;
        }
        catch (e) {
            return false;
        }
    }
    /**
     * Check the raw transaction has a valid format in the blockchain context, throw otherwise.
     *
     * @param {string} rawTransaction - Transaction in base64 string  format
     */
    validateRawTransaction(rawTransaction) {
        if (!rawTransaction) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction: Undefined');
        }
        if (!this.isValidRawTransaction(rawTransaction)) {
            throw new sdk_core_1.ParseTransactionError('Invalid raw transaction');
        }
    }
    /**
     * Validates addresses to check if all exist and are valid Sui public keys
     *
     * @param {string} addresses The address to be validated
     * @param {string} fieldName Name of the field to validate, its needed to return which field is failing on case of error.
     */
    validateAddresses(addresses, fieldName) {
        for (const address of addresses) {
            this.validateAddress(address, fieldName);
        }
    }
    /**
     * Validates address to check if it exists and is a valid Sui public key
     *
     * @param {string} address The address to be validated
     * @param {string} fieldName Name of the field to validate, its needed to return which field is failing on case of error.
     */
    validateAddress(address, fieldName) {
        if (!address || !(0, types_1.isValidSuiAddress)((0, types_1.normalizeSuiAddress)(address))) {
            throw new sdk_core_1.BuildTransactionError(`Invalid or missing ${fieldName}, got: ${address}`);
        }
    }
    /** @inheritdoc */
    isValidAddress(address) {
        return this.isHex(address) && this.getHexByteLength(address) === constants_1.SUI_ADDRESS_LENGTH;
    }
    isHex(value) {
        return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;
    }
    getHexByteLength(value) {
        // return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
        return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;
    }
    /**
     * Returns whether or not the string is a valid amount
     *
     * @param {number[]} amounts - the amounts to validate
     * @returns {boolean} - the validation result
     */
    isValidAmounts(amounts) {
        for (const amount of amounts) {
            if (!this.isValidAmount(amount)) {
                return false;
            }
        }
        return true;
    }
    /**
     * Returns whether or not the string is a valid amount
     *
     * @param {number} amounts - the amount to validate
     * @returns {boolean} - the validation result
     */
    isValidAmount(amount) {
        const bigNumberAmount = new bignumber_js_1.default(Number(amount));
        if (!bigNumberAmount.isInteger() || bigNumberAmount.isLessThanOrEqualTo(0)) {
            return false;
        }
        return true;
    }
    /**
     * Normalizes hex ids (addresses, object ids) to always contain the '0x' prefix.
     *
     * @param {string} id
     * @return {string}
     **/
    normalizeHexId(id) {
        return id.startsWith('0x') ? id : '0x'.concat(id);
    }
    /**
     * Get transaction type by function name
     *
     * @param {MethodNames} fctName
     * @return {TransactionType}
     */
    getTransactionType(suiTransactionType) {
        switch (suiTransactionType) {
            case iface_1.SuiTransactionType.Transfer:
            case iface_1.SuiTransactionType.TokenTransfer:
                return sdk_core_1.TransactionType.Send;
            case iface_1.SuiTransactionType.AddStake:
                return sdk_core_1.TransactionType.StakingAdd;
            case iface_1.SuiTransactionType.WithdrawStake:
                return sdk_core_1.TransactionType.StakingWithdraw;
            case iface_1.SuiTransactionType.CustomTx:
                return sdk_core_1.TransactionType.CustomTx;
        }
    }
    /**
     * Get SUI transaction type
     *
     * @param {MethodNames} fctName
     * @return {TransactionType}
     */
    getSuiTransactionType(command) {
        switch (command.kind) {
            case 'SplitCoins':
                if (command.coin.kind === 'GasCoin') {
                    return iface_1.SuiTransactionType.Transfer;
                }
                return iface_1.SuiTransactionType.TokenTransfer;
            case 'TransferObjects':
                return iface_1.SuiTransactionType.Transfer;
            case 'MergeCoins':
                if (command.destination.kind === 'GasCoin') {
                    return iface_1.SuiTransactionType.Transfer;
                }
                return iface_1.SuiTransactionType.TokenTransfer;
            case 'MoveCall':
                if (command.target.endsWith(iface_1.MethodNames.RequestAddStake)) {
                    return iface_1.SuiTransactionType.AddStake;
                }
                else if (command.target.endsWith(iface_1.MethodNames.RequestWithdrawStake)) {
                    return iface_1.SuiTransactionType.WithdrawStake;
                }
                else if (command.target.endsWith(iface_1.MethodNames.StakingPoolSplit) ||
                    command.target.endsWith(iface_1.MethodNames.PublicTransfer)) {
                    return iface_1.SuiTransactionType.CustomTx;
                }
                else {
                    throw new sdk_core_1.InvalidTransactionError(`unsupported target method ${command.target}`);
                }
            default:
                throw new sdk_core_1.InvalidTransactionError(`unsupported transaction kind ${command.kind}`);
        }
    }
    getRecipients(tx) {
        const receipts = [];
        const splitResults = [];
        tx.tx.transactions.forEach((transaction) => {
            if (transaction.kind === 'SplitCoins') {
                const index = transaction.amounts[0].index;
                const input = tx.tx.inputs[index];
                splitResults.push(this.getAmount(input));
            }
            if (transaction.kind === 'MoveCall' && transaction.target.endsWith(iface_1.MethodNames.StakingPoolSplit)) {
                const index = transaction.arguments[1].index;
                const input = tx.tx.inputs[index];
                splitResults.push(this.getAmount(input));
            }
        });
        const destinations = [];
        tx.tx.transactions.forEach((transaction) => {
            if (transaction.kind === 'TransferObjects') {
                const index = transaction.address.index;
                const input = tx.tx.inputs[index];
                destinations.push(this.getAddress(input));
            }
        });
        destinations.map((address, i) => {
            receipts.push({
                address: address,
                amount: splitResults[i].toString(),
            });
        });
        tx.tx.transactions.forEach((transaction) => {
            if (transaction.kind === 'MoveCall' && transaction.target.endsWith(iface_1.MethodNames.PublicTransfer)) {
                const destinationArg = transaction.arguments[1];
                const destinationInput = tx.tx.inputs[destinationArg.index];
                const destination = this.getAddress(destinationInput);
                const movingObject = transaction.arguments[0];
                if (movingObject.kind === 'Input') {
                    receipts.push({
                        address: destination,
                        amount: '0',
                        data: 'unknown amount',
                    });
                }
                else if (movingObject.kind === 'Result') {
                    receipts.push({
                        address: destination,
                        amount: splitResults[movingObject.index].toString(),
                    });
                }
            }
        });
        return receipts;
    }
    /**
     * Get add staking requests
     *
     * @param {StakingProgrammableTransaction} tx: staking transaction object
     * @return {RequestAddStake[]}  add staking requests
     */
    getStakeRequests(tx) {
        const amounts = [];
        const addresses = [];
        tx.transactions.forEach((transaction, i) => {
            if (transaction.kind === 'SplitCoins') {
                const amountInputIdx = transaction.amounts[0].index;
                amounts.push(utils.getAmount(tx.inputs[amountInputIdx]));
            }
            if (transaction.kind === 'MoveCall') {
                const validatorAddressInputIdx = transaction.arguments[2]
                    .index;
                const validatorAddress = utils.getAddress(tx.inputs[validatorAddressInputIdx]);
                addresses.push(validatorAddress);
            }
        });
        return addresses.map((address, index) => {
            return {
                validatorAddress: address,
                amount: amounts[index],
            };
        });
    }
    getAmount(input) {
        return (0, sui_bcs_1.isPureArg)(input)
            ? builder_1.builder.de(bcs_1.BCS.U64, buffer_1.Buffer.from(new Uint16Array(input.Pure)).toString('base64'), 'base64')
            : input.value;
    }
    getAddress(input) {
        var _a;
        if (input.hasOwnProperty('value')) {
            return (0, sui_bcs_1.isPureArg)(input.value)
                ? (0, types_1.normalizeSuiAddress)(builder_1.builder.de(bcs_1.BCS.ADDRESS, buffer_1.Buffer.from(new Uint16Array((_a = input.value) === null || _a === void 0 ? void 0 : _a.Pure)).toString('base64'), 'base64'))
                : input.value;
        }
        else {
            return (0, sui_bcs_1.isPureArg)(input)
                ? (0, types_1.normalizeSuiAddress)(builder_1.builder.de(bcs_1.BCS.ADDRESS, buffer_1.Buffer.from(new Uint16Array(input.Pure)).toString('base64'), 'base64'))
                : input.value;
        }
    }
    normalizeCoins(coins) {
        return coins.map((coin) => {
            return utils.normalizeSuiObjectRef(coin);
        });
    }
    normalizeSuiObjectRef(obj) {
        return {
            objectId: (0, types_1.normalizeSuiObjectId)(obj.objectId),
            version: Number(obj.version),
            digest: obj.digest,
        };
    }
    transactionInput(type, index = 0, value) {
        return {
            kind: 'Input',
            value: typeof value === 'bigint' ? String(value) : value,
            index,
            type,
        };
    }
    getAddressFromPublicKey(publicKey) {
        const PUBLIC_KEY_SIZE = 32;
        const tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);
        const pubBuf = buffer_1.Buffer.from(publicKey, 'hex');
        tmp.set([keyPair_1.SIGNATURE_SCHEME_TO_FLAG['ED25519']]); // ED25519: 0x00,
        tmp.set(pubBuf, 1);
        return (0, types_1.normalizeSuiAddress)((0, blake2b_1.default)(PUBLIC_KEY_SIZE)
            .update(tmp)
            .digest('hex')
            .slice(0, constants_1.SUI_ADDRESS_LENGTH * 2));
    }
    async getFeeEstimate(url, txHex) {
        const result = await (0, rpcClient_1.makeRPC)(url, 'sui_dryRunTransactionBlock', [txHex]);
        (0, assert_1.default)(result.effects);
        (0, assert_1.default)(result.effects.gasUsed);
        if (result.effects.status.status !== 'success') {
            console.error(`Dry run failed, could not automatically determine a budget for txHex ${txHex}`);
            throw new Error(`Failed to get fee estimate`);
        }
        const gasObject = result.effects.gasUsed;
        const storageCost = new bignumber_js_1.default(gasObject.storageCost);
        const computationCost = new bignumber_js_1.default(gasObject.computationCost);
        const storageRebate = new bignumber_js_1.default(gasObject.storageRebate);
        const netCost = computationCost.plus(storageCost).minus(storageRebate);
        return netCost.comparedTo(computationCost) > 0 ? netCost : computationCost;
    }
    async getBalance(url, owner, coinType) {
        if (coinType === undefined) {
            coinType = types_1.SUI_TYPE_ARG;
        }
        const result = await (0, rpcClient_1.makeRPC)(url, 'suix_getBalance', [owner, coinType]);
        return result.totalBalance;
    }
    async getInputCoins(url, owner, coinType) {
        if (coinType === undefined) {
            coinType = types_1.SUI_TYPE_ARG;
        }
        let hasNextPage = true;
        let cursor = undefined;
        let params = [owner, coinType];
        let data = [];
        while (hasNextPage) {
            if (cursor !== undefined) {
                params = [owner, coinType, cursor];
            }
            try {
                const result = await (0, rpcClient_1.makeRPC)(url, 'suix_getCoins', params);
                data = data.concat(result.data);
                hasNextPage = result.hasNextPage;
                cursor = result.nextCursor;
            }
            catch (e) {
                console.error(`Failed to get input coins from the node ${e}`);
                throw new Error(`Failed to get input coins from the node.`);
            }
        }
        return data
            .filter((object) => object.balance !== undefined)
            .map((object) => {
            return {
                coinType: object.coinType,
                objectId: object.coinObjectId,
                version: object.version,
                digest: object.digest,
                balance: new bignumber_js_1.default(object.balance),
            };
        });
    }
    async executeTransactionBlock(url, serializedTx, signatures) {
        const reqType = 'WaitForEffectsCert';
        const options = { showEffects: true };
        const params = [serializedTx, signatures, options, reqType];
        let result;
        try {
            result = await (0, rpcClient_1.makeRPC)(url, 'sui_executeTransactionBlock', params);
        }
        catch (e) {
            throw new Error(`${e.message}`);
        }
        return result.digest;
    }
    validateNonNegativeNumber(defaultVal, errorMsg, inputVal) {
        if (inputVal === undefined) {
            return defaultVal;
        }
        let nonNegativeNum;
        try {
            nonNegativeNum = Number(inputVal);
        }
        catch (e) {
            throw new Error(errorMsg);
        }
        if (isNaN(nonNegativeNum.valueOf()) || nonNegativeNum < 0) {
            throw new Error(errorMsg);
        }
        return nonNegativeNum;
    }
}
exports.Utils = Utils;
const utils = new Utils();
exports.default = utils;
var AppId;
(function (AppId) {
    AppId[AppId["Sui"] = 0] = "Sui";
})(AppId = exports.AppId || (exports.AppId = {}));
var IntentVersion;
(function (IntentVersion) {
    IntentVersion[IntentVersion["V0"] = 0] = "V0";
})(IntentVersion = exports.IntentVersion || (exports.IntentVersion = {}));
var IntentScope;
(function (IntentScope) {
    IntentScope[IntentScope["TransactionData"] = 0] = "TransactionData";
    IntentScope[IntentScope["TransactionEffects"] = 1] = "TransactionEffects";
    IntentScope[IntentScope["CheckpointSummary"] = 2] = "CheckpointSummary";
    IntentScope[IntentScope["PersonalMessage"] = 3] = "PersonalMessage";
})(IntentScope = exports.IntentScope || (exports.IntentScope = {}));
//# sourceMappingURL=data:application/json;base64,
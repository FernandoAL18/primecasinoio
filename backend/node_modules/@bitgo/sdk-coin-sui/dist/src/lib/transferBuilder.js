"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferBuilder = void 0;
const transactionBuilder_1 = require("./transactionBuilder");
const sdk_core_1 = require("@bitgo/sdk-core");
const iface_1 = require("./iface");
const transferTransaction_1 = require("./transferTransaction");
const assert_1 = __importDefault(require("assert"));
const builder_1 = require("./mystenlab/builder");
const utils_1 = __importDefault(require("./utils"));
const constants_1 = require("./constants");
class TransferBuilder extends transactionBuilder_1.TransactionBuilder {
    constructor(_coinConfig) {
        super(_coinConfig);
        this._transaction = new transferTransaction_1.TransferTransaction(_coinConfig);
    }
    get transactionType() {
        return sdk_core_1.TransactionType.Send;
    }
    send(recipients) {
        this.validateRecipients(recipients);
        this._recipients = recipients;
        return this;
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction.suiTransaction) {
            return;
        }
        this.validateTransactionFields();
    }
    /** @inheritdoc */
    sign(key) {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        super.sign(key);
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        const tx = new transferTransaction_1.TransferTransaction(this._coinConfig);
        this.validateRawTransaction(rawTransaction);
        tx.fromRawTransaction(rawTransaction);
        this.initBuilder(tx);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        this.transaction.setSuiTransaction(this.buildSuiTransaction());
        this.transaction.transactionType(this.transactionType);
        if (this._signer) {
            this.transaction.sign(this._signer);
        }
        this._signatures.forEach((signature) => {
            this.transaction.addSignature(signature.publicKey, signature.signature);
        });
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    /**
     * Initialize the transaction builder fields using the decoded transaction data
     *
     * @param {Transaction} tx the transaction data
     */
    initBuilder(tx) {
        this._transaction = tx;
        if (tx.signature && tx.signature.length > 0) {
            this._signatures = [tx.suiSignature];
        }
        const txData = tx.toJson();
        this.type(iface_1.SuiTransactionType.Transfer);
        this.sender(txData.sender);
        this.gasData(txData.gasData);
        const recipients = utils_1.default.getRecipients(tx.suiTransaction);
        this.send(recipients);
    }
    /**
     * Validates all fields are defined
     */
    validateTransactionFields() {
        (0, assert_1.default)(this._type, new sdk_core_1.BuildTransactionError('type is required before building'));
        (0, assert_1.default)(this._sender, new sdk_core_1.BuildTransactionError('sender is required before building'));
        (0, assert_1.default)(this._recipients && this._recipients.length > 0, new sdk_core_1.BuildTransactionError('at least one recipient is required before building'));
        (0, assert_1.default)(this._gasData, new sdk_core_1.BuildTransactionError('gasData is required before building'));
        this.validateGasData(this._gasData);
    }
    /**
     * Build transfer programmable transaction
     *
     * @protected
     */
    buildSuiTransaction() {
        this.validateTransactionFields();
        const programmableTxBuilder = new builder_1.TransactionBlock();
        // number of objects passed as gas payment should be strictly less than `MAX_GAS_OBJECTS`. When the transaction
        // requires a larger number of inputs we use the merge command to merge the rest of the objects into the gasCoin
        if (this._gasData.payment.length >= constants_1.MAX_GAS_OBJECTS) {
            const gasPaymentObjects = this._gasData.payment
                .slice(constants_1.MAX_GAS_OBJECTS - 1)
                .map((object) => builder_1.Inputs.ObjectRef(object));
            // limit for total number of `args: CallArg[]` for a single command is MAX_COMMAND_ARGS so the max length of
            // `sources[]` for a `mergeCoins(destination, sources[])` command is MAX_COMMAND_ARGS - 1 (1 used up for
            // `destination`). We need to create a total of `gasPaymentObjects/(MAX_COMMAND_ARGS - 1)` merge commands to
            // merge all the objects
            while (gasPaymentObjects.length > 0) {
                programmableTxBuilder.mergeCoins(programmableTxBuilder.gas, gasPaymentObjects.splice(0, constants_1.MAX_COMMAND_ARGS - 1).map((object) => programmableTxBuilder.object(object)));
            }
        }
        this._recipients.forEach((recipient) => {
            const coin = programmableTxBuilder.add(builder_1.Transactions.SplitCoins(programmableTxBuilder.gas, [
                programmableTxBuilder.pure(Number(recipient.amount)),
            ]));
            programmableTxBuilder.add(builder_1.Transactions.TransferObjects([coin], programmableTxBuilder.object(recipient.address)));
        });
        const txData = programmableTxBuilder.blockData;
        return {
            type: this._type,
            sender: this._sender,
            tx: {
                inputs: [...txData.inputs],
                transactions: [...txData.transactions],
            },
            gasData: {
                ...this._gasData,
                payment: this._gasData.payment.slice(0, constants_1.MAX_GAS_OBJECTS - 1),
            },
        };
    }
}
exports.TransferBuilder = TransferBuilder;
//# sourceMappingURL=data:application/json;base64,
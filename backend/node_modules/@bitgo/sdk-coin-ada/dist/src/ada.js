"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ada = exports.DEFAULT_SCAN_FACTOR = void 0;
const assert_1 = __importDefault(require("assert"));
const sdk_core_1 = require("@bitgo/sdk-core");
const lib_1 = require("./lib");
const statics_1 = require("@bitgo/statics");
const utils_1 = __importDefault(require("./lib/utils"));
const request = __importStar(require("superagent"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
exports.DEFAULT_SCAN_FACTOR = 20; // default number of receive addresses to scan for funds
class Ada extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Ada(bitgo, staticsCoin);
    }
    /**
     * Factor between the coin's base unit and its smallest subdivison
     */
    getBaseFactor() {
        return 1e6;
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getBaseChain() {
        return this.getChain();
    }
    /**
     * Verify that a transaction prebuild complies with the original intention
     *  A prebuild transaction has to be parsed correctly and intended recipients has to be
     *  in the transaction output
     *
     * @param params.txPrebuild prebuild transaction
     * @param params.txParams transaction parameters
     * @return true if verification success
     *
     */
    async verifyTransaction(params) {
        try {
            const coinConfig = statics_1.coins.get(this.getChain());
            const { txPrebuild: txPrebuild, txParams: txParams } = params;
            const transaction = new lib_1.Transaction(coinConfig);
            (0, assert_1.default)(txPrebuild.txHex, new Error('missing required tx prebuild property txHex'));
            const rawTx = txPrebuild.txHex;
            transaction.fromRawTransaction(rawTx);
            const explainedTx = transaction.explainTransaction();
            if (txParams.recipients !== undefined) {
                for (const recipient of txParams.recipients) {
                    let find = false;
                    for (const output of explainedTx.outputs) {
                        if (recipient.address === output.address && recipient.amount === output.amount) {
                            find = true;
                        }
                    }
                    if (!find) {
                        throw new Error('cannot find recipient in expected output');
                    }
                }
            }
        }
        catch (e) {
            if (e instanceof sdk_core_1.NodeEnvironmentError) {
                return true;
            }
            else {
                throw e;
            }
        }
        return true;
    }
    async isWalletAddress(params) {
        const { address } = params;
        if (!this.isValidAddress(address)) {
            throw new sdk_core_1.InvalidAddressError(`Invalid Cardano Address: ${address}`);
        }
        return true;
    }
    /** @inheritDoc */
    async signMessage(key, message) {
        const adaKeypair = new lib_1.KeyPair({ prv: key.prv });
        const messageHex = message instanceof Buffer ? message.toString('hex') : message;
        return Buffer.from(adaKeypair.signMessage(messageHex));
    }
    /**
     * Explain/parse transaction
     * @param params
     */
    async explainTransaction(params) {
        const factory = this.getBuilder();
        let rebuiltTransaction;
        const txRaw = params.txPrebuild.txHex;
        try {
            const transactionBuilder = factory.from(txRaw);
            rebuiltTransaction = await transactionBuilder.build();
        }
        catch {
            throw new Error('Invalid transaction');
        }
        return rebuiltTransaction.explainTransaction();
    }
    async parseTransaction(params) {
        const transactionExplanation = await this.explainTransaction({
            txPrebuild: params.txPrebuild,
        });
        if (!transactionExplanation) {
            throw new Error('Invalid transaction');
        }
        return transactionExplanation;
    }
    generateKeyPair(seed) {
        const keyPair = seed ? new lib_1.KeyPair({ seed }) : new lib_1.KeyPair();
        const keys = keyPair.getKeys();
        if (!keys.prv) {
            throw new Error('Missing prv in key generation.');
        }
        return {
            pub: keys.pub,
            prv: keys.prv,
        };
    }
    isValidPub(pub) {
        return utils_1.default.isValidPublicKey(pub);
    }
    isValidPrv(prv) {
        return utils_1.default.isValidPrivateKey(prv);
    }
    isValidAddress(address) {
        return utils_1.default.isValidAddress(address);
    }
    async signTransaction(params) {
        const factory = this.getBuilder();
        const txBuilder = factory.from(params.txPrebuild.txHex);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const serializedTx = transaction.toBroadcastFormat();
        return {
            txHex: serializedTx,
        };
    }
    getPublicNodeUrl() {
        return sdk_core_1.Environments[this.bitgo.getEnv()].adaNodeUrl;
    }
    async getDataFromNode(endpoint, requestBody) {
        const restEndpoint = this.getPublicNodeUrl() + '/' + endpoint;
        try {
            const res = await request.post(restEndpoint).send(requestBody);
            return res;
        }
        catch (e) {
            console.debug(e);
        }
        throw new Error(`Unable to call endpoint ${restEndpoint}`);
    }
    async getAddressInfo(walletAddr) {
        const requestBody = { _addresses: [walletAddr] };
        const res = await this.getDataFromNode('address_info', requestBody);
        if (res.status != 200) {
            throw new Error(`Failed to retrieve address info for address ${walletAddr}`);
        }
        const body = res.body[0];
        if (body === undefined) {
            return { balance: 0, utxoSet: [] };
        }
        return { balance: body.balance, utxoSet: body.utxo_set };
    }
    async getChainTipInfo() {
        const res = await this.getDataFromNode('tip');
        if (res.status != 200) {
            throw new Error('Failed to retrieve chain tip info');
        }
        const body = res.body[0];
        return body;
    }
    /** inherited doc */
    async createBroadcastableSweepTransaction(params) {
        var _a;
        const req = params.signatureShares;
        const broadcastableTransactions = [];
        let lastScanIndex = 0;
        for (let i = 0; i < req.length; i++) {
            const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
            const transaction = req[i].txRequest.transactions[0].unsignedTx;
            if (!req[i].ovc || !req[i].ovc[0].eddsaSignature) {
                throw new Error('Missing signature(s)');
            }
            const signature = req[i].ovc[0].eddsaSignature;
            if (!transaction.signableHex) {
                throw new Error('Missing signable hex');
            }
            const messageBuffer = Buffer.from(transaction.signableHex, 'hex');
            const result = MPC.verify(messageBuffer, signature);
            if (!result) {
                throw new Error('Invalid signature');
            }
            const signatureHex = Buffer.concat([Buffer.from(signature.R, 'hex'), Buffer.from(signature.sigma, 'hex')]);
            const txBuilder = this.getBuilder().from(transaction.serializedTx);
            if (!((_a = transaction.coinSpecific) === null || _a === void 0 ? void 0 : _a.commonKeychain)) {
                throw new Error('Missing common keychain');
            }
            const commonKeychain = transaction.coinSpecific.commonKeychain;
            if (!transaction.derivationPath) {
                throw new Error('Missing derivation path');
            }
            const derivationPath = transaction.derivationPath;
            const accountId = MPC.deriveUnhardened(commonKeychain, derivationPath).slice(0, 64);
            const adaKeyPair = new lib_1.KeyPair({ pub: accountId });
            // add combined signature from ovc
            txBuilder.addSignature({ pub: adaKeyPair.getKeys().pub }, signatureHex);
            const signedTransaction = await txBuilder.build();
            const serializedTx = signedTransaction.toBroadcastFormat();
            broadcastableTransactions.push({
                serializedTx: serializedTx,
                scanIndex: transaction.scanIndex,
            });
            if (i === req.length - 1 && transaction.coinSpecific.lastScanIndex) {
                lastScanIndex = transaction.coinSpecific.lastScanIndex;
            }
        }
        return { transactions: broadcastableTransactions, lastScanIndex };
    }
    /**
     * Builds funds recovery transaction(s) without BitGo
     *
     * @param {MPCRecoveryOptions} params parameters needed to construct and
     * (maybe) sign the transaction
     *
     * @returns {MPCTx | MPCSweepTxs} array of the serialized transaction hex strings and indices
     * of the addresses being swept
     */
    async recover(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        const index = params.index || 0;
        const currPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const addressParams = {
            bitgoKey: params.bitgoKey,
            index: index,
            seed: params.seed,
        };
        const { address: senderAddr, accountId } = await this.getAdaAddressAndAccountId(addressParams);
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const { balance, utxoSet } = await this.getAddressInfo(senderAddr);
        if (balance <= 0) {
            throw new Error('Did not find address with funds to recover');
        }
        // first build the unsigned txn
        const tipAbsSlot = await this.getChainTipInfo();
        const txBuilder = this.getBuilder().getTransferBuilder();
        txBuilder.changeAddress(params.recoveryDestination, balance.toString());
        for (const utxo of utxoSet) {
            txBuilder.input({ transaction_id: utxo.tx_hash, transaction_index: utxo.tx_index });
        }
        // each slot is about 1 second, so this transaction should be valid for
        // 7 * 86,400 seconds (7 days) after creation
        txBuilder.ttl(Number(tipAbsSlot.abs_slot) + 7 * 86400);
        const unsignedTransaction = (await txBuilder.build());
        // sum up every output
        const amount = unsignedTransaction
            .toJson()
            .outputs.reduce((acc, output) => new bignumber_js_1.default(acc).plus(output.amount), new bignumber_js_1.default(0));
        if (amount.isLessThan(10000000)) {
            throw new Error('Insufficient funds to recover, minimum required is 1 ADA plus fees, got ' +
                amount.toString() +
                ' fees: ' +
                unsignedTransaction.getFee);
        }
        let serializedTx = unsignedTransaction.toBroadcastFormat();
        if (!isUnsignedSweep) {
            if (!params.userKey) {
                throw new Error('missing userKey');
            }
            if (!params.backupKey) {
                throw new Error('missing backupKey');
            }
            if (!params.walletPassphrase) {
                throw new Error('missing wallet passphrase');
            }
            // Clean up whitespace from entered values
            const userKey = params.userKey.replace(/\s/g, '');
            const backupKey = params.backupKey.replace(/\s/g, '');
            // Decrypt private keys from KeyCard values
            let userPrv;
            try {
                userPrv = this.bitgo.decrypt({
                    input: userKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting user keychain: ${e.message}`);
            }
            /** TODO BG-52419 Implement Codec for parsing */
            const userSigningMaterial = JSON.parse(userPrv);
            let backupPrv;
            try {
                backupPrv = this.bitgo.decrypt({
                    input: backupKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting backup keychain: ${e.message}`);
            }
            const backupSigningMaterial = JSON.parse(backupPrv);
            // add signature
            const signatureHex = await sdk_core_1.EDDSAMethods.getTSSSignature(userSigningMaterial, backupSigningMaterial, currPath, unsignedTransaction);
            const adaKeyPair = new lib_1.KeyPair({ pub: accountId });
            txBuilder.addSignature({ pub: adaKeyPair.getKeys().pub }, signatureHex);
            const signedTransaction = await txBuilder.build();
            serializedTx = signedTransaction.toBroadcastFormat();
        }
        else {
            const transactionPrebuild = { txHex: serializedTx };
            const parsedTx = await this.parseTransaction({ txPrebuild: transactionPrebuild });
            const walletCoin = this.getChain();
            const output = parsedTx.outputs[0];
            const inputs = [
                {
                    address: senderAddr,
                    valueString: output.amount,
                    value: new bignumber_js_1.default(output.amount).toNumber(),
                },
            ];
            const outputs = [
                {
                    address: output.address,
                    valueString: output.amount,
                    coinName: walletCoin,
                },
            ];
            const spendAmount = output.amount;
            const completedParsedTx = { inputs: inputs, outputs: outputs, spendAmount: spendAmount, type: '' };
            const fee = new bignumber_js_1.default(parsedTx.fee.fee);
            const feeInfo = { fee: fee.toNumber(), feeString: fee.toString() };
            const coinSpecific = { commonKeychain: bitgoKey };
            const transaction = {
                serializedTx: serializedTx,
                scanIndex: index,
                coin: walletCoin,
                signableHex: unsignedTransaction.signablePayload.toString('hex'),
                derivationPath: currPath,
                parsedTx: completedParsedTx,
                feeInfo: feeInfo,
                coinSpecific: coinSpecific,
            };
            const unsignedTx = { unsignedTx: transaction, signatureShares: [] };
            const transactions = [unsignedTx];
            const txRequest = {
                transactions: transactions,
                walletCoin: walletCoin,
            };
            const txRequests = { txRequests: [txRequest] };
            return txRequests;
        }
        const transaction = { serializedTx: serializedTx, scanIndex: index };
        return transaction;
    }
    /**
     * Builds native ADA recoveries of receive addresses in batch without BitGo.
     * Funds will be recovered to base address first. You need to initiate another sweep txn after that.
     *
     * @param {MPCConsolidationRecoveryOptions} params - options for consolidation recovery.
     * @param {string} [params.startingScanIndex] - receive address index to start scanning from. default to 1 (inclusive).
     * @param {string} [params.endingScanIndex] - receive address index to end scanning at. default to startingScanIndex + 20 (exclusive).
     */
    async recoverConsolidations(params) {
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const startIdx = params.startingScanIndex || 1;
        const endIdx = params.endingScanIndex || startIdx + exports.DEFAULT_SCAN_FACTOR;
        if (startIdx < 1 || endIdx <= startIdx || endIdx - startIdx > 10 * exports.DEFAULT_SCAN_FACTOR) {
            throw new Error(`Invalid starting or ending index to scan for addresses. startingScanIndex: ${startIdx}, endingScanIndex: ${endIdx}.`);
        }
        const addressParams = {
            bitgoKey: params.bitgoKey,
            index: 0,
            seed: params.seed,
        };
        const { address: baseAddress } = await this.getAdaAddressAndAccountId(addressParams);
        const consolidationTransactions = [];
        let lastScanIndex = startIdx;
        for (let i = startIdx; i < endIdx; i++) {
            const recoverParams = {
                userKey: params.userKey,
                backupKey: params.backupKey,
                bitgoKey: params.bitgoKey,
                walletPassphrase: params.walletPassphrase,
                recoveryDestination: baseAddress,
                seed: params.seed,
                index: i,
            };
            let recoveryTransaction;
            try {
                recoveryTransaction = await this.recover(recoverParams);
            }
            catch (e) {
                if (e.message === 'Did not find address with funds to recover') {
                    lastScanIndex = i;
                    continue;
                }
                throw e;
            }
            if (isUnsignedSweep) {
                consolidationTransactions.push(recoveryTransaction.txRequests[0]);
            }
            else {
                consolidationTransactions.push(recoveryTransaction);
            }
            lastScanIndex = i;
        }
        if (consolidationTransactions.length == 0) {
            throw new Error('Did not find an address with funds to recover');
        }
        if (isUnsignedSweep) {
            // lastScanIndex will be used to inform user the last address index scanned for available funds (so they can
            // appropriately adjust the scan range on the next iteration of consolidation recoveries). In the case of unsigned
            // sweep consolidations, this lastScanIndex will be provided in the coinSpecific of the last txn made.
            const lastTransactionCoinSpecific = {
                commonKeychain: consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific
                    .commonKeychain,
                lastScanIndex: lastScanIndex,
            };
            consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific =
                lastTransactionCoinSpecific;
            const consolidationSweepTransactions = { txRequests: consolidationTransactions };
            return consolidationSweepTransactions;
        }
        return { transactions: consolidationTransactions, lastScanIndex };
    }
    /**
     * Obtains ADA address and account id from provided bitgo key for the given index and seed (optional).
     *
     * @param {AdaAddressParams} params - params to obtain ada address and account id
     */
    async getAdaAddressAndAccountId(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        let addrFormat = sdk_core_1.AddressFormat.testnet;
        if (this.getChain() === 'ada') {
            addrFormat = sdk_core_1.AddressFormat.mainnet;
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        const derivationPathPrefix = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) : 'm';
        const stakeKeyPair = new lib_1.KeyPair({
            pub: MPC.deriveUnhardened(bitgoKey, derivationPathPrefix + '/0').slice(0, 64),
        });
        const currPath = derivationPathPrefix + `/${params.index}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 64);
        const paymentKeyPair = new lib_1.KeyPair({ pub: accountId });
        const address = lib_1.Utils.default.createBaseAddressWithStakeAndPaymentKey(stakeKeyPair, paymentKeyPair, addrFormat);
        return { address, accountId };
    }
    /** inherited doc */
    supportsTss() {
        return true;
    }
    /** inherited doc */
    getMPCAlgorithm() {
        return 'eddsa';
    }
    /** inherited doc */
    allowsAccountConsolidations() {
        return true;
    }
    getBuilder() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getBaseChain()));
    }
}
exports.Ada = Ada;
//# sourceMappingURL=data:application/json;base64,
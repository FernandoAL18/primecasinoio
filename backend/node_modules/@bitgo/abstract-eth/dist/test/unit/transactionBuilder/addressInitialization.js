"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testContractCallForCreateForwarder = exports.testAddressInitializationBuildsFromSignedSerializedData = exports.testAddressInitializationBuildsFromSerializedData = exports.testAddressInitializationBuildsCorrectlyAndReturnsAddress = exports.testFailsWithInvalidForwarderVersion = exports.testAddressInitializationWithoutContractAddress = void 0;
const should_1 = __importDefault(require("should"));
const sdk_core_1 = require("@bitgo/sdk-core");
async function testAddressInitializationWithoutContractAddress(txBuilder) {
    it('should fail if there is no contract address', async () => {
        txBuilder.type(sdk_core_1.TransactionType.AddressInitialization);
        txBuilder.fee({
            fee: '10',
            gasLimit: '1000',
        });
        txBuilder.counter(1);
        await txBuilder.build().should.be.rejectedWith('Invalid transaction: missing contract address');
    });
}
exports.testAddressInitializationWithoutContractAddress = testAddressInitializationWithoutContractAddress;
async function testFailsWithInvalidForwarderVersion(txBuilder, testData) {
    it('should fail if forwarder version is invalid', async () => {
        try {
            txBuilder.type(sdk_core_1.TransactionType.AddressInitialization);
            txBuilder.fee({
                fee: '10',
                gasLimit: '1000',
            });
            txBuilder.contract(testData.FORWARDER_FACTORY_ADDRESS);
            txBuilder.forwarderVersion(3);
        }
        catch (e) {
            should_1.default.equal(e.message, 'Invalid forwarder version: 3');
        }
    });
}
exports.testFailsWithInvalidForwarderVersion = testFailsWithInvalidForwarderVersion;
async function testAddressInitializationBuildsCorrectlyAndReturnsAddress(txBuilder, testData) {
    it('should build properly and return a correct address', async () => {
        txBuilder.type(sdk_core_1.TransactionType.AddressInitialization);
        txBuilder.fee({
            fee: '10',
            gasLimit: '1000',
        });
        txBuilder.counter(1);
        txBuilder.contract(testData.FORWARDER_FACTORY_ADDRESS);
        txBuilder.baseAddress(testData.BASE_ADDRESS);
        txBuilder.feeAddress(testData.FEE_ADDRESS);
        txBuilder.forwarderVersion(4);
        txBuilder.salt('0x1');
        txBuilder.initCode(testData.FORWARDER_IMPLEMENTATION_ADDRESS);
        txBuilder.sign({ key: testData.KEYPAIR_PRV.getKeys().prv });
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        should_1.default.equal(txJson.deployedAddress, testData.DEPLOYED_ADDRESS);
        should_1.default.equal(txJson.to, testData.FORWARDER_FACTORY_ADDRESS);
    });
}
exports.testAddressInitializationBuildsCorrectlyAndReturnsAddress = testAddressInitializationBuildsCorrectlyAndReturnsAddress;
async function testAddressInitializationBuildsFromSerializedData(txBuilder, testData) {
    it('should build properly from serialized', async () => {
        txBuilder.type(sdk_core_1.TransactionType.AddressInitialization);
        txBuilder.from(testData.UNSIGNED_ADDRESS_INIT);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        should_1.default.equal(txJson.to, testData.FORWARDER_FACTORY_ADDRESS);
    });
}
exports.testAddressInitializationBuildsFromSerializedData = testAddressInitializationBuildsFromSerializedData;
async function testAddressInitializationBuildsFromSignedSerializedData(txBuilder, testData) {
    it('should build properly from signed serialized', async () => {
        txBuilder.type(sdk_core_1.TransactionType.AddressInitialization);
        txBuilder.from(testData.SIGNED_ADDRESS_INIT);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        should_1.default.equal(txJson.to, testData.FORWARDER_FACTORY_ADDRESS);
        should_1.default.equal(txJson.from, testData.ACCOUNT_1);
    });
}
exports.testAddressInitializationBuildsFromSignedSerializedData = testAddressInitializationBuildsFromSignedSerializedData;
async function testContractCallForCreateForwarder(txBuilder, testData) {
    it('should build properly createForwarder call for recovery', async () => {
        txBuilder.type(sdk_core_1.TransactionType.ContractCall);
        txBuilder.contract(testData.BASE_ADDRESS);
        txBuilder.data(testData.CREATE_FORWARDER_METHOD);
        txBuilder.fee({
            fee: '10',
            gasLimit: '1000',
        });
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        should_1.default.equal(txJson.to, testData.BASE_ADDRESS);
    });
}
exports.testContractCallForCreateForwarder = testContractCallForCreateForwarder;
//# sourceMappingURL=data:application/json;base64,
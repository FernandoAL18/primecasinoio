"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRecoveryTransactionWithoutData = exports.testRecoveryWalletDeployment = exports.testFinalVCheck = exports.testUnsignedInitTransactionFromSerialized = exports.testUnsignedInitTransaction = exports.testSignedInitTransaction = exports.testWalletInitTransaction = exports.testInitTransaction = void 0;
const should_1 = __importDefault(require("should"));
const sdk_core_1 = require("@bitgo/sdk-core");
function addOwner(txBuilder, testData) {
    txBuilder.owner(testData.ACCOUNT_1);
    txBuilder.owner(testData.ACCOUNT_2);
    txBuilder.owner(testData.ACCOUNT_3);
}
async function testInitTransaction(txBuilder, testData) {
    it('an init transaction', async () => {
        addOwner(txBuilder, testData);
        txBuilder.sign({ key: testData.PRIVATE_KEY_1 });
        const tx = await txBuilder.build();
        tx.type.should.equal(sdk_core_1.TransactionType.WalletInitialization);
        const txJson = tx.toJson();
        txJson.gasLimit.should.equal('6800000');
        txJson.gasPrice.should.equal('10000000000');
        should_1.default.equal(txJson.nonce, 1);
        should_1.default.equal(txJson.chainId, testData.TXDATA.chainId);
        should_1.default.equal(tx.toBroadcastFormat(), testData.TX_BROADCAST);
    });
}
exports.testInitTransaction = testInitTransaction;
async function testWalletInitTransaction(txBuilder, testData) {
    it('a wallet initialization transaction with nonce 0', async () => {
        addOwner(txBuilder, testData);
        txBuilder.counter(0);
        txBuilder.sign({ key: testData.PRIVATE_KEY_1 });
        const tx = await txBuilder.build();
        tx.type.should.equal(sdk_core_1.TransactionType.WalletInitialization);
        const txJson = tx.toJson();
        txJson.gasLimit.should.equal('6800000');
        txJson.gasPrice.should.equal('10000000000');
        should_1.default.equal(txJson.nonce, 0);
        should_1.default.equal(txJson.chainId, testData.TXDATA.chainId);
    });
}
exports.testWalletInitTransaction = testWalletInitTransaction;
async function testSignedInitTransaction(newTxBuilder, testData) {
    it('a signed init transaction from serialized', async () => {
        newTxBuilder.from(testData.TX_BROADCAST);
        const newTx = await newTxBuilder.build();
        should_1.default.equal(newTx.toBroadcastFormat(), testData.TX_BROADCAST);
        should_1.default.equal(newTx.id, testData.EXPECTED_NEW_TX_ID);
        const txJson = newTx.toJson();
        should_1.default.exist(txJson.v);
        should_1.default.exist(txJson.r);
        should_1.default.exist(txJson.s);
        should_1.default.exist(txJson.from);
    });
}
exports.testSignedInitTransaction = testSignedInitTransaction;
async function testUnsignedInitTransaction(txBuilder, newTxBuilder, testData) {
    it('an unsigned init transaction from serialized with 0-prefixed address', async () => {
        addOwner(txBuilder, testData);
        const tx = await txBuilder.build();
        const serialized = tx.toBroadcastFormat();
        newTxBuilder.from(serialized);
        const newTx = await newTxBuilder.build();
        should_1.default.equal(newTx.toBroadcastFormat(), serialized);
    });
}
exports.testUnsignedInitTransaction = testUnsignedInitTransaction;
async function testUnsignedInitTransactionFromSerialized(txBuilder, newTxBuilder, testData) {
    it('an unsigned init transaction from serialized', async () => {
        addOwner(txBuilder, testData);
        const tx = await txBuilder.build();
        const serialized = tx.toBroadcastFormat();
        newTxBuilder.from(serialized);
        const newTx = await newTxBuilder.build();
        should_1.default.equal(newTx.toBroadcastFormat(), serialized);
    });
}
exports.testUnsignedInitTransactionFromSerialized = testUnsignedInitTransactionFromSerialized;
async function testFinalVCheck(txBuilder, testData) {
    it('an unsigned transaction with final v check', async () => {
        addOwner(txBuilder, testData);
        const tx = await txBuilder.build();
        should_1.default.equal(tx.toJson().v, testData.FINAL_V);
    });
}
exports.testFinalVCheck = testFinalVCheck;
async function testRecoveryWalletDeployment(txBuilder, testData) {
    it('wallet deployment transaction for recovery', async () => {
        txBuilder.type(sdk_core_1.TransactionType.RecoveryWalletDeployment);
        txBuilder.data(testData.RECOVERY_WALLET_BYTE_CODE);
        txBuilder.fee({
            eip1559: {
                maxFeePerGas: '100',
                maxPriorityFeePerGas: '10',
            },
            fee: '100',
            gasLimit: '10000',
        });
        txBuilder.counter(1);
        const tx = await txBuilder.build();
        const txJson = tx.toJson();
        should_1.default.equal(txJson._type, 'EIP1559');
        should_1.default.equal(txJson.gasLimit, '10000');
        should_1.default.exists(tx.toBroadcastFormat());
    });
}
exports.testRecoveryWalletDeployment = testRecoveryWalletDeployment;
async function testRecoveryTransactionWithoutData(txBuilder) {
    it('fail when data is not passed recovery', async () => {
        txBuilder.type(sdk_core_1.TransactionType.RecoveryWalletDeployment);
        txBuilder.fee({
            eip1559: {
                maxFeePerGas: '100',
                maxPriorityFeePerGas: '10',
            },
            fee: '100',
            gasLimit: '10000',
        });
        txBuilder.counter(1);
        await txBuilder.build().should.be.rejectedWith('Invalid transaction: missing contract call data field');
    });
}
exports.testRecoveryTransactionWithoutData = testRecoveryTransactionWithoutData;
//# sourceMappingURL=data:application/json;base64,
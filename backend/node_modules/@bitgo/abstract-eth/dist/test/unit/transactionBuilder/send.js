"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testSendFundsTransaction = exports.runSendTests = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const should_1 = __importDefault(require("should"));
const ethUtil = __importStar(require("ethereumjs-util"));
const src_1 = require("../../../src");
function runSendTests(coinName, txBuilder, getBuilder, testData) {
    describe(`${coinName} transaction builder send`, () => {
        describe('should sign and build', () => {
            let key;
            let contractAddress;
            const networkTokenIdentifier = testData.NETWORK_TOKEN_IDENTIFIER;
            const coin = testData.COIN;
            const getOperationHash = function (tx) {
                const { data } = tx.toJson();
                const { tokenContractAddress, expireTime, sequenceId, amount, to } = (0, src_1.decodeTransferData)(data);
                const operationParams = [
                    ['string', 'address', 'uint', 'address', 'uint', 'uint'],
                    [
                        `${testData.CHAIN_ID}-ERC20`,
                        new ethUtil.BN(ethUtil.stripHexPrefix(to), 16),
                        amount,
                        new ethUtil.BN(ethUtil.stripHexPrefix(tokenContractAddress || ''), 16),
                        expireTime,
                        sequenceId,
                    ],
                ];
                return ethereumjs_abi_1.default.soliditySHA3(...operationParams);
            };
            beforeEach(() => {
                contractAddress = '0x8f977e912ef500548a0c3be6ddde9899f1199b81';
                txBuilder = getBuilder(coin);
                key = testData.KEYPAIR_PRV.getKeys().prv;
                txBuilder.fee({
                    fee: '1000000000',
                    gasLimit: '12100000',
                });
                txBuilder.counter(2);
                txBuilder.type(sdk_core_1.TransactionType.Send);
                txBuilder.contract(contractAddress);
            });
            it('a send funds transaction', async () => {
                const recipient = '0x19645032c7f1533395d44a629462e751084d3e4c';
                const amount = '1000000000';
                const expireTime = 1590066728;
                const sequenceId = 5;
                txBuilder
                    .transfer()
                    .amount(amount)
                    .to(recipient)
                    .expirationTime(expireTime)
                    .contractSequenceId(sequenceId)
                    .key(key);
                txBuilder.sign({ key: testData.PRIVATE_KEY_1 });
                const tx = await txBuilder.build();
                should_1.default.equal(tx.toJson().chainId, testData.TXDATA.chainId);
                should_1.default.equal(tx.toBroadcastFormat(), testData.SEND_TX_BROADCAST_LEGACY);
                should_1.default.equal(tx.signature.length, 2);
                should_1.default.equal(tx.inputs.length, 1);
                should_1.default.equal(tx.inputs[0].address, contractAddress);
                should_1.default.equal(tx.inputs[0].value, amount);
                should_1.default.equal(tx.outputs.length, 1);
                should_1.default.equal(tx.outputs[0].address, recipient);
                should_1.default.equal(tx.outputs[0].value, amount);
                const data = tx.toJson().data;
                const { to, amount: parsedAmount, expireTime: parsedExpireTime, sequenceId: parsedSequenceId, } = (0, src_1.decodeTransferData)(data);
                should_1.default.equal(to, recipient);
                should_1.default.equal(parsedAmount, amount);
                should_1.default.equal(parsedExpireTime, expireTime);
                should_1.default.equal(parsedSequenceId, sequenceId);
            });
            it('a send funds with amount 0 transaction', async () => {
                txBuilder
                    .transfer()
                    .amount('0')
                    .to('0x19645032c7f1533395d44a629462e751084d3e4c')
                    .expirationTime(1590066728)
                    .contractSequenceId(5)
                    .key(key);
                txBuilder.sign({ key: testData.PRIVATE_KEY_1 });
                const tx = await txBuilder.build();
                should_1.default.equal(tx.toBroadcastFormat(), testData.SEND_TX_AMOUNT_ZERO_BROADCAST);
            });
            it('a send token transaction', async () => {
                const recipient = '0x72c2c8e08bf91d755cd7d26b49a2ee3dc99de1b9';
                const contractAddress = '0xdf7decb1baa8f529f0c8982cbb4be50357195299';
                const amount = '100';
                const key = testData.KEYPAIR_PRV.getKeys().prv;
                txBuilder.contract(contractAddress);
                txBuilder
                    .transfer()
                    .coin(networkTokenIdentifier)
                    .amount(amount)
                    .to(recipient)
                    .expirationTime(1590066728)
                    .contractSequenceId(5)
                    .key(key);
                txBuilder.sign({
                    key: testData.PRIVATE_KEY_1,
                });
                const tx = await txBuilder.build();
                const operationHash = getOperationHash(tx);
                should_1.default.equal(tx.toBroadcastFormat(), testData.SEND_TOKEN_TX_BROADCAST);
                should_1.default.equal(tx.signature.length, 2);
                should_1.default.equal(tx.inputs.length, 1);
                should_1.default.equal(tx.inputs[0].address, contractAddress);
                should_1.default.equal(tx.inputs[0].value, amount);
                should_1.default.equal(tx.inputs[0].coin, networkTokenIdentifier);
                should_1.default.equal(tx.outputs.length, 1);
                should_1.default.equal(tx.outputs[0].address, recipient);
                should_1.default.equal(tx.outputs[0].value, amount);
                should_1.default.equal(tx.outputs[0].coin, networkTokenIdentifier);
                const { signature } = (0, src_1.decodeTransferData)(tx.toJson().data);
                const { v, r, s } = ethUtil.fromRpcSig(signature);
                const senderPubKey = ethUtil.ecrecover(Buffer.from(operationHash, 'hex'), v, r, s);
                const senderAddress = ethUtil.pubToAddress(senderPubKey);
                const senderKey = new src_1.KeyPair({ prv: testData.PRIVATE_KEY_1 });
                ethUtil.bufferToHex(senderAddress).should.equal(senderKey.getAddress());
            });
            it('a send token transactions from serialized', async () => {
                txBuilder.from(testData.SEND_TOKEN_TX_BROADCAST);
                const tx = await txBuilder.build();
                const operationHash = getOperationHash(tx);
                should_1.default.equal(tx.toBroadcastFormat(), testData.SEND_TOKEN_TX_BROADCAST);
                const { signature } = (0, src_1.decodeTransferData)(tx.toJson().data);
                const { v, r, s } = ethUtil.fromRpcSig(signature);
                const senderPubKey = ethUtil.ecrecover(Buffer.from(operationHash || ''), v, r, s);
                const senderAddress = ethUtil.pubToAddress(senderPubKey);
                const senderKey = new src_1.KeyPair({ prv: testData.PRIVATE_KEY_1 });
                ethUtil.bufferToHex(senderAddress).should.equal(senderKey.getAddress());
            });
        });
    });
}
exports.runSendTests = runSendTests;
async function testSendFundsTransaction(tx, operationHash, txParams, testData) {
    const { recipient, amount, contractAddress, expireTime, sequenceId } = txParams;
    should_1.default.equal(tx.toJson().chainId, testData.TXDATA.chainId);
    should_1.default.equal(tx.toBroadcastFormat(), testData.SEND_TX_BROADCAST_LEGACY);
    should_1.default.equal(tx.signature.length, 2);
    should_1.default.equal(tx.inputs.length, 1);
    should_1.default.equal(tx.inputs[0].address, contractAddress);
    should_1.default.equal(tx.inputs[0].value, amount);
    should_1.default.equal(tx.outputs.length, 1);
    should_1.default.equal(tx.outputs[0].address, recipient);
    should_1.default.equal(tx.outputs[0].value, amount);
    const data = tx.toJson().data;
    const { to, amount: parsedAmount, expireTime: parsedExpireTime, sequenceId: parsedSequenceId, signature, } = (0, src_1.decodeTransferData)(data);
    should_1.default.equal(to, recipient);
    should_1.default.equal(parsedAmount, amount);
    should_1.default.equal(parsedExpireTime, expireTime);
    should_1.default.equal(parsedSequenceId, sequenceId);
    const { v, r, s } = ethUtil.fromRpcSig(signature);
    const senderPubKey = ethUtil.ecrecover(Buffer.from(ethUtil.stripHexPrefix(operationHash), 'hex'), v, r, s);
    const senderAddress = ethUtil.pubToAddress(senderPubKey);
    const senderKey = new src_1.KeyPair({ prv: testData.PRIVATE_KEY_1 });
    ethUtil.bufferToHex(senderAddress).should.equal(senderKey.getAddress());
}
exports.testSendFundsTransaction = testSendFundsTransaction;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultExpireTime = exports.recoveryBlockchainExplorerQuery = exports.decodeForwarderCreationData = exports.getCreateForwarderParamsAndTypes = exports.getAddressInitDataAllForwarderVersions = exports.getV1AddressInitializationData = exports.getV1WalletInitializationData = exports.getToken = exports.getBufferedByteCode = exports.getRawDecoded = exports.hasSignature = exports.toStringSig = exports.getProxyInitcode = exports.calculateForwarderV1Address = exports.calculateForwarderAddress = exports.hexStringToNumber = exports.numberToHexString = exports.classifyTransaction = exports.decodeFlushTokensData = exports.decodeNativeTransferData = exports.decodeERC1155TransferData = exports.decodeERC721TransferData = exports.decodeTokenTransferData = exports.decodeTransferData = exports.decodeWalletCreationData = exports.isValidAmount = exports.isValidEthAddress = exports.getAddressInitializationData = exports.flushCoinsData = exports.flushTokensData = exports.sendMultiSigTokenData = exports.sendMultiSigData = exports.sign = exports.signInternal = exports.getCommon = void 0;
const buffer_1 = require("buffer");
const superagent_1 = __importDefault(require("superagent"));
const assert_1 = __importDefault(require("assert"));
const ethereumjs_util_1 = require("ethereumjs-util");
const statics_1 = require("@bitgo/statics");
const ethereumjs_abi_1 = __importDefault(require("ethereumjs-abi"));
const common_1 = __importDefault(require("@ethereumjs/common"));
const bn_js_1 = __importDefault(require("bn.js"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const sdk_core_1 = require("@bitgo/sdk-core");
const walletUtil_1 = require("./walletUtil");
const types_1 = require("./types");
/**
 * @param network
 */
function getCommon(network) {
    return common_1.default.forCustomChain(
    // use the mainnet config as a base, override chain ids and network name
    'mainnet', {
        name: network.type,
        networkId: network.chainId,
        chainId: network.chainId,
    }, 'london');
}
exports.getCommon = getCommon;
/**
 * Signs the transaction using the appropriate algorithm
 * and the provided common for the blockchain
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @param {EthereumCommon} customCommon the network's custom common
 * @returns {string} the transaction signed and encoded
 */
async function signInternal(transactionData, keyPair, customCommon) {
    if (!keyPair.getKeys().prv) {
        throw new sdk_core_1.SigningError('Missing private key');
    }
    const ethTx = types_1.EthTransactionData.fromJson(transactionData, customCommon);
    ethTx.sign(keyPair);
    return ethTx.toSerialized();
}
exports.signInternal = signInternal;
/**
 * Signs the transaction using the appropriate algorithm
 *
 * @param {TxData} transactionData the transaction data to sign
 * @param {KeyPair} keyPair the signer's keypair
 * @returns {string} the transaction signed and encoded
 */
async function sign(transactionData, keyPair) {
    return signInternal(transactionData, keyPair, getCommon(statics_1.coins.get('teth').network));
}
exports.sign = sign;
/**
 * Returns the contract method encoded data
 *
 * @param {string} to destination address
 * @param {number} value Amount to tranfer
 * @param {string} data aditional method call data
 * @param {number} expireTime expiration time for the transaction in seconds
 * @param {number} sequenceId sequence id
 * @param {string} signature signature of the call
 * @returns {string} -- the contract method encoded data
 */
function sendMultiSigData(to, value, data, expireTime, sequenceId, signature) {
    const params = [to, value, (0, ethereumjs_util_1.toBuffer)(data), expireTime, sequenceId, (0, ethereumjs_util_1.toBuffer)(signature)];
    const method = ethereumjs_abi_1.default.methodID('sendMultiSig', walletUtil_1.sendMultiSigTypes);
    const args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.sendMultiSigTypes, params);
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.sendMultiSigData = sendMultiSigData;
/**
 * Returns the contract method encoded data
 *
 * @param {string} to destination address
 * @param {number} value Amount to tranfer
 * @param {string} tokenContractAddress the address of the erc20 token contract
 * @param {number} expireTime expiration time for the transaction in seconds
 * @param {number} sequenceId sequence id
 * @param {string} signature signature of the call
 * @returns {string} -- the contract method encoded data
 */
function sendMultiSigTokenData(to, value, tokenContractAddress, expireTime, sequenceId, signature) {
    const params = [to, value, tokenContractAddress, expireTime, sequenceId, (0, ethereumjs_util_1.toBuffer)(signature)];
    const method = ethereumjs_abi_1.default.methodID('sendMultiSigToken', walletUtil_1.sendMultiSigTokenTypes);
    const args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.sendMultiSigTokenTypes, params);
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.sendMultiSigTokenData = sendMultiSigTokenData;
/**
 * Get the data required to make a flush tokens contract call
 *
 * @param forwarderAddress The forwarder address to flush
 * @param tokenAddress The token address to flush from
 */
function flushTokensData(forwarderAddress, tokenAddress, forwarderVersion) {
    let params;
    let method;
    let args;
    if (forwarderVersion >= 4) {
        params = [tokenAddress];
        method = ethereumjs_abi_1.default.methodID('flushTokens', walletUtil_1.flushTokensTypesv4);
        args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.flushTokensTypesv4, params);
    }
    else {
        params = [forwarderAddress, tokenAddress];
        method = ethereumjs_abi_1.default.methodID('flushForwarderTokens', walletUtil_1.flushTokensTypes);
        args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.flushTokensTypes, params);
    }
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.flushTokensData = flushTokensData;
/**
 * Get the data required to make a flush native coins contract call
 */
function flushCoinsData() {
    const params = [];
    const method = ethereumjs_abi_1.default.methodID('flush', walletUtil_1.flushCoinsTypes);
    const args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.flushCoinsTypes, params);
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.flushCoinsData = flushCoinsData;
/**
 * Returns the create forwarder method calling data
 *
 * @returns {string} - the createForwarder method encoded
 */
function getAddressInitializationData() {
    return walletUtil_1.createForwarderMethodId;
}
exports.getAddressInitializationData = getAddressInitializationData;
/**
 * Returns whether or not the string is a valid Eth address
 *
 * @param {string} address - the tx hash to validate
 * @returns {boolean} - the validation result
 */
function isValidEthAddress(address) {
    return (0, ethereumjs_util_1.isValidAddress)(address);
}
exports.isValidEthAddress = isValidEthAddress;
/**
 * Returns whether or not the string is a valid amount number
 *
 * @param {string} amount - the string to validate
 * @returns {boolean} - the validation result
 */
function isValidAmount(amount) {
    const bigNumberAmount = new bignumber_js_1.default(amount);
    return bigNumberAmount.isInteger() && bigNumberAmount.isGreaterThanOrEqualTo(0);
}
exports.isValidAmount = isValidAmount;
/**
 * Returns the smart contract encoded data
 *
 * @param {string} data The wallet creation data to decode
 * @returns {string[]} - The list of signer addresses
 */
function decodeWalletCreationData(data) {
    if (!(data.startsWith(walletUtil_1.walletInitializationFirstBytes) || data.startsWith(walletUtil_1.v1CreateWalletMethodId))) {
        throw new sdk_core_1.BuildTransactionError(`Invalid wallet bytecode: ${data}`);
    }
    if (data.startsWith(walletUtil_1.walletInitializationFirstBytes)) {
        const dataBuffer = buffer_1.Buffer.from(data.slice(2), 'hex');
        // the last 160 bytes contain the serialized address array
        const serializedSigners = dataBuffer.slice(-160);
        const resultEncodedParameters = ethereumjs_abi_1.default.rawDecode(walletUtil_1.walletSimpleConstructor, serializedSigners);
        if (resultEncodedParameters.length !== 1) {
            throw new sdk_core_1.BuildTransactionError(`Could not decode wallet constructor bytecode: ${resultEncodedParameters}`);
        }
        const addresses = resultEncodedParameters[0];
        if (addresses.length !== 3) {
            throw new sdk_core_1.BuildTransactionError(`invalid number of addresses in parsed constructor: ${addresses}`);
        }
        // sometimes ethereumjs-abi removes 0 padding at the start of addresses,
        // so we should pad until they are the standard 20 bytes
        const paddedAddresses = addresses.map((address) => (0, ethereumjs_util_1.stripHexPrefix)(address.toString('hex')).padStart(40, '0'));
        return { owners: paddedAddresses.map((address) => (0, ethereumjs_util_1.addHexPrefix)(address)) };
    }
    else {
        const decodedDataForWalletCreation = getRawDecoded(walletUtil_1.createV1WalletTypes, getBufferedByteCode(walletUtil_1.v1CreateWalletMethodId, data));
        const addresses = decodedDataForWalletCreation[0];
        const saltBuffer = decodedDataForWalletCreation[1];
        const salt = (0, ethereumjs_util_1.bufferToHex)(saltBuffer);
        const paddedAddresses = addresses.map((address) => (0, ethereumjs_util_1.stripHexPrefix)(address.toString()).padStart(40, '0'));
        const owners = paddedAddresses.map((address) => (0, ethereumjs_util_1.addHexPrefix)(address));
        return {
            owners,
            salt,
        };
    }
}
exports.decodeWalletCreationData = decodeWalletCreationData;
/**
 * Decode the given ABI-encoded transfer data and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeTransferData(data) {
    if (data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        return decodeNativeTransferData(data);
    }
    else if (data.startsWith(walletUtil_1.sendMultisigTokenMethodId)) {
        return decodeTokenTransferData(data);
    }
    else {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
}
exports.decodeTransferData = decodeTransferData;
/**
 * Decode the given ABI-encoded transfer data for the sendMultisigToken function and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed token transfer data
 */
function decodeTokenTransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigTokenMethodId)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    const [to, amount, tokenContractAddress, expireTime, sequenceId, signature] = getRawDecoded(walletUtil_1.sendMultiSigTokenTypes, getBufferedByteCode(walletUtil_1.sendMultisigTokenMethodId, data));
    return {
        to: (0, ethereumjs_util_1.addHexPrefix)(to),
        amount: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(amount)).toFixed(),
        expireTime: (0, ethereumjs_util_1.bufferToInt)(expireTime),
        sequenceId: (0, ethereumjs_util_1.bufferToInt)(sequenceId),
        signature: (0, ethereumjs_util_1.bufferToHex)(signature),
        tokenContractAddress: (0, ethereumjs_util_1.addHexPrefix)(tokenContractAddress),
    };
}
exports.decodeTokenTransferData = decodeTokenTransferData;
function decodeERC721TransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    const [to, amount, internalData, expireTime, sequenceId, signature] = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data));
    const internalDataHex = (0, ethereumjs_util_1.bufferToHex)(internalData);
    if (!internalDataHex.startsWith(walletUtil_1.ERC721SafeTransferTypeMethodId)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    const [from, receiver, tokenId, userSentData] = getRawDecoded(walletUtil_1.ERC721SafeTransferTypes, getBufferedByteCode(walletUtil_1.ERC721SafeTransferTypeMethodId, internalDataHex));
    return {
        to: (0, ethereumjs_util_1.addHexPrefix)(receiver),
        from: (0, ethereumjs_util_1.addHexPrefix)(from),
        expireTime: (0, ethereumjs_util_1.bufferToInt)(expireTime),
        amount: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(amount)).toFixed(),
        tokenId: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(tokenId)).toFixed(),
        sequenceId: (0, ethereumjs_util_1.bufferToInt)(sequenceId),
        signature: (0, ethereumjs_util_1.bufferToHex)(signature),
        tokenContractAddress: (0, ethereumjs_util_1.addHexPrefix)(to),
        userData: (0, ethereumjs_util_1.bufferToHex)(userSentData),
    };
}
exports.decodeERC721TransferData = decodeERC721TransferData;
function decodeERC1155TransferData(data) {
    let from, receiver, userSentData;
    let tokenIds;
    let values;
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    const [to, amount, internalData, expireTime, sequenceId, signature] = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data));
    const internalDataHex = (0, ethereumjs_util_1.bufferToHex)(internalData);
    if (internalDataHex.startsWith(walletUtil_1.ERC1155SafeTransferTypeMethodId)) {
        let tokenId;
        let value;
        [from, receiver, tokenId, value, userSentData] = getRawDecoded(walletUtil_1.ERC1155SafeTransferTypes, getBufferedByteCode(walletUtil_1.ERC1155SafeTransferTypeMethodId, internalDataHex));
        tokenIds = [new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(tokenId)).toFixed()];
        values = [new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(value)).toFixed()];
    }
    else if ((0, ethereumjs_util_1.bufferToHex)(internalData).startsWith(walletUtil_1.ERC1155BatchTransferTypeMethodId)) {
        let tempTokenIds, tempValues;
        [from, receiver, tempTokenIds, tempValues, userSentData] = getRawDecoded(walletUtil_1.ERC1155BatchTransferTypes, getBufferedByteCode(walletUtil_1.ERC1155BatchTransferTypeMethodId, internalDataHex));
        tokenIds = tempTokenIds.map((x) => new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(x)).toFixed());
        values = tempValues.map((x) => new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(x)).toFixed());
    }
    else {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    return {
        to: (0, ethereumjs_util_1.addHexPrefix)(receiver),
        from: (0, ethereumjs_util_1.addHexPrefix)(from),
        expireTime: (0, ethereumjs_util_1.bufferToInt)(expireTime),
        amount: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(amount)).toFixed(),
        tokenIds,
        values,
        sequenceId: (0, ethereumjs_util_1.bufferToInt)(sequenceId),
        signature: (0, ethereumjs_util_1.bufferToHex)(signature),
        tokenContractAddress: (0, ethereumjs_util_1.addHexPrefix)(to),
        userData: userSentData,
    };
}
exports.decodeERC1155TransferData = decodeERC1155TransferData;
/**
 * Decode the given ABI-encoded transfer data for the sendMultisig function and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeNativeTransferData(data) {
    if (!data.startsWith(walletUtil_1.sendMultisigMethodId)) {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
    const [to, amount, internalData, expireTime, sequenceId, signature] = getRawDecoded(walletUtil_1.sendMultiSigTypes, getBufferedByteCode(walletUtil_1.sendMultisigMethodId, data));
    return {
        to: (0, ethereumjs_util_1.addHexPrefix)(to),
        amount: new bignumber_js_1.default((0, ethereumjs_util_1.bufferToHex)(amount)).toFixed(),
        expireTime: (0, ethereumjs_util_1.bufferToInt)(expireTime),
        sequenceId: (0, ethereumjs_util_1.bufferToInt)(sequenceId),
        signature: (0, ethereumjs_util_1.bufferToHex)(signature),
        data: (0, ethereumjs_util_1.bufferToHex)(internalData),
    };
}
exports.decodeNativeTransferData = decodeNativeTransferData;
/**
 * Decode the given ABI-encoded flush tokens data and return parsed fields
 *
 * @param data The data to decode
 * @param to Optional to parameter of tx
 * @returns parsed transfer data
 */
function decodeFlushTokensData(data, to) {
    if (data.startsWith(walletUtil_1.flushForwarderTokensMethodId)) {
        const [forwarderAddress, tokenAddress] = getRawDecoded(walletUtil_1.flushTokensTypes, getBufferedByteCode(walletUtil_1.flushForwarderTokensMethodId, data));
        return {
            forwarderAddress: (0, ethereumjs_util_1.addHexPrefix)(forwarderAddress),
            tokenAddress: (0, ethereumjs_util_1.addHexPrefix)(tokenAddress),
        };
    }
    else if (data.startsWith(walletUtil_1.flushForwarderTokensMethodIdV4)) {
        const [tokenAddress] = getRawDecoded(walletUtil_1.flushTokensTypesv4, getBufferedByteCode(walletUtil_1.flushForwarderTokensMethodIdV4, data));
        if (!to) {
            throw new sdk_core_1.BuildTransactionError(`Missing to address: ${to}`);
        }
        return {
            forwarderAddress: to,
            tokenAddress: (0, ethereumjs_util_1.addHexPrefix)(tokenAddress),
            forwarderVersion: 4,
        };
    }
    else {
        throw new sdk_core_1.BuildTransactionError(`Invalid transfer bytecode: ${data}`);
    }
}
exports.decodeFlushTokensData = decodeFlushTokensData;
/**
 * Classify the given transaction data based as a transaction type.
 * ETH transactions are defined by the first 8 bytes of the transaction data, also known as the method id
 *
 * @param {string} data The data to classify the transaction with
 * @returns {TransactionType} The classified transaction type
 */
function classifyTransaction(data) {
    if (data.length < 10) {
        // contract calls must have at least 4 bytes (method id) and '0x'
        // if it doesn't have enough data to be a contract call it must be a single sig send
        return sdk_core_1.TransactionType.SingleSigSend;
    }
    // TODO(STLX-1970): validate if we are going to constraint to some methods allowed
    let transactionType = transactionTypesMap[data.slice(0, 10).toLowerCase()];
    if (transactionType === undefined) {
        transactionType = sdk_core_1.TransactionType.ContractCall;
    }
    return transactionType;
}
exports.classifyTransaction = classifyTransaction;
/**
 * A transaction types map according to the starting part of the encoded data
 */
const transactionTypesMap = {
    [walletUtil_1.walletInitializationFirstBytes]: sdk_core_1.TransactionType.WalletInitialization,
    [walletUtil_1.recoveryWalletInitializationFirstBytes]: sdk_core_1.TransactionType.RecoveryWalletDeployment,
    [walletUtil_1.v1CreateWalletMethodId]: sdk_core_1.TransactionType.WalletInitialization,
    [walletUtil_1.createForwarderMethodId]: sdk_core_1.TransactionType.AddressInitialization,
    [walletUtil_1.v1CreateForwarderMethodId]: sdk_core_1.TransactionType.AddressInitialization,
    [walletUtil_1.v4CreateForwarderMethodId]: sdk_core_1.TransactionType.AddressInitialization,
    [walletUtil_1.sendMultisigMethodId]: sdk_core_1.TransactionType.Send,
    [walletUtil_1.flushForwarderTokensMethodId]: sdk_core_1.TransactionType.FlushTokens,
    [walletUtil_1.flushForwarderTokensMethodIdV4]: sdk_core_1.TransactionType.FlushTokens,
    [walletUtil_1.flushCoinsMethodId]: sdk_core_1.TransactionType.FlushCoins,
    [walletUtil_1.sendMultisigTokenMethodId]: sdk_core_1.TransactionType.Send,
    [sdk_core_1.LockMethodId]: sdk_core_1.TransactionType.StakingLock,
    [sdk_core_1.VoteMethodId]: sdk_core_1.TransactionType.StakingVote,
    [sdk_core_1.ActivateMethodId]: sdk_core_1.TransactionType.StakingActivate,
    [sdk_core_1.UnvoteMethodId]: sdk_core_1.TransactionType.StakingUnvote,
    [sdk_core_1.UnlockMethodId]: sdk_core_1.TransactionType.StakingUnlock,
    [sdk_core_1.WithdrawMethodId]: sdk_core_1.TransactionType.StakingWithdraw,
};
/**
 *
 * @param {number} num number to be converted to hex
 * @returns {string} the hex number
 */
function numberToHexString(num) {
    const hex = num.toString(16);
    return hex.length % 2 === 0 ? '0x' + hex : '0x0' + hex;
}
exports.numberToHexString = numberToHexString;
/**
 *
 * @param {string} hex The hex string to be converted
 * @returns {number} the resulting number
 */
function hexStringToNumber(hex) {
    return parseInt(hex.slice(2), 16);
}
exports.hexStringToNumber = hexStringToNumber;
/**
 * Generates an address of the forwarder address to be deployed
 *
 * @param {string} contractAddress the address which is creating this new address
 * @param {number} contractCounter the nonce of the contract address
 * @returns {string} the calculated forwarder contract address
 */
function calculateForwarderAddress(contractAddress, contractCounter) {
    const forwarderAddress = (0, ethereumjs_util_1.generateAddress)(buffer_1.Buffer.from((0, ethereumjs_util_1.stripHexPrefix)(contractAddress), 'hex'), buffer_1.Buffer.from((0, ethereumjs_util_1.padToEven)((0, ethereumjs_util_1.stripHexPrefix)(numberToHexString(contractCounter))), 'hex'));
    return (0, ethereumjs_util_1.addHexPrefix)(forwarderAddress.toString('hex'));
}
exports.calculateForwarderAddress = calculateForwarderAddress;
/**
 * Calculate the forwarder v1 address that will be generated if `creatorAddress` creates it with salt `salt`
 * and initcode `inicode using the create2 opcode
 * @param {string} creatorAddress The address that is sending the tx to create a new address, hex string
 * @param {string} salt The salt to create the address with using create2, hex string
 * @param {string} initcode The initcode that will be deployed to the address, hex string
 * @return {string} The calculated address
 */
function calculateForwarderV1Address(creatorAddress, salt, initcode) {
    const forwarderV1Address = (0, ethereumjs_util_1.generateAddress2)(buffer_1.Buffer.from((0, ethereumjs_util_1.stripHexPrefix)(creatorAddress), 'hex'), buffer_1.Buffer.from((0, ethereumjs_util_1.stripHexPrefix)(salt), 'hex'), buffer_1.Buffer.from((0, ethereumjs_util_1.padToEven)((0, ethereumjs_util_1.stripHexPrefix)(initcode)), 'hex'));
    return (0, ethereumjs_util_1.addHexPrefix)(forwarderV1Address.toString('hex'));
}
exports.calculateForwarderV1Address = calculateForwarderV1Address;
/**
 * Take the implementation address for the proxy contract, and get the binary initcode for the associated proxy
 * @param {string} implementationAddress The address of the implementation contract for the proxy
 * @return {string} Binary hex string of the proxy
 */
function getProxyInitcode(implementationAddress) {
    const target = (0, ethereumjs_util_1.stripHexPrefix)(implementationAddress.toLowerCase()).padStart(40, '0');
    // bytecode of the proxy, from:
    // https://github.com/BitGo/eth-multisig-v4/blob/d546a937f90f93e83b3423a5bf933d1d77c677c3/contracts/CloneFactory.sol#L42-L56
    return `0x3d602d80600a3d3981f3363d3d373d3d3d363d73${target}5af43d82803e903d91602b57fd5bf3`;
}
exports.getProxyInitcode = getProxyInitcode;
/**
 * Convert the given signature parts to a string representation
 *
 * @param {SignatureParts} sig The signature to convert to string
 * @returns {string} String representation of the signature
 */
function toStringSig(sig) {
    return (0, ethereumjs_util_1.bufferToHex)(buffer_1.Buffer.concat([
        (0, ethereumjs_util_1.setLengthLeft)(buffer_1.Buffer.from((0, ethereumjs_util_1.stripHexPrefix)(sig.r), 'hex'), 32),
        (0, ethereumjs_util_1.setLengthLeft)(buffer_1.Buffer.from((0, ethereumjs_util_1.stripHexPrefix)(sig.s), 'hex'), 32),
        (0, ethereumjs_util_1.toBuffer)(sig.v),
    ]));
}
exports.toStringSig = toStringSig;
/**
 * Return whether or not the given tx data has a signature
 *
 * @param {TxData} txData The transaction data to check for signature
 * @returns {boolean} true if the tx has a signature, else false
 */
function hasSignature(txData) {
    return (txData.v !== undefined &&
        txData.r !== undefined &&
        txData.s !== undefined &&
        txData.v.length > 0 &&
        txData.r.length > 0 &&
        txData.s.length > 0);
}
exports.hasSignature = hasSignature;
/**
 * Get the raw data decoded for some types
 *
 * @param {string[]} types ABI types definition
 * @param {Buffer} serializedArgs encoded args
 * @returns {Buffer[]} the decoded raw
 */
function getRawDecoded(types, serializedArgs) {
    function normalize(v, i) {
        if (bn_js_1.default.isBN(v)) {
            return v;
        }
        else if (typeof v === 'string' || buffer_1.Buffer.isBuffer(v)) {
            return v;
        }
        else if (Array.isArray(v)) {
            return v.map(normalize);
        }
        else {
            throw new Error(`For ${types}[${i}] got ${typeof v}`);
        }
    }
    return ethereumjs_abi_1.default.rawDecode(types, serializedArgs).map(normalize);
}
exports.getRawDecoded = getRawDecoded;
/**
 * Get the buffered bytecode from rawData using a methodId as delimiter
 *
 * @param {string} methodId the hex encoded method Id
 * @param {string} rawData the hex encoded raw data
 * @returns {Buffer} data buffered bytecode
 */
function getBufferedByteCode(methodId, rawData) {
    const splitBytecode = rawData.split(methodId);
    if (splitBytecode.length !== 2) {
        throw new sdk_core_1.BuildTransactionError(`Invalid send bytecode: ${rawData}`);
    }
    if (splitBytecode[1].length % 2 !== 0) {
        throw new sdk_core_1.BuildTransactionError(`Invalid send bytecode: ${rawData} (wrong lenght)`);
    }
    return buffer_1.Buffer.from(splitBytecode[1], 'hex');
}
exports.getBufferedByteCode = getBufferedByteCode;
/**
 * Get the statics coin object matching a given contract address if it exists
 *
 * @param tokenContractAddress The contract address to match against
 * @param network - the coin network
 * @param family - the coin family
 * @returns statics BaseCoin object for the matching token
 */
function getToken(tokenContractAddress, network, family) {
    // filter the coins array to find the token with the matching contract address, network and coin family
    // coin family is needed to avoid causing issues when a token has same contract address on two different chains
    const tokens = statics_1.coins.filter((coin) => {
        if (coin instanceof statics_1.ContractAddressDefinedToken) {
            return (coin.network.type === network.type &&
                coin.family === family &&
                coin.contractAddress.toLowerCase() === tokenContractAddress.toLowerCase());
        }
        return false;
    });
    // if length of tokens is 1, return the first, else return undefined
    // Can't directly index into tokens, or call `length`, so we use map to get an array
    const tokensArray = tokens.map((token) => token);
    if (tokensArray.length >= 1) {
        // there should never be two tokens with the same contract address, so we assert that here
        (0, assert_1.default)(tokensArray.length === 1);
        return tokensArray[0];
    }
    return undefined;
}
exports.getToken = getToken;
/**
 * Returns the create wallet method calling data for v1 wallets
 *
 * @param {string[]} walletOwners - wallet owner addresses for wallet initialization transactions
 * @param {string} salt - The salt for wallet initialization transactions
 * @returns {string} - the createWallet method encoded
 */
function getV1WalletInitializationData(walletOwners, salt) {
    const saltBuffer = (0, ethereumjs_util_1.setLengthLeft)((0, ethereumjs_util_1.toBuffer)(salt), 32);
    const params = [walletOwners, saltBuffer];
    const method = ethereumjs_abi_1.default.methodID('createWallet', walletUtil_1.createV1WalletTypes);
    const args = ethereumjs_abi_1.default.rawEncode(walletUtil_1.createV1WalletTypes, params);
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.getV1WalletInitializationData = getV1WalletInitializationData;
/**
 * Returns the create address method calling data for v1, v2, v4 forwarders
 *
 * @param {string} baseAddress - The address of the wallet contract
 * @param {string} salt - The salt for address initialization transactions
 * @param {string} feeAddress - The fee address for the enterprise
 * @returns {string} - the createForwarder method encoded
 */
function getV1AddressInitializationData(baseAddress, salt, feeAddress) {
    const saltBuffer = (0, ethereumjs_util_1.setLengthLeft)((0, ethereumjs_util_1.toBuffer)(salt), 32);
    const { createForwarderParams, createForwarderTypes } = getCreateForwarderParamsAndTypes(baseAddress, saltBuffer, feeAddress);
    const method = ethereumjs_abi_1.default.methodID('createForwarder', createForwarderTypes);
    const args = ethereumjs_abi_1.default.rawEncode(createForwarderTypes, createForwarderParams);
    return (0, ethereumjs_util_1.addHexPrefix)(buffer_1.Buffer.concat([method, args]).toString('hex'));
}
exports.getV1AddressInitializationData = getV1AddressInitializationData;
/**
 * Returns the create address method calling data for all forwarder versions
 *
 * @param {number} forwarderVersion - The version of the forwarder to create
 * @param {string} baseAddress - The address of the wallet contract
 * @param {string} salt - The salt for address initialization transactions
 * @param {string} feeAddress - The fee address for the enterprise
 * @returns {string} - the createForwarder method encoded
 *
 */
function getAddressInitDataAllForwarderVersions(forwarderVersion, baseAddress, salt, feeAddress) {
    if (forwarderVersion === walletUtil_1.defaultForwarderVersion) {
        return getAddressInitializationData();
    }
    else {
        return getV1AddressInitializationData(baseAddress, salt, feeAddress);
    }
}
exports.getAddressInitDataAllForwarderVersions = getAddressInitDataAllForwarderVersions;
/**
 * Returns the createForwarderTypes and createForwarderParams for all forwarder versions
 *
 * @param {string} baseAddress - The address of the wallet contract
 * @param {Buffer} saltBuffer - The salt for address initialization transaction
 * @param {string} feeAddress - The fee address for the enterprise
 * @returns {createForwarderParams: (string | Buffer)[], createForwarderTypes: string[]}
 */
function getCreateForwarderParamsAndTypes(baseAddress, saltBuffer, feeAddress) {
    let createForwarderParams = [baseAddress, saltBuffer];
    let createForwarderTypes = walletUtil_1.createV1ForwarderTypes;
    if (feeAddress) {
        createForwarderParams = [baseAddress, feeAddress, saltBuffer];
        createForwarderTypes = walletUtil_1.createV4ForwarderTypes;
    }
    return { createForwarderParams, createForwarderTypes };
}
exports.getCreateForwarderParamsAndTypes = getCreateForwarderParamsAndTypes;
/**
 * Decode the given ABI-encoded create forwarder data and return parsed fields
 *
 * @param data The data to decode
 * @returns parsed transfer data
 */
function decodeForwarderCreationData(data) {
    if (!(data.startsWith(walletUtil_1.v4CreateForwarderMethodId) ||
        data.startsWith(walletUtil_1.v1CreateForwarderMethodId) ||
        data.startsWith(walletUtil_1.createForwarderMethodId))) {
        throw new sdk_core_1.BuildTransactionError(`Invalid address bytecode: ${data}`);
    }
    if (data.startsWith(walletUtil_1.createForwarderMethodId)) {
        return {
            baseAddress: undefined,
            addressCreationSalt: undefined,
            feeAddress: undefined,
        };
    }
    else if (data.startsWith(walletUtil_1.v1CreateForwarderMethodId)) {
        const [baseAddress, saltBuffer] = getRawDecoded(walletUtil_1.createV1ForwarderTypes, getBufferedByteCode(walletUtil_1.v1CreateForwarderMethodId, data));
        return {
            baseAddress: (0, ethereumjs_util_1.addHexPrefix)(baseAddress),
            addressCreationSalt: (0, ethereumjs_util_1.bufferToHex)(saltBuffer),
            feeAddress: undefined,
        };
    }
    else {
        const [baseAddress, feeAddress, saltBuffer] = getRawDecoded(walletUtil_1.createV4ForwarderTypes, getBufferedByteCode(walletUtil_1.v4CreateForwarderMethodId, data));
        return {
            baseAddress: (0, ethereumjs_util_1.addHexPrefix)(baseAddress),
            addressCreationSalt: (0, ethereumjs_util_1.bufferToHex)(saltBuffer),
            feeAddress: (0, ethereumjs_util_1.addHexPrefix)(feeAddress),
        };
    }
}
exports.decodeForwarderCreationData = decodeForwarderCreationData;
/**
 * Make a query to explorer for information such as balance, token balance, solidity calls
 * @param {Object} query key-value pairs of parameters to append after /api
 * @param {string} token the API token to use for the request
 * @param {string} explorerUrl the URL of the explorer
 * @returns {Promise<Object>} response from explorer
 */
async function recoveryBlockchainExplorerQuery(query, explorerUrl, token) {
    if (token) {
        query.apikey = token;
    }
    const response = await superagent_1.default.get(`${explorerUrl}/api`).query(query);
    if (!response.ok) {
        throw new Error('could not reach explorer');
    }
    if (response.body.status === '0' && response.body.message === 'NOTOK') {
        throw new Error('Explorer rate limit reached');
    }
    return response.body;
}
exports.recoveryBlockchainExplorerQuery = recoveryBlockchainExplorerQuery;
/**
 * Default expire time for a contract call (1 week)
 * @returns {number} Time in seconds
 */
function getDefaultExpireTime() {
    return Math.floor(new Date().getTime() / 1000) + 60 * 60 * 24 * 7;
}
exports.getDefaultExpireTime = getDefaultExpireTime;
//# sourceMappingURL=data:application/json;base64,
import * as t from "io-ts";
import { NonEmptyString } from "io-ts-types";

import { KeyCreationMPCv2State } from "./keygenState";
import { WalletType } from "./walletType";
import { AuthBroadcastMessage } from "./messages/broadcast";
import { AuthEncP2PMessage } from "./messages/p2p";

export enum OVCIndexEnum {
  ONE = 1,
  TWO = 2,
}

const BaseRoundPayload = t.type({
  state: KeyCreationMPCv2State,
  tssVersion: NonEmptyString,
  walletType: WalletType,
  coin: NonEmptyString,
});

type BaseRoundPayload = t.TypeOf<typeof BaseRoundPayload>;

export const OVC1ToOVC2Round1Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
      }),
    }),
  }),
]);

export type OVC1ToOVC2Round1Payload = t.TypeOf<typeof OVC1ToOVC2Round1Payload>;

export const OVC2ToBitgoRound1Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
      }),
    }),
  }),
]);

export type OVC2ToBitgoRound1Payload = t.TypeOf<
  typeof OVC2ToBitgoRound1Payload
>;

export const PlatformRound1Payload = t.type({
  walletGpgPubKeySigs: NonEmptyString,
  sessionId: NonEmptyString,
  bitgoMsg1: AuthBroadcastMessage,
  ovc: t.type({
    [OVCIndexEnum.ONE]: t.type({
      bitgoToOvcMsg2: AuthEncP2PMessage,
    }),
    [OVCIndexEnum.TWO]: t.type({
      bitgoToOvcMsg2: AuthEncP2PMessage,
    }),
  }),
});

export type PlatformRound1Payload = t.TypeOf<typeof PlatformRound1Payload>;

export const BitgoToOVC1Round1Response = t.intersection([
  OVC2ToBitgoRound1Payload,
  t.type({ platform: PlatformRound1Payload }),
]);

export type BitgoToOVC1Round1Response = t.TypeOf<
  typeof BitgoToOVC1Round1Response
>;

export const OVC1ToOVC2Round2Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
      }),
    }),
    platform: PlatformRound1Payload,
  }),
]);

export type OVC1ToOVC2Round2Payload = t.TypeOf<typeof OVC1ToOVC2Round2Payload>;

export const OVC2ToBitgoRound2Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
      }),
    }),
    platform: PlatformRound1Payload,
  }),
]);

export type OVC2ToBitgoRound2Payload = t.TypeOf<
  typeof OVC2ToBitgoRound2Payload
>;

export const PlatformRound2Payload = t.type({
  sessionId: NonEmptyString,
  bitgoMsg1: AuthBroadcastMessage,
  bitgoCommitment2: NonEmptyString,
  ovc: t.type({
    [OVCIndexEnum.ONE]: t.type({
      bitgoToOvcMsg2: AuthEncP2PMessage,
      bitgoToOvcMsg3: AuthEncP2PMessage,
    }),
    [OVCIndexEnum.TWO]: t.type({
      bitgoToOvcMsg2: AuthEncP2PMessage,
      bitgoToOvcMsg3: AuthEncP2PMessage,
    }),
  }),
});

export type PlatformRound2Payload = t.TypeOf<typeof PlatformRound2Payload>;

export const BitgoToOVC1Round2Response = t.intersection([
  OVC2ToBitgoRound2Payload,
  t.type({ platform: PlatformRound2Payload }),
]);

export type BitgoToOVC1Round2Response = t.TypeOf<
  typeof BitgoToOVC1Round2Response
>;

export const OVC1ToOVC2Round3Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
        ovcToBitgoMsg3: AuthEncP2PMessage,
        ovcToOvcMsg3: AuthEncP2PMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
      }),
    }),
    platform: PlatformRound2Payload,
  }),
]);

export type OVC1ToOVC2Round3Payload = t.TypeOf<typeof OVC1ToOVC2Round3Payload>;

export const OVC2ToOVC1Round3Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
        ovcToBitgoMsg3: AuthEncP2PMessage,
        ovcToOvcMsg3: AuthEncP2PMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
        ovcToBitgoMsg3: AuthEncP2PMessage,
        ovcToOvcMsg3: AuthEncP2PMessage,
        ovcMsg4: AuthBroadcastMessage,
      }),
    }),
    platform: PlatformRound2Payload,
  }),
]);

export type OVC2ToOVC1Round3Payload = t.TypeOf<typeof OVC2ToOVC1Round3Payload>;

export const OVC1ToBitgoRound3Payload = t.intersection([
  BaseRoundPayload,
  t.type({
    ovc: t.type({
      [OVCIndexEnum.ONE]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
        ovcToBitgoMsg3: AuthEncP2PMessage,
        ovcToOvcMsg3: AuthEncP2PMessage,
        ovcMsg4: AuthBroadcastMessage,
      }),
      [OVCIndexEnum.TWO]: t.type({
        gpgPubKey: NonEmptyString,
        ovcMsg1: AuthBroadcastMessage,
        ovcToBitgoMsg2: AuthEncP2PMessage,
        ovcToOvcMsg2: AuthEncP2PMessage,
        ovcToBitgoMsg3: AuthEncP2PMessage,
        ovcToOvcMsg3: AuthEncP2PMessage,
        ovcMsg4: AuthBroadcastMessage,
      }),
    }),
    platform: PlatformRound2Payload,
  }),
]);

export type OVC1ToBitgoRound3Payload = t.TypeOf<
  typeof OVC1ToBitgoRound3Payload
>;

export const PlatformRound3Payload = t.intersection([
  PlatformRound2Payload,
  t.type({
    commonKeychain: NonEmptyString,
    bitgoMsg4: AuthBroadcastMessage,
  }),
]);

export type PlatformRound3Payload = t.TypeOf<typeof PlatformRound3Payload>;

export const BitgoToOVC1Round3Response = t.intersection([
  t.type({ bitGoKeyId: NonEmptyString }),
  OVC1ToBitgoRound3Payload,
  t.type({ platform: PlatformRound3Payload }),
]);

export type BitgoToOVC1Round3Response = t.TypeOf<
  typeof BitgoToOVC1Round3Response
>;

import * as t from "io-ts";
import { DateFromISOString } from "io-ts-types";
import { TransactionRequestState } from "../transactionRequest/transactionRequestState";
import { TransactionState } from "../transactionRequest/transactionState";
import { WebhookState } from "./webhookState";
import { WebhookType } from "./webhookType";
import { WebhookScope } from "./webhookScope";

export const Webhook = t.intersection([
  t.type({
    /**
     * @example "59cd72485007a239fb00282ed480da1f"
     * @pattern ^[0-9a-f]{32}$
     */
    id: t.string,
    /**
     * @format date-time
     * @example "2021-01-01T00:00:00Z"
     */
    created: DateFromISOString,
    /**
     * A cryptocurrency or token ticker symbol.
     * @example btc
     */
    coin: t.string,
    /**
     * @format uri
     * @example "https://your.server.com/webhook"
     */
    url: t.string,
    /**
     * 2 for coins running on API v2.
     * @example 2
     */
    version: t.number,
    scope: WebhookScope,
    state: WebhookState,
    /**
     * @example 0
     */
    successiveFailedAttempts: t.number,
    /** Whether or not to listen to failed transactions on chain. */
    listenToFailureStates: t.boolean,
  }),
  t.partial({
    /** Label of the new webhook. */
    label: t.string,
    walletId: t.string,
    enterpriseId: t.string,
    /**
     * @example "59cd72485007a239fb00282ed480da1f"
     * @pattern ^[0-9a-f]{32}$
     */
    organizationId: t.string,
    userId: t.string,
    /**
     * Event type to listen to.
     */
    type: WebhookType,
    /**
     * @example 6
     */
    numConfirmations: t.number,
    /**
     * @format date-time
     * @example "2021-01-01T00:00:00Z"
     */
    lastAttempt: DateFromISOString,
    /**
     * @format date-time
     * @example "2021-01-01T00:00:00Z"
     */
    failingSince: DateFromISOString,
    allToken: t.boolean,
    /**
     * If present, only transaction request state changes from the list will trigger notifications.
     * If not present, all transaction request state changes will trigger notifications.
     */
    txRequestStates: t.array(TransactionRequestState),
    /**
     * If present, only transaction request transaction state changes from the list will trigger
     * notifications. If not present, all transaction request transaction state changes will
     * trigger notifications.
     */
    txRequestTransactionStates: t.array(TransactionState),
  }),
]);

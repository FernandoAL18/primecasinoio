import * as t from "io-ts";
import { DateFromISOString } from "io-ts-types";
import { WebhookType } from "./webhookType";

export const WebhookNotificationState = t.union([
  t.literal("unconfirmed"),
  t.literal("new"),
  t.literal("pending"),
  t.literal("processed"),
  t.literal("failed"),
]);

export type WebhookNotificationState = t.TypeOf<
  typeof WebhookNotificationState
>;

export const WebhookNotification = t.intersection([
  t.type({
    /**
     * @example "59cd72485007a239fb00282ed480da1f"
     * @pattern ^[0-9a-f]{32}$
     */
    id: t.string,
  }),
  t.partial({
    /**
     * Event type to listen to.
     */
    type: WebhookType,
    /**
     * @example cold
     */
    wallet: t.string,
    url: t.string,
    hash: t.string,
    /**
     * A cryptocurrency or token ticker symbol.
     * @example btc
     */
    coin: t.string,
    coinChain: t.string,
    /**
     * @example receive
     */
    transfer: t.string,
    /**
     * If "failed", webhook notification failed to connect with the target URL. If "new", webhook notification was newly generated, in response to an event. If "pending", webhook notification is awaiting processing by the webhook worker. If "processed", webhook notification successfully sent to target URL. If "unconfirmed", webhook notification is awaiting confirmation on the blockchain.
     *
     */
    state: WebhookNotificationState,
    simulation: t.boolean,
    retries: t.number,
    webhook: t.string,
    /**
     * @example "2021-01-01T00:00:00Z"
     */
    updatedAt: DateFromISOString,
    /**
     * @example "2021-01-01T00:00:00Z"
     */
    nextAttempt: DateFromISOString,
    /**
     * @example 2
     */
    version: t.number,
    allowBlockedHosts: t.boolean,
    heightToConfirm: t.number,
    payload: t.string,
    response: t.partial({
      code: t.union([t.number, t.string]),
      type: t.string,
      body: t.string,
      error: t.string,
    }),
  }),
]);

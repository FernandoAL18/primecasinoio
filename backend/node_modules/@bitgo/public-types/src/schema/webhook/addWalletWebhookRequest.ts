import * as t from "io-ts";
import { NonEmptyString, NumberFromString } from "io-ts-types";
import { Optional } from "../../utils/optional";
import { TransactionRequestState } from "../transactionRequest/transactionRequestState";
import { TransactionState } from "../transactionRequest/transactionState";
import { WalletWebhookType } from "./webhookType";

export const AddWalletWebhookRequestBody = {
  /** Event type to listen to. */
  type: WalletWebhookType,
  /**
   * URL to fire the webhook to.
   * @example "https://your.server.com/webhook"
   * @format uri
   */
  url: NonEmptyString,
  /** Label of the new webhook. */
  label: Optional(t.string),
  /**
   * Number of confirmations before triggering the webhook. If 0 or unspecified,
   * requests will be sent to the callback endpoint when the transfer is first
   * seen and when it is confirmed.
   * @example 6
   */
  numConfirmations: t.union([t.number, NumberFromString, t.undefined]),
  /**
   * Triggers on coin transfers and token transfers for ETH and Stellar.
   * @default false
   */
  allToken: Optional(t.boolean),
  /** Whether or not to listen to failed transactions on chain. */
  listenToFailureStates: Optional(t.boolean),
  txRequestStates: Optional(t.array(TransactionRequestState)),
  txRequestTransactionStates: Optional(t.array(TransactionState)),
};
export const AddWalletWebhookRequestBodyC = t.type({
  ...AddWalletWebhookRequestBody,
});

export type AddWalletWebhookRequestBody = t.TypeOf<
  typeof AddWalletWebhookRequestBodyC
>;

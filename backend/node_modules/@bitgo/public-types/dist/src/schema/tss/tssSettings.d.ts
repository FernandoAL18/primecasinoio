import * as t from "io-ts";
export declare const TssWalletCreationSettings: t.PartialC<{
    multiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
    custodialMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
    coldMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
}>;
export type TssWalletCreationSettings = t.TypeOf<typeof TssWalletCreationSettings>;
export declare const TssCoinSetting: t.IntersectionC<[t.TypeC<{
    walletCreationSettings: t.PartialC<{
        multiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
        custodialMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
        coldMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
    }>;
}>, t.PartialC<{
    canMigrateToMPCv2: t.BooleanC;
}>]>;
export type TssCoinSetting = t.TypeOf<typeof TssCoinSetting>;
export declare const TssSettings: t.TypeC<{
    coinSettings: t.RecordC<t.StringC, t.IntersectionC<[t.TypeC<{
        walletCreationSettings: t.PartialC<{
            multiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
            custodialMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
            coldMultiSigTypeVersion: t.KeyofC<typeof import("../wallet").MultisigTypeVersionEnum>;
        }>;
    }>, t.PartialC<{
        canMigrateToMPCv2: t.BooleanC;
    }>]>>;
}>;
export type TssSettings = t.TypeOf<typeof TssSettings>;

import * as t from "io-ts";
export declare const AuthEncP2PMessage: t.IntersectionC<[t.TypeC<{
    payload: t.TypeC<{
        encryptedMessage: import("io-ts-types").NonEmptyStringC;
        signature: import("io-ts-types").NonEmptyStringC;
    }>;
    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
}>, t.PartialC<{
    commitment: import("io-ts-types").NonEmptyStringC;
}>]>;
export type AuthEncP2PMessage = t.TypeOf<typeof AuthEncP2PMessage>;

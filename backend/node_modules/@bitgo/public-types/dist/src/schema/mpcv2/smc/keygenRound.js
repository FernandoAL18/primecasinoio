"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BitgoToOVC1Round3Response = exports.PlatformRound3Payload = exports.OVC1ToBitgoRound3Payload = exports.OVC2ToOVC1Round3Payload = exports.OVC1ToOVC2Round3Payload = exports.BitgoToOVC1Round2Response = exports.PlatformRound2Payload = exports.OVC2ToBitgoRound2Payload = exports.OVC1ToOVC2Round2Payload = exports.BitgoToOVC1Round1Response = exports.PlatformRound1Payload = exports.OVC2ToBitgoRound1Payload = exports.OVC1ToOVC2Round1Payload = exports.OVCIndexEnum = void 0;
const t = __importStar(require("io-ts"));
const io_ts_types_1 = require("io-ts-types");
const keygenState_1 = require("./keygenState");
const walletType_1 = require("./walletType");
const broadcast_1 = require("./messages/broadcast");
const p2p_1 = require("./messages/p2p");
var OVCIndexEnum;
(function (OVCIndexEnum) {
    OVCIndexEnum[OVCIndexEnum["ONE"] = 1] = "ONE";
    OVCIndexEnum[OVCIndexEnum["TWO"] = 2] = "TWO";
})(OVCIndexEnum || (exports.OVCIndexEnum = OVCIndexEnum = {}));
const BaseRoundPayload = t.type({
    state: keygenState_1.KeyCreationMPCv2State,
    tssVersion: io_ts_types_1.NonEmptyString,
    walletType: walletType_1.WalletType,
    coin: io_ts_types_1.NonEmptyString,
});
exports.OVC1ToOVC2Round1Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
            }),
        }),
    }),
]);
exports.OVC2ToBitgoRound1Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
            }),
        }),
    }),
]);
exports.PlatformRound1Payload = t.type({
    walletGpgPubKeySigs: io_ts_types_1.NonEmptyString,
    sessionId: io_ts_types_1.NonEmptyString,
    bitgoMsg1: broadcast_1.AuthBroadcastMessage,
    ovc: t.type({
        [OVCIndexEnum.ONE]: t.type({
            bitgoToOvcMsg2: p2p_1.AuthEncP2PMessage,
        }),
        [OVCIndexEnum.TWO]: t.type({
            bitgoToOvcMsg2: p2p_1.AuthEncP2PMessage,
        }),
    }),
});
exports.BitgoToOVC1Round1Response = t.intersection([
    exports.OVC2ToBitgoRound1Payload,
    t.type({ platform: exports.PlatformRound1Payload }),
]);
exports.OVC1ToOVC2Round2Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
            }),
        }),
        platform: exports.PlatformRound1Payload,
    }),
]);
exports.OVC2ToBitgoRound2Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
            }),
        }),
        platform: exports.PlatformRound1Payload,
    }),
]);
exports.PlatformRound2Payload = t.type({
    sessionId: io_ts_types_1.NonEmptyString,
    bitgoMsg1: broadcast_1.AuthBroadcastMessage,
    bitgoCommitment2: io_ts_types_1.NonEmptyString,
    ovc: t.type({
        [OVCIndexEnum.ONE]: t.type({
            bitgoToOvcMsg2: p2p_1.AuthEncP2PMessage,
            bitgoToOvcMsg3: p2p_1.AuthEncP2PMessage,
        }),
        [OVCIndexEnum.TWO]: t.type({
            bitgoToOvcMsg2: p2p_1.AuthEncP2PMessage,
            bitgoToOvcMsg3: p2p_1.AuthEncP2PMessage,
        }),
    }),
});
exports.BitgoToOVC1Round2Response = t.intersection([
    exports.OVC2ToBitgoRound2Payload,
    t.type({ platform: exports.PlatformRound2Payload }),
]);
exports.OVC1ToOVC2Round3Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
                ovcToBitgoMsg3: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg3: p2p_1.AuthEncP2PMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
            }),
        }),
        platform: exports.PlatformRound2Payload,
    }),
]);
exports.OVC2ToOVC1Round3Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
                ovcToBitgoMsg3: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg3: p2p_1.AuthEncP2PMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
                ovcToBitgoMsg3: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg3: p2p_1.AuthEncP2PMessage,
                ovcMsg4: broadcast_1.AuthBroadcastMessage,
            }),
        }),
        platform: exports.PlatformRound2Payload,
    }),
]);
exports.OVC1ToBitgoRound3Payload = t.intersection([
    BaseRoundPayload,
    t.type({
        ovc: t.type({
            [OVCIndexEnum.ONE]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
                ovcToBitgoMsg3: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg3: p2p_1.AuthEncP2PMessage,
                ovcMsg4: broadcast_1.AuthBroadcastMessage,
            }),
            [OVCIndexEnum.TWO]: t.type({
                gpgPubKey: io_ts_types_1.NonEmptyString,
                ovcMsg1: broadcast_1.AuthBroadcastMessage,
                ovcToBitgoMsg2: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg2: p2p_1.AuthEncP2PMessage,
                ovcToBitgoMsg3: p2p_1.AuthEncP2PMessage,
                ovcToOvcMsg3: p2p_1.AuthEncP2PMessage,
                ovcMsg4: broadcast_1.AuthBroadcastMessage,
            }),
        }),
        platform: exports.PlatformRound2Payload,
    }),
]);
exports.PlatformRound3Payload = t.intersection([
    exports.PlatformRound2Payload,
    t.type({
        commonKeychain: io_ts_types_1.NonEmptyString,
        bitgoMsg4: broadcast_1.AuthBroadcastMessage,
    }),
]);
exports.BitgoToOVC1Round3Response = t.intersection([
    t.type({ bitGoKeyId: io_ts_types_1.NonEmptyString }),
    exports.OVC1ToBitgoRound3Payload,
    t.type({ platform: exports.PlatformRound3Payload }),
]);
//# sourceMappingURL=keygenRound.js.map
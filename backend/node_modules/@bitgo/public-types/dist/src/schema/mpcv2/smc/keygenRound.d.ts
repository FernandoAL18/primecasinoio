import * as t from "io-ts";
export declare enum OVCIndexEnum {
    ONE = 1,
    TWO = 2
}
export declare const OVC1ToOVC2Round1Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
}>]>;
export type OVC1ToOVC2Round1Payload = t.TypeOf<typeof OVC1ToOVC2Round1Payload>;
export declare const OVC2ToBitgoRound1Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
}>]>;
export type OVC2ToBitgoRound1Payload = t.TypeOf<typeof OVC2ToBitgoRound1Payload>;
export declare const PlatformRound1Payload: t.TypeC<{
    walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
    sessionId: import("io-ts-types").NonEmptyStringC;
    bitgoMsg1: t.IntersectionC<[t.TypeC<{
        payload: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
    }>, t.PartialC<{
        signatureR: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
    }>]>;
    ovc: t.TypeC<{
        1: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
}>;
export type PlatformRound1Payload = t.TypeOf<typeof PlatformRound1Payload>;
export declare const BitgoToOVC1Round1Response: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
}>]>, t.TypeC<{
    platform: t.TypeC<{
        walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type BitgoToOVC1Round1Response = t.TypeOf<typeof BitgoToOVC1Round1Response>;
export declare const OVC1ToOVC2Round2Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type OVC1ToOVC2Round2Payload = t.TypeOf<typeof OVC1ToOVC2Round2Payload>;
export declare const OVC2ToBitgoRound2Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type OVC2ToBitgoRound2Payload = t.TypeOf<typeof OVC2ToBitgoRound2Payload>;
export declare const PlatformRound2Payload: t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    bitgoMsg1: t.IntersectionC<[t.TypeC<{
        payload: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
    }>, t.PartialC<{
        signatureR: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
    }>]>;
    bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
    ovc: t.TypeC<{
        1: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
}>;
export type PlatformRound2Payload = t.TypeOf<typeof PlatformRound2Payload>;
export declare const BitgoToOVC1Round2Response: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        walletGpgPubKeySigs: import("io-ts-types").NonEmptyStringC;
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>, t.TypeC<{
    platform: t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type BitgoToOVC1Round2Response = t.TypeOf<typeof BitgoToOVC1Round2Response>;
export declare const OVC1ToOVC2Round3Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type OVC1ToOVC2Round3Payload = t.TypeOf<typeof OVC1ToOVC2Round3Payload>;
export declare const OVC2ToOVC1Round3Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcMsg4: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type OVC2ToOVC1Round3Payload = t.TypeOf<typeof OVC2ToOVC1Round3Payload>;
export declare const OVC1ToBitgoRound3Payload: t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcMsg4: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcMsg4: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>;
export type OVC1ToBitgoRound3Payload = t.TypeOf<typeof OVC1ToBitgoRound3Payload>;
export declare const PlatformRound3Payload: t.IntersectionC<[t.TypeC<{
    sessionId: import("io-ts-types").NonEmptyStringC;
    bitgoMsg1: t.IntersectionC<[t.TypeC<{
        payload: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
    }>, t.PartialC<{
        signatureR: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
    }>]>;
    bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
    ovc: t.TypeC<{
        1: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
        2: t.TypeC<{
            bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
        }>;
    }>;
}>, t.TypeC<{
    commonKeychain: import("io-ts-types").NonEmptyStringC;
    bitgoMsg4: t.IntersectionC<[t.TypeC<{
        payload: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
        from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
    }>, t.PartialC<{
        signatureR: t.TypeC<{
            message: import("io-ts-types").NonEmptyStringC;
            signature: import("io-ts-types").NonEmptyStringC;
        }>;
    }>]>;
}>]>;
export type PlatformRound3Payload = t.TypeOf<typeof PlatformRound3Payload>;
export declare const BitgoToOVC1Round3Response: t.IntersectionC<[t.TypeC<{
    bitGoKeyId: import("io-ts-types").NonEmptyStringC;
}>, t.IntersectionC<[t.TypeC<{
    state: t.UnionC<[t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2Round3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1Round3bData>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.WaitingForOVC2GenerateKey>, t.LiteralC<import("./keygenState").KeyCreationMPCv2StateEnum.KeyGenerationComplete>]>;
    tssVersion: import("io-ts-types").NonEmptyStringC;
    walletType: t.KeyofC<typeof import("./walletType").WalletTypeEnum>;
    coin: import("io-ts-types").NonEmptyStringC;
}>, t.TypeC<{
    ovc: t.TypeC<{
        1: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcMsg4: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
        2: t.TypeC<{
            gpgPubKey: import("io-ts-types").NonEmptyStringC;
            ovcMsg1: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
            ovcToBitgoMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg2: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToBitgoMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcToOvcMsg3: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    encryptedMessage: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                commitment: import("io-ts-types").NonEmptyStringC;
            }>]>;
            ovcMsg4: t.IntersectionC<[t.TypeC<{
                payload: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
                from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
            }>, t.PartialC<{
                signatureR: t.TypeC<{
                    message: import("io-ts-types").NonEmptyStringC;
                    signature: import("io-ts-types").NonEmptyStringC;
                }>;
            }>]>;
        }>;
    }>;
    platform: t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>;
}>]>, t.TypeC<{
    platform: t.IntersectionC<[t.TypeC<{
        sessionId: import("io-ts-types").NonEmptyStringC;
        bitgoMsg1: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
        bitgoCommitment2: import("io-ts-types").NonEmptyStringC;
        ovc: t.TypeC<{
            1: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
            2: t.TypeC<{
                bitgoToOvcMsg2: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
                bitgoToOvcMsg3: t.IntersectionC<[t.TypeC<{
                    payload: t.TypeC<{
                        encryptedMessage: import("io-ts-types").NonEmptyStringC;
                        signature: import("io-ts-types").NonEmptyStringC;
                    }>;
                    from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                    to: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
                }>, t.PartialC<{
                    commitment: import("io-ts-types").NonEmptyStringC;
                }>]>;
            }>;
        }>;
    }>, t.TypeC<{
        commonKeychain: import("io-ts-types").NonEmptyStringC;
        bitgoMsg4: t.IntersectionC<[t.TypeC<{
            payload: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
            from: t.UnionC<[t.UnionC<[t.LiteralC<0>, t.LiteralC<1>, t.LiteralC<2>]>, t.Type<0 | 2 | 1, string, unknown>]>;
        }>, t.PartialC<{
            signatureR: t.TypeC<{
                message: import("io-ts-types").NonEmptyStringC;
                signature: import("io-ts-types").NonEmptyStringC;
            }>;
        }>]>;
    }>]>;
}>]>;
export type BitgoToOVC1Round3Response = t.TypeOf<typeof BitgoToOVC1Round3Response>;

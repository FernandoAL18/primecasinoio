import * as t from "io-ts";
export declare const WebhookNotificationState: t.UnionC<[t.LiteralC<"unconfirmed">, t.LiteralC<"new">, t.LiteralC<"pending">, t.LiteralC<"processed">, t.LiteralC<"failed">]>;
export type WebhookNotificationState = t.TypeOf<typeof WebhookNotificationState>;
export declare const WebhookNotification: t.IntersectionC<[t.TypeC<{
    id: t.StringC;
}>, t.PartialC<{
    type: t.KeyofC<typeof import("./webhookType").WebhookTypeEnum>;
    wallet: t.StringC;
    url: t.StringC;
    hash: t.StringC;
    coin: t.StringC;
    coinChain: t.StringC;
    transfer: t.StringC;
    state: t.UnionC<[t.LiteralC<"unconfirmed">, t.LiteralC<"new">, t.LiteralC<"pending">, t.LiteralC<"processed">, t.LiteralC<"failed">]>;
    simulation: t.BooleanC;
    retries: t.NumberC;
    webhook: t.StringC;
    updatedAt: import("io-ts-types").DateFromISOStringC;
    nextAttempt: import("io-ts-types").DateFromISOStringC;
    version: t.NumberC;
    allowBlockedHosts: t.BooleanC;
    heightToConfirm: t.NumberC;
    payload: t.StringC;
    response: t.PartialC<{
        code: t.UnionC<[t.NumberC, t.StringC]>;
        type: t.StringC;
        body: t.StringC;
        error: t.StringC;
    }>;
}>]>;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate2of2KeyShares = exports.generateDKGKeyShares = exports.executeTillRound = exports.verifyAndConvertDklsSignature = exports.combinePartialSignatures = void 0;
const secp256k1_1 = require("@noble/curves/secp256k1");
const curves_1 = require("../../curves");
const util_1 = require("../../util");
const cbor_x_1 = require("cbor-x");
const secp256k1 = __importStar(require("secp256k1"));
const crypto_1 = require("crypto");
const dkg_1 = require("./dkg");
const assert_1 = __importDefault(require("assert"));
const delimeter = ':';
/**
 * Combines partial signatures from parties participating in DSG.
 * @param round4MessagePayloads - round 4 message payloads from participating parties
 * @param rHex - hex representation of the r value in the signature
 * @returns {DeserializedMessages} - messages to send to other parties for the next round
 */
function combinePartialSignatures(round4MessagePayloads, rHex) {
    const r = (0, util_1.bigIntFromBufferBE)(Buffer.from(rHex, 'hex').subarray(1));
    const s0Arr = round4MessagePayloads.map((p) => (0, cbor_x_1.decode)(p).s_0);
    const s1Arr = round4MessagePayloads.map((p) => (0, cbor_x_1.decode)(p).s_1);
    const s0BigInts = s0Arr.map((s0) => (0, util_1.bigIntFromBufferBE)(Buffer.from(s0)));
    const s1BigInts = s1Arr.map((s1) => (0, util_1.bigIntFromBufferBE)(Buffer.from(s1)));
    const secp256k1Curve = new curves_1.Secp256k1Curve();
    const s0Sum = s0BigInts.slice(1).reduce((sumSoFar, s0) => secp256k1Curve.scalarAdd(sumSoFar, s0), s0BigInts[0]);
    const s1Sum = s1BigInts.slice(1).reduce((sumSoFar, s1) => secp256k1Curve.scalarAdd(sumSoFar, s1), s1BigInts[0]);
    const s = secp256k1Curve.scalarMult(s0Sum, secp256k1Curve.scalarInvert(s1Sum));
    const sig = new secp256k1_1.secp256k1.Signature(r, s);
    const normalizedSig = sig.normalizeS();
    return {
        R: new Uint8Array((0, util_1.bigIntToBufferBE)(normalizedSig.r, 32)),
        S: new Uint8Array((0, util_1.bigIntToBufferBE)(normalizedSig.s, 32)),
    };
}
exports.combinePartialSignatures = combinePartialSignatures;
/**
 * Verify a DKLs Signature and serialize it to recid:r:s:publickey format.
 * @param message - message that was signed.
 * @param dklsSignature - R and S values of the ECDSA signature.
 * @param commonKeychain - public key appended to chaincode in hex.
 * @param derivationPath - optional derivation path to derive on the commonkeychain before verification.
 * @param hash - optional hash function to apply on message before verifying. Default is sha256.
 * @param shouldHash - flag to determine whether message should be hashed before verifying.
 * @returns {string} - serialized signature in `recid:r:s:publickey` format
 */
function verifyAndConvertDklsSignature(message, dklsSignature, commonKeychain, derivationPath, hash, shouldHash = true) {
    let truePub = '';
    if (derivationPath && derivationPath !== 'm') {
        const hdTree = new curves_1.Secp256k1Bip32HdTree();
        const derivedPub = hdTree.publicDerive({
            pk: (0, util_1.bigIntFromBufferBE)(Buffer.from(commonKeychain.slice(0, 66), 'hex')),
            chaincode: (0, util_1.bigIntFromBufferBE)(Buffer.from(commonKeychain.slice(66), 'hex')),
        }, derivationPath);
        truePub = (0, util_1.bigIntToBufferBE)(derivedPub.pk).toString('hex');
    }
    else {
        truePub = commonKeychain.slice(0, 66);
    }
    const messageToVerify = shouldHash ? (hash || (0, crypto_1.createHash)('sha256')).update(message).digest() : message;
    const pub0 = secp256k1.ecdsaRecover(Buffer.concat([dklsSignature.R, dklsSignature.S]), 0, messageToVerify, true);
    const pub1 = secp256k1.ecdsaRecover(Buffer.concat([dklsSignature.R, dklsSignature.S]), 1, messageToVerify, true);
    let recId;
    if (truePub === Buffer.from(pub0).toString('hex')) {
        recId = 0;
    }
    else if (truePub === Buffer.from(pub1).toString('hex')) {
        recId = 1;
    }
    else {
        throw Error('Invalid Signature');
    }
    return `${recId}${delimeter}${Buffer.from(dklsSignature.R).toString('hex')}${delimeter}${Buffer.from(dklsSignature.S).toString('hex')}${delimeter}${truePub}`;
}
exports.verifyAndConvertDklsSignature = verifyAndConvertDklsSignature;
async function executeTillRound(round, party1Dsg, party2Dsg) {
    if (round < 1 || round > 5) {
        throw Error('Invalid round number');
    }
    const party1Round1Message = await party1Dsg.init();
    const party2Round1Message = await party2Dsg.init();
    const party2Round2Messages = party2Dsg.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [party1Round1Message],
    });
    const party1Round2Messages = party1Dsg.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [party2Round1Message],
    });
    if (round === 2)
        return [party1Round2Messages, party2Round2Messages];
    const party1Round3Messages = party1Dsg.handleIncomingMessages({
        p2pMessages: party2Round2Messages.p2pMessages,
        broadcastMessages: [],
    });
    const party2Round3Messages = party2Dsg.handleIncomingMessages({
        p2pMessages: party1Round2Messages.p2pMessages,
        broadcastMessages: [],
    });
    if (round === 3)
        return [party1Round3Messages, party2Round3Messages];
    const party2Round4Messages = party2Dsg.handleIncomingMessages({
        p2pMessages: party1Round3Messages.p2pMessages,
        broadcastMessages: [],
    });
    const party1Round4Messages = party1Dsg.handleIncomingMessages({
        p2pMessages: party2Round3Messages.p2pMessages,
        broadcastMessages: [],
    });
    if (round === 4)
        return [party1Round4Messages, party2Round4Messages];
    party1Dsg.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: party2Round4Messages.broadcastMessages,
    });
    party2Dsg.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: party1Round4Messages.broadcastMessages,
    });
    (0, assert_1.default)(Buffer.from(party1Dsg.signature.R).toString('hex') === Buffer.from(party2Dsg.signature.R).toString('hex'));
    (0, assert_1.default)(Buffer.from(party1Dsg.signature.S).toString('hex') === Buffer.from(party2Dsg.signature.S).toString('hex'));
    return party1Dsg.signature;
}
exports.executeTillRound = executeTillRound;
async function generateDKGKeyShares(retrofitDataA, retrofitDataB, retrofitDataC, seedUser, seedBackup, seedBitgo) {
    const user = new dkg_1.Dkg(3, 2, 0, seedUser, retrofitDataA);
    const backup = new dkg_1.Dkg(3, 2, 1, seedBackup, retrofitDataB);
    const bitgo = new dkg_1.Dkg(3, 2, 2, seedBitgo, retrofitDataC);
    // #region round 1
    const userRound1Message = await user.initDkg();
    const backupRound1Message = await backup.initDkg();
    const bitgoRound1Message = await bitgo.initDkg();
    const bitgoRound2Messages = bitgo.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [userRound1Message, backupRound1Message],
    });
    // #endregion
    // #region round 2
    const userRound2Messages = user.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [bitgoRound1Message, backupRound1Message],
    });
    const backupRound2Messages = backup.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [userRound1Message, bitgoRound1Message],
    });
    const bitgoRound3Messages = bitgo.handleIncomingMessages({
        p2pMessages: backupRound2Messages.p2pMessages
            .filter((m) => m.to === 2)
            .concat(userRound2Messages.p2pMessages.filter((m) => m.to === 2)),
        broadcastMessages: [],
    });
    // #endregion
    // #region round 3
    const userRound3Messages = user.handleIncomingMessages({
        p2pMessages: backupRound2Messages.p2pMessages
            .filter((m) => m.to === 0)
            .concat(bitgoRound2Messages.p2pMessages.filter((m) => m.to === 0)),
        broadcastMessages: [],
    });
    const backupRound3Messages = backup.handleIncomingMessages({
        p2pMessages: bitgoRound2Messages.p2pMessages
            .filter((m) => m.to === 1)
            .concat(userRound2Messages.p2pMessages.filter((m) => m.to === 1)),
        broadcastMessages: [],
    });
    const userRound4Messages = user.handleIncomingMessages({
        p2pMessages: backupRound3Messages.p2pMessages
            .filter((m) => m.to === 0)
            .concat(bitgoRound3Messages.p2pMessages.filter((m) => m.to === 0)),
        broadcastMessages: [],
    });
    const backupRound4Messages = backup.handleIncomingMessages({
        p2pMessages: bitgoRound3Messages.p2pMessages
            .filter((m) => m.to === 1)
            .concat(userRound3Messages.p2pMessages.filter((m) => m.to === 1)),
        broadcastMessages: [],
    });
    const bitgoRound4Messages = bitgo.handleIncomingMessages({
        p2pMessages: backupRound3Messages.p2pMessages
            .filter((m) => m.to === 2)
            .concat(userRound3Messages.p2pMessages.filter((m) => m.to === 2)),
        broadcastMessages: [],
    });
    // #endregion
    user.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: bitgoRound4Messages.broadcastMessages.concat(backupRound4Messages.broadcastMessages),
    });
    bitgo.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: backupRound4Messages.broadcastMessages.concat(userRound4Messages.broadcastMessages),
    });
    backup.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: bitgoRound4Messages.broadcastMessages.concat(userRound4Messages.broadcastMessages),
    });
    return [user, backup, bitgo];
}
exports.generateDKGKeyShares = generateDKGKeyShares;
async function generate2of2KeyShares(retrofitDataA, retrofitDataB) {
    const partyA = new dkg_1.Dkg(2, 2, 0, undefined, retrofitDataA);
    const partyB = new dkg_1.Dkg(2, 2, 1, undefined, retrofitDataB);
    const partyARound1Message = await partyA.initDkg();
    const partyBRound1Message = await partyB.initDkg();
    const partyARound2Messages = partyA.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [partyBRound1Message],
    });
    const partyBRound2Messages = partyB.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: [partyARound1Message],
    });
    const partyARound3Messages = partyA.handleIncomingMessages({
        p2pMessages: partyBRound2Messages.p2pMessages.filter((m) => m.to === 0),
        broadcastMessages: [],
    });
    const partyBRound3Messages = partyB.handleIncomingMessages({
        p2pMessages: partyARound2Messages.p2pMessages.filter((m) => m.to === 1),
        broadcastMessages: [],
    });
    const partyARound4Messages = partyA.handleIncomingMessages({
        p2pMessages: partyBRound3Messages.p2pMessages.filter((m) => m.to === 0),
        broadcastMessages: [],
    });
    const partyBRound4Messages = partyB.handleIncomingMessages({
        p2pMessages: partyARound3Messages.p2pMessages.filter((m) => m.to === 1),
        broadcastMessages: [],
    });
    partyA.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: partyBRound4Messages.broadcastMessages,
    });
    partyB.handleIncomingMessages({
        p2pMessages: [],
        broadcastMessages: partyARound4Messages.broadcastMessages,
    });
    return [partyA, partyB];
}
exports.generate2of2KeyShares = generate2of2KeyShares;
//# sourceMappingURL=data:application/json;base64,
/// <reference types="node" />
import type { KeygenSession, Keyshare } from '@silencelaboratories/dkls-wasm-ll-node';
import { DeserializedBroadcastMessage, DeserializedMessages, DkgState, RetrofitData } from './types';
declare type NodeWasmer = typeof import('@silencelaboratories/dkls-wasm-ll-node');
declare type WebWasmer = typeof import('@silencelaboratories/dkls-wasm-ll-web');
declare type BundlerWasmer = typeof import('@silencelaboratories/dkls-wasm-ll-bundler');
declare type DklsWasm = NodeWasmer | WebWasmer | BundlerWasmer;
export declare class Dkg {
    protected dkgSession: KeygenSession | undefined;
    protected dkgSessionBytes: Uint8Array;
    protected dkgKeyShare: Keyshare;
    protected keyShareBuff: Buffer;
    protected n: number;
    protected t: number;
    protected seed: Buffer | undefined;
    protected chainCodeCommitment: Uint8Array | undefined;
    protected partyIdx: number;
    protected dkgState: DkgState;
    protected dklsKeyShareRetrofitObject: Keyshare | undefined;
    protected retrofitData: RetrofitData | undefined;
    protected dklsWasm: DklsWasm | null;
    constructor(n: number, t: number, partyIdx: number, seed?: Buffer, retrofitData?: RetrofitData, dklsWasm?: BundlerWasmer);
    private loadDklsWasm;
    private getDklsWasm;
    private _restoreSession;
    private _createDKLsRetrofitKeyShare;
    private _deserializeState;
    initDkg(): Promise<DeserializedBroadcastMessage>;
    getKeyShare(): Buffer;
    getReducedKeyShare(): Buffer;
    handleIncomingMessages(messagesForIthRound: DeserializedMessages): DeserializedMessages;
}
export {};
//# sourceMappingURL=dkg.d.ts.map
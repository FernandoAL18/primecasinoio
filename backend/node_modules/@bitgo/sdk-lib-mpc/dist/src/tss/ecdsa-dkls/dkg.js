"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dkg = void 0;
const cbor_x_1 = require("cbor-x");
const curves_1 = require("../../curves");
const util_1 = require("../../util");
const types_1 = require("./types");
class Dkg {
    constructor(n, t, partyIdx, seed, retrofitData, dklsWasm) {
        this.dkgState = types_1.DkgState.Uninitialized;
        this.n = n;
        this.t = t;
        this.partyIdx = partyIdx;
        this.chainCodeCommitment = undefined;
        this.retrofitData = retrofitData;
        this.seed = seed;
        this.dklsWasm = dklsWasm !== null && dklsWasm !== void 0 ? dklsWasm : null;
    }
    async loadDklsWasm() {
        if (!this.dklsWasm) {
            this.dklsWasm = await Promise.resolve().then(() => __importStar(require('@silencelaboratories/dkls-wasm-ll-node')));
        }
    }
    getDklsWasm() {
        if (!this.dklsWasm) {
            throw Error('DKLS wasm not loaded');
        }
        return this.dklsWasm;
    }
    _restoreSession() {
        if (!this.dkgSession) {
            this.dkgSession = this.getDklsWasm().KeygenSession.fromBytes(this.dkgSessionBytes);
        }
    }
    _createDKLsRetrofitKeyShare() {
        if (this.retrofitData) {
            if (!this.retrofitData.xShare.y || !this.retrofitData.xShare.chaincode || !this.retrofitData.xShare.x) {
                throw Error('xShare must have a public key, private share value, and a chaincode.');
            }
            const xiList = [];
            for (let i = 0; i < this.n; i++) {
                xiList.push(Array.from((0, util_1.bigIntToBufferBE)(BigInt(i + 1), 32)));
            }
            const secp256k1 = new curves_1.Secp256k1Curve();
            const dklsKeyShare = {
                total_parties: this.n,
                threshold: this.t,
                rank_list: new Array(this.n).fill(0),
                party_id: this.partyIdx,
                public_key: Array.from(Buffer.from(this.retrofitData.xShare.y, 'hex')),
                root_chain_code: Array.from(Buffer.from(this.retrofitData.xShare.chaincode, 'hex')),
                final_session_id: Array(32).fill(0),
                seed_ot_receivers: new Array(this.n - 1).fill(Array(32832).fill(0)),
                seed_ot_senders: new Array(this.n - 1).fill(Array(32768).fill(0)),
                sent_seed_list: [Array(32).fill(0)],
                rec_seed_list: [Array(32).fill(0)],
                s_i: Array.from(Buffer.from(this.retrofitData.xShare.x, 'hex')),
                // big_s_list is now created internally during the protocol so isn't needed here, however a valid KeyShare object needs to have it.
                // a dummy public key is used to fill big_s_list.
                big_s_list: new Array(this.n).fill(Array.from((0, util_1.bigIntToBufferBE)(secp256k1.basePointMult(BigInt('0x' + this.retrofitData.xShare.x))))),
                x_i_list: this.retrofitData.xiList ? this.retrofitData.xiList : xiList,
            };
            this.dklsKeyShareRetrofitObject = this.getDklsWasm().Keyshare.fromBytes((0, cbor_x_1.encode)(dklsKeyShare));
        }
    }
    _deserializeState() {
        if (!this.dkgSession) {
            throw Error('Session not intialized');
        }
        const round = (0, cbor_x_1.decode)(this.dkgSession.toBytes()).round;
        switch (round) {
            case 'WaitMsg1':
                this.dkgState = types_1.DkgState.Round1;
                break;
            case 'WaitMsg2':
                this.dkgState = types_1.DkgState.Round2;
                break;
            case 'WaitMsg3':
                this.dkgState = types_1.DkgState.Round3;
                break;
            case 'WaitMsg4':
                this.dkgState = types_1.DkgState.Round4;
                break;
            case 'Ended':
                this.dkgState = types_1.DkgState.Complete;
                break;
            default:
                this.dkgState = types_1.DkgState.InvalidState;
                throw Error(`Invalid State: ${round}`);
        }
    }
    async initDkg() {
        var _a;
        if (!this.dklsWasm) {
            await this.loadDklsWasm();
        }
        if (this.t > this.n || this.partyIdx >= this.n) {
            throw Error('Invalid parameters for DKG');
        }
        if (this.dkgState != types_1.DkgState.Uninitialized) {
            throw Error('DKG session already initialized');
        }
        if (typeof window !== 'undefined' &&
            /* checks for electron processes */
            !window.process &&
            !((_a = window.process) === null || _a === void 0 ? void 0 : _a['type'])) {
            /* This is only needed for browsers/web because it uses fetch to resolve the wasm asset for the web */
            const initDkls = await Promise.resolve().then(() => __importStar(require('@silencelaboratories/dkls-wasm-ll-web')));
            await initDkls.default();
        }
        this._createDKLsRetrofitKeyShare();
        if (this.seed && this.seed.length !== 32) {
            throw Error(`Seed should be 32 bytes, got ${this.seed.length}.`);
        }
        const { KeygenSession } = this.getDklsWasm();
        if (this.dklsKeyShareRetrofitObject) {
            this.dkgSession = this.seed
                ? KeygenSession.initKeyRotation(this.dklsKeyShareRetrofitObject, new Uint8Array(this.seed))
                : KeygenSession.initKeyRotation(this.dklsKeyShareRetrofitObject);
        }
        else {
            this.dkgSession = this.seed
                ? new KeygenSession(this.n, this.t, this.partyIdx, new Uint8Array(this.seed))
                : new KeygenSession(this.n, this.t, this.partyIdx);
        }
        try {
            const payload = this.dkgSession.createFirstMessage().payload;
            this._deserializeState();
            return {
                payload: payload,
                from: this.partyIdx,
            };
        }
        catch (e) {
            throw Error(`Error while creating the first message from party ${this.partyIdx}: ${e}`);
        }
    }
    getKeyShare() {
        if (!this.keyShareBuff) {
            throw Error('Can not get key share, DKG is not complete yet.');
        }
        return this.keyShareBuff;
    }
    getReducedKeyShare() {
        if (!this.keyShareBuff) {
            throw Error('Can not get key share, DKG is not complete yet.');
        }
        const decodedKeyshare = (0, cbor_x_1.decode)(this.keyShareBuff);
        const reducedKeyShare = {
            bigSList: decodedKeyshare.big_s_list,
            xList: decodedKeyshare.x_i_list,
            rootChainCode: decodedKeyshare.root_chain_code,
            prv: decodedKeyshare.s_i,
            pub: decodedKeyshare.public_key,
        };
        const encodedKeyShare = (0, cbor_x_1.encode)(reducedKeyShare);
        return encodedKeyShare;
    }
    handleIncomingMessages(messagesForIthRound) {
        let nextRoundMessages = [];
        let nextRoundDeserializedMessages = { broadcastMessages: [], p2pMessages: [] };
        this._restoreSession();
        if (!this.dkgSession) {
            throw Error('Session not initialized');
        }
        const { Message } = this.getDklsWasm();
        try {
            if (this.dkgState === types_1.DkgState.Round3) {
                const commitmentsUnsorted = messagesForIthRound.p2pMessages
                    .map((m) => {
                    return { from: m.from, commitment: m.commitment };
                })
                    .concat([{ from: this.partyIdx, commitment: this.chainCodeCommitment }]);
                const commitmentsSorted = commitmentsUnsorted
                    .sort((a, b) => {
                    return a.from - b.from;
                })
                    .map((c) => c.commitment);
                nextRoundMessages = this.dkgSession.handleMessages(messagesForIthRound.broadcastMessages
                    .map((m) => new Message(m.payload, m.from, undefined))
                    .concat(messagesForIthRound.p2pMessages.map((m) => new Message(m.payload, m.from, m.to))), commitmentsSorted);
            }
            else {
                nextRoundMessages = this.dkgSession.handleMessages(messagesForIthRound.broadcastMessages
                    .map((m) => new Message(m.payload, m.from, undefined))
                    .concat(messagesForIthRound.p2pMessages.map((m) => new Message(m.payload, m.from, m.to))), undefined);
            }
            if (this.dkgState === types_1.DkgState.Round4) {
                this.dkgKeyShare = this.dkgSession.keyshare();
                this.keyShareBuff = Buffer.from(this.dkgKeyShare.toBytes());
                this.dkgKeyShare.free();
                if (this.dklsKeyShareRetrofitObject) {
                    this.dklsKeyShareRetrofitObject.free();
                }
                this.dkgState = types_1.DkgState.Complete;
                return { broadcastMessages: [], p2pMessages: [] };
            }
            else {
                // Update round data.
                this._deserializeState();
            }
            if (this.dkgState === types_1.DkgState.Round2) {
                this.chainCodeCommitment = this.dkgSession.calculateChainCodeCommitment();
            }
            nextRoundDeserializedMessages = {
                p2pMessages: nextRoundMessages
                    .filter((m) => m.to_id !== undefined)
                    .map((m) => {
                    const p2pReturn = {
                        payload: m.payload,
                        from: m.from_id,
                        to: m.to_id,
                        commitment: this.chainCodeCommitment,
                    };
                    return p2pReturn;
                }),
                broadcastMessages: nextRoundMessages
                    .filter((m) => m.to_id === undefined)
                    .map((m) => {
                    const broadcastReturn = {
                        payload: m.payload,
                        from: m.from_id,
                    };
                    return broadcastReturn;
                }),
            };
        }
        catch (e) {
            throw Error(`Error while creating messages from party ${this.partyIdx}, round ${this.dkgState}: ${e}`);
        }
        finally {
            nextRoundMessages.forEach((m) => m.free());
            // Session is freed when keyshare is called.
            if (this.dkgState !== types_1.DkgState.Complete) {
                this.dkgSessionBytes = this.dkgSession.toBytes();
                this.dkgSession = undefined;
            }
        }
        return nextRoundDeserializedMessages;
    }
}
exports.Dkg = Dkg;
//# sourceMappingURL=data:application/json;base64,
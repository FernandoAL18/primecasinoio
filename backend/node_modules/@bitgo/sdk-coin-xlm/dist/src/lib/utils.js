"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodePrivateKey = exports.decodePublicKey = exports.encodePrivateKey = exports.encodePublicKey = exports.isValidRootPrivateKey = exports.isValidPrivateKey = exports.isValidStellarPrivateKey = exports.isValidStellarPrv = exports.isValidRootPublicKey = exports.isValidPublicKey = exports.isValidStellarPublicKey = exports.isValidStellarPub = exports.createStellarKeypairFromPrv = exports.createStellarKeypairFromPub = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const stellar = __importStar(require("stellar-sdk"));
/**
 * Creates a Stellar keypair from a public key.
 * Public key can be either a raw root public key (hex string) or a Stellar public key (prefixed with 'G')
 * @param pub Either hex root public key or Stellar public key
 * @returns Stellar keypair from the provided pub
 */
function createStellarKeypairFromPub(pub) {
    if (pub.startsWith('G')) {
        if (!isValidStellarPublicKey(pub)) {
            throw new Error('Invalid Stellar public key');
        }
        return stellar.Keypair.fromPublicKey(pub);
    }
    const encodedPub = encodePublicKey(Buffer.from(pub, 'hex'));
    if (!isValidStellarPublicKey(encodedPub)) {
        throw new Error('Invalid root public key');
    }
    return stellar.Keypair.fromPublicKey(encodedPub);
}
exports.createStellarKeypairFromPub = createStellarKeypairFromPub;
/**
 * Creates a Stellar keypair from a private key.
 * Private key can be either a raw root private key (hex string) or a Stellar private key (prefixed with 'S').
 * @param secret Either hex root private key or Stellar private key
 * @returns Stellar keypair from the provided prv
 */
function createStellarKeypairFromPrv(prv) {
    if (prv.startsWith('S')) {
        if (!isValidStellarPrivateKey(prv)) {
            throw new Error('Invalid Stellar private key');
        }
        return stellar.Keypair.fromSecret(prv);
    }
    const encodedPrv = encodePrivateKey(Buffer.from(prv.slice(0, 64), 'hex'));
    if (!isValidStellarPrivateKey(encodedPrv)) {
        throw new Error('Invalid root private key');
    }
    return stellar.Keypair.fromSecret(encodedPrv);
}
exports.createStellarKeypairFromPrv = createStellarKeypairFromPrv;
/**
 * @deprecated Use isValidStellarPublicKey instead
 *
 * Validates a Stellar public key
 * Stellar public keys are prefixed with 'G'
 * @param pub A Stellar public key to validate
 * @returns Whether the input is a valid Stellar public key
 */
function isValidStellarPub(pub) {
    return stellar.StrKey.isValidEd25519PublicKey(pub);
}
exports.isValidStellarPub = isValidStellarPub;
/**
 * Validates a Stellar public key
 * Stellar public keys are prefixed with 'G'
 * @param pub A Stellar public key to validate
 * @returns Whether the input is a valid Stellar public key
 */
function isValidStellarPublicKey(pub) {
    return stellar.StrKey.isValidEd25519PublicKey(pub);
}
exports.isValidStellarPublicKey = isValidStellarPublicKey;
/**
 * @deprecated Use isValidRootPublicKey instead
 *
 * Validates a ed25519 root public key
 * @param pub A hexadecimal public key to validate
 * @returns Whether the input is a valid public key
 */
function isValidPublicKey(pub) {
    return (0, sdk_core_1.isValidEd25519PublicKey)(pub);
}
exports.isValidPublicKey = isValidPublicKey;
/**
 * Validates a ed25519 root public key
 * @param pub A hexadecimal public key to validate
 * @returns Whether the input is a valid public key
 */
function isValidRootPublicKey(pub) {
    return (0, sdk_core_1.isValidEd25519PublicKey)(pub);
}
exports.isValidRootPublicKey = isValidRootPublicKey;
/**
 * @deprecated Use isValidStellarPrivateKey instead
 *
 * Validates a Stellar private key
 * Stellar private keys are prefixed with 'S'
 * @param seed A Stellar private key to validate
 * @returns Whether the input is a valid Stellar private key
 */
function isValidStellarPrv(seed) {
    return stellar.StrKey.isValidEd25519SecretSeed(seed);
}
exports.isValidStellarPrv = isValidStellarPrv;
/**
 * Validates a Stellar private key
 * Stellar private keys are prefixed with 'S'
 * @param seed A Stellar private key to validate
 * @returns Whether the input is a valid Stellar private key
 */
function isValidStellarPrivateKey(seed) {
    return stellar.StrKey.isValidEd25519SecretSeed(seed);
}
exports.isValidStellarPrivateKey = isValidStellarPrivateKey;
/**
 * @deprecated Use isValidRootPrivateKey instead
 *
 * Validates a ed25519 root private key
 * @param prv A hexadecimal private key to validate
 * @returns Whether the input is a valid private key
 */
function isValidPrivateKey(prv) {
    return (0, sdk_core_1.isValidEd25519SecretKey)(prv);
}
exports.isValidPrivateKey = isValidPrivateKey;
/**
 * Validates a ed25519 root private key
 * @param prv A hexadecimal private key to validate
 * @returns Whether the input is a valid private key
 */
function isValidRootPrivateKey(prv) {
    return (0, sdk_core_1.isValidEd25519SecretKey)(prv);
}
exports.isValidRootPrivateKey = isValidRootPrivateKey;
/**
 * Encodes a raw public key to a G-prefixed Stellar public key
 * @param pub Raw public key
 * @returns Encoded Stellar public key
 */
function encodePublicKey(pub) {
    return stellar.StrKey.encodeEd25519PublicKey(pub);
}
exports.encodePublicKey = encodePublicKey;
/**
 * Encodes a raw private key to a S-prefixed Stellar private key
 * @param prv Raw private key
 * @returns Encoded Stellar private key
 */
function encodePrivateKey(prv) {
    return stellar.StrKey.encodeEd25519SecretSeed(prv);
}
exports.encodePrivateKey = encodePrivateKey;
/**
 * Decodes a Stellar public key to a raw public key
 * @param pub Encoded Stellar G-prefixed public key
 * @returns Raw hexadecimal public key
 */
function decodePublicKey(pub) {
    return stellar.StrKey.decodeEd25519PublicKey(pub);
}
exports.decodePublicKey = decodePublicKey;
/**
 * Decodes a Stellar private key to a raw private key
 * @param prv Encoded Stellar S-prefixed private key
 * @returns Raw hexadecimal private key
 */
function decodePrivateKey(prv) {
    return stellar.StrKey.decodeEd25519SecretSeed(prv);
}
exports.decodePrivateKey = decodePrivateKey;
//# sourceMappingURL=data:application/json;base64,
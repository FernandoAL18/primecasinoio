"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTxRequestChallenge = exports.commonVerifyWalletSignature = exports.exchangeEddsaCommitments = exports.sendTxRequest = exports.sendSignatureShareV2 = exports.sendSignatureShare = exports.getTxRequest = void 0;
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../utils");
/**
 * Gets the latest Tx Request by id
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id
 * @param {String} txRequestId - the txRequest id
 * @param {IRequestTracer} reqId - the request tracer request id
 * @returns {Promise<TxRequest>}
 */
async function getTxRequest(bitgo, walletId, txRequestId, reqId) {
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    const txRequestRes = await bitgo
        .get(bitgo.url('/wallet/' + walletId + '/txrequests', 2))
        .query({ txRequestIds: txRequestId, latest: 'true' })
        .retry(3)
        .result();
    if (txRequestRes.txRequests.length <= 0) {
        throw new Error(`Unable to find TxRequest with id ${txRequestId}`);
    }
    return txRequestRes.txRequests[0];
}
exports.getTxRequest = getTxRequest;
/**
 * Sends a Signature Share
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param {SignatureShareRecord} signatureShare - a Signature Share
 * @param requestType - The type of request being submitted (either tx or message for signing)
 * @param signerShare
 * @param mpcAlgorithm
 * @param apiMode
 * @param {IRequestTracer} reqId - the request tracer request id
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function sendSignatureShare(bitgo, walletId, txRequestId, signatureShare, requestType, signerShare, mpcAlgorithm = 'eddsa', apiMode = 'lite', userPublicGpgKey, reqId) {
    let addendum = '';
    switch (requestType) {
        case utils_1.RequestType.tx:
            if (mpcAlgorithm === 'ecdsa' || apiMode === 'full') {
                addendum = '/transactions/0';
            }
            break;
        case utils_1.RequestType.message:
            if (mpcAlgorithm === 'ecdsa' || apiMode === 'full') {
                addendum = '/messages/0';
            }
            break;
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/signatureshares';
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    return bitgo
        .post(bitgo.url(urlPath, 2))
        .send({
        signatureShare,
        signerShare,
        userPublicGpgKey,
    })
        .result();
}
exports.sendSignatureShare = sendSignatureShare;
/**
 * Sends a Signature Share using the sign txRequest route
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param signatureShares
 * @param requestType - The type of request being submitted (either tx or message for signing)
 * @param signerShare
 * @param mpcAlgorithm
 * @param multisigTypeVersion
 * @param signerGpgPublicKey
 * @param reqId
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function sendSignatureShareV2(bitgo, walletId, txRequestId, signatureShares, requestType, mpcAlgorithm, signerGpgPublicKey, signerShare, multisigTypeVersion, reqId) {
    const addendum = requestType === utils_1.RequestType.tx ? '/transactions/0' : '/messages/0';
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/sign';
    let type = '';
    if (multisigTypeVersion === 'MPCv2' && mpcAlgorithm === 'ecdsa') {
        type = 'ecdsaMpcV2';
    }
    else if (multisigTypeVersion === undefined && mpcAlgorithm === 'eddsa') {
        type = 'eddsaMpcV1';
    }
    const requestBody = {
        type,
        signatureShares,
        signerShare,
        signerGpgPublicKey,
    };
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    return bitgo.post(bitgo.url(urlPath, 2)).send(requestBody).result();
}
exports.sendSignatureShareV2 = sendSignatureShareV2;
/**
 * Sends a Transaction Request for broadcast once signing is complete
 *
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {String} walletId - the wallet id  *
 * @param {String} txRequestId - the txRequest Id
 * @param requestType - The type of request being submitted (either tx or message for signing)
 * @param {IRequestTracer} reqId - request tracer request id
 * @returns {Promise<SignatureShareRecord>} - a Signature Share
 */
async function sendTxRequest(bitgo, walletId, txRequestId, requestType, reqId) {
    const addendum = requestType === utils_1.RequestType.tx ? '/transactions/0' : '/messages/0';
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/send';
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    return bitgo.post(bitgo.url(urlPath, 2)).send().result();
}
exports.sendTxRequest = sendTxRequest;
/**
 * Sends the client commitment and encrypted signer share to the server, getting back the server commitment
 * @param {BitGoBase} bitgo - the bitgo instance
 * @param {string} walletId - the wallet id
 * @param {string} txRequestId - the txRequest Id
 * @param {CommitmentShareRecord} commitmentShare - the client commitment share
 * @param {EncryptedSignerShareRecord} encryptedSignerShare - the client encrypted signer share
 * @param {string} [apiMode] - the txRequest api mode (full or lite) - defaults to lite
 * @param {IRequestTracer} reqId - the request tracer request Id
 * @returns {Promise<ExchangeCommitmentResponse>} - the server commitment share
 */
async function exchangeEddsaCommitments(bitgo, walletId, txRequestId, commitmentShare, encryptedSignerShare, apiMode = 'lite', reqId) {
    let addendum = '';
    if (apiMode === 'full') {
        addendum = '/transactions/0';
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/commit';
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    return await bitgo.post(bitgo.url(urlPath, 2)).send({ commitmentShare, encryptedSignerShare }).result();
}
exports.exchangeEddsaCommitments = exchangeEddsaCommitments;
/**
 * Verifies that a TSS wallet signature was produced with the expected key and that the signed data contains the
 * expected common keychain as well as the expected user and backup key ids
 */
async function commonVerifyWalletSignature(params) {
    const { walletSignature, bitgoPub, commonKeychain, userKeyId, backupKeyId } = params;
    // By ensuring that the fingerprints of the walletSignature and the bitgoPub are different and that any of the results
    // from calling verifyPrimaryUser is valid we know that the signature was actually produced by the private key
    // belonging to the bitgoPub.
    if (walletSignature.keyPacket.getFingerprint() === bitgoPub.keyPacket.getFingerprint()) {
        throw new Error('Invalid HSM GPG signature');
    }
    const verificationResult = await (0, utils_1.verifyPrimaryUserWrapper)(walletSignature, bitgoPub, false);
    const isValid = verificationResult.some((result) => result.valid);
    if (!isValid) {
        throw new Error('Invalid HSM GPG signature');
    }
    const primaryUser = await walletSignature.getPrimaryUser();
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore the rawNotations property is missing from the type but it actually exists
    const rawNotations = primaryUser.user.otherCertifications[0].rawNotations;
    (0, assert_1.default)(rawNotations.length === 5, 'invalid wallet signatures');
    (0, assert_1.default)(commonKeychain === Buffer.from(rawNotations[0].value).toString(), 'wallet signature does not match common keychain');
    (0, assert_1.default)(userKeyId === Buffer.from(rawNotations[1].value).toString(), `wallet signature does not match user key id`);
    (0, assert_1.default)(backupKeyId === Buffer.from(rawNotations[2].value).toString(), 'wallet signature does not match backup key id');
    return rawNotations;
}
exports.commonVerifyWalletSignature = commonVerifyWalletSignature;
/**
 * Gets challenge for a tx request from BitGo
 * supports Message and regular Transaction
 * @param bitgo
 * @param walletId
 * @param txRequestId
 * @param index
 * @param requestType
 * @param paillierModulus
 * @param reqId
 */
async function getTxRequestChallenge(bitgo, walletId, txRequestId, index, requestType, paillierModulus, reqId) {
    let addendum = '';
    switch (requestType) {
        case utils_1.RequestType.tx:
            addendum = '/transactions/' + index;
            break;
        case utils_1.RequestType.message:
            addendum = '/messages/' + index;
            break;
    }
    const urlPath = '/wallet/' + walletId + '/txrequests/' + txRequestId + addendum + '/challenge';
    const reqTracer = reqId || new utils_1.RequestTracer();
    bitgo.setRequestTracer(reqTracer);
    return await bitgo.post(bitgo.url(urlPath, 2)).send({ paillierModulus }).result();
}
exports.getTxRequestChallenge = getTxRequestChallenge;
//# sourceMappingURL=data:application/json;base64,
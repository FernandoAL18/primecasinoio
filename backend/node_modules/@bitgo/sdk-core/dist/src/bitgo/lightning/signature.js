"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMessageSignature = exports.verifyMessageSignature = void 0;
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const signableJson_1 = require("./signableJson");
const bip32util_1 = require("../bip32util");
/**
 * Verifies a signature for a given message.
 *
 * @param {Signable} message - The message to verify.
 * @param {string} signature - The signature to verify, in hexadecimal format.
 * @param {string} pub - The public key in BIP32 format.
 * @param {utxolib.Network} network - The network to use for verification.
 * @returns {boolean} - Returns true if the signature is valid, false otherwise.
 */
function verifyMessageSignature(message, signature, pub, network = utxolib.networks.bitcoin) {
    const messageString = JSON.stringify((0, signableJson_1.canonicalizeObject)(message));
    const pubKey = utxolib.bip32.fromBase58(pub, network).publicKey;
    const signatureBuffer = Buffer.from(signature, 'hex');
    return (0, bip32util_1.verifyMessage)(messageString, pubKey, signatureBuffer, network);
}
exports.verifyMessageSignature = verifyMessageSignature;
/**
 * Creates a signature for a given message.
 *
 * @param {Signable} message - The message to sign.
 * @param {string} prv - The private key in BIP32 format.
 * @param {utxolib.Network} network - The network to use for signing.
 * @returns {string} - Returns the signature in hexadecimal format.
 */
function createMessageSignature(message, prv, network = utxolib.networks.bitcoin) {
    const requestString = JSON.stringify((0, signableJson_1.canonicalizeObject)(message));
    const prvKey = utxolib.bip32.fromBase58(prv, network);
    return (0, bip32util_1.signMessage)(requestString, prvKey, network).toString('hex');
}
exports.createMessageSignature = createMessageSignature;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JpdGdvL2xpZ2h0bmluZy9zaWduYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSx5REFBMkM7QUFDM0MsaURBQThEO0FBQzlELDRDQUEwRDtBQUUxRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLHNCQUFzQixDQUNwQyxPQUFpQixFQUNqQixTQUFpQixFQUNqQixHQUFXLEVBQ1gsVUFBMkIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPO0lBRW5ELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBQSxpQ0FBa0IsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDaEUsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEQsT0FBTyxJQUFBLHlCQUFhLEVBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDeEUsQ0FBQztBQVZELHdEQVVDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILFNBQWdCLHNCQUFzQixDQUNwQyxPQUFpQixFQUNqQixHQUFXLEVBQ1gsVUFBMkIsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPO0lBRW5ELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBQSxpQ0FBa0IsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RCxPQUFPLElBQUEsdUJBQVcsRUFBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyRSxDQUFDO0FBUkQsd0RBUUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgeyBjYW5vbmljYWxpemVPYmplY3QsIFNpZ25hYmxlIH0gZnJvbSAnLi9zaWduYWJsZUpzb24nO1xuaW1wb3J0IHsgc2lnbk1lc3NhZ2UsIHZlcmlmeU1lc3NhZ2UgfSBmcm9tICcuLi9iaXAzMnV0aWwnO1xuXG4vKipcbiAqIFZlcmlmaWVzIGEgc2lnbmF0dXJlIGZvciBhIGdpdmVuIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtTaWduYWJsZX0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHZlcmlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzaWduYXR1cmUgLSBUaGUgc2lnbmF0dXJlIHRvIHZlcmlmeSwgaW4gaGV4YWRlY2ltYWwgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IHB1YiAtIFRoZSBwdWJsaWMga2V5IGluIEJJUDMyIGZvcm1hdC5cbiAqIEBwYXJhbSB7dXR4b2xpYi5OZXR3b3JrfSBuZXR3b3JrIC0gVGhlIG5ldHdvcmsgdG8gdXNlIGZvciB2ZXJpZmljYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIHNpZ25hdHVyZSBpcyB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5TWVzc2FnZVNpZ25hdHVyZShcbiAgbWVzc2FnZTogU2lnbmFibGUsXG4gIHNpZ25hdHVyZTogc3RyaW5nLFxuICBwdWI6IHN0cmluZyxcbiAgbmV0d29yazogdXR4b2xpYi5OZXR3b3JrID0gdXR4b2xpYi5uZXR3b3Jrcy5iaXRjb2luXG4pOiBib29sZWFuIHtcbiAgY29uc3QgbWVzc2FnZVN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNhbm9uaWNhbGl6ZU9iamVjdChtZXNzYWdlKSk7XG4gIGNvbnN0IHB1YktleSA9IHV0eG9saWIuYmlwMzIuZnJvbUJhc2U1OChwdWIsIG5ldHdvcmspLnB1YmxpY0tleTtcbiAgY29uc3Qgc2lnbmF0dXJlQnVmZmVyID0gQnVmZmVyLmZyb20oc2lnbmF0dXJlLCAnaGV4Jyk7XG4gIHJldHVybiB2ZXJpZnlNZXNzYWdlKG1lc3NhZ2VTdHJpbmcsIHB1YktleSwgc2lnbmF0dXJlQnVmZmVyLCBuZXR3b3JrKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2lnbmF0dXJlIGZvciBhIGdpdmVuIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtTaWduYWJsZX0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIHNpZ24uXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJ2IC0gVGhlIHByaXZhdGUga2V5IGluIEJJUDMyIGZvcm1hdC5cbiAqIEBwYXJhbSB7dXR4b2xpYi5OZXR3b3JrfSBuZXR3b3JrIC0gVGhlIG5ldHdvcmsgdG8gdXNlIGZvciBzaWduaW5nLlxuICogQHJldHVybnMge3N0cmluZ30gLSBSZXR1cm5zIHRoZSBzaWduYXR1cmUgaW4gaGV4YWRlY2ltYWwgZm9ybWF0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVzc2FnZVNpZ25hdHVyZShcbiAgbWVzc2FnZTogU2lnbmFibGUsXG4gIHBydjogc3RyaW5nLFxuICBuZXR3b3JrOiB1dHhvbGliLk5ldHdvcmsgPSB1dHhvbGliLm5ldHdvcmtzLmJpdGNvaW5cbik6IHN0cmluZyB7XG4gIGNvbnN0IHJlcXVlc3RTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShjYW5vbmljYWxpemVPYmplY3QobWVzc2FnZSkpO1xuICBjb25zdCBwcnZLZXkgPSB1dHhvbGliLmJpcDMyLmZyb21CYXNlNTgocHJ2LCBuZXR3b3JrKTtcbiAgcmV0dXJuIHNpZ25NZXNzYWdlKHJlcXVlc3RTdHJpbmcsIHBydktleSwgbmV0d29yaykudG9TdHJpbmcoJ2hleCcpO1xufVxuIl19
import { BitgoToOVC1Round1Response, BitgoToOVC1Round2Response, BitgoToOVC1Round3Response, OVC1ToBitgoRound3Payload, OVC2ToBitgoRound1Payload, OVC2ToBitgoRound2Payload } from '@bitgo/public-types';
import { IBaseCoin } from '../../../../baseCoin';
import { BitGoBase } from '../../../../bitgoBase';
import { Keychain } from '../../../..';
export declare class MPCv2SMCUtils {
    private baseCoin;
    private MPCv2Utils;
    constructor(bitgo: BitGoBase, baseCoin: IBaseCoin);
    keyGenRound1(enterprise: string, payload: OVC2ToBitgoRound1Payload): Promise<BitgoToOVC1Round1Response>;
    keyGenRound2(enterprise: string, payload: OVC2ToBitgoRound2Payload): Promise<BitgoToOVC1Round2Response>;
    keyGenRound3(enterprise: string, payload: OVC1ToBitgoRound3Payload): Promise<BitgoToOVC1Round3Response>;
    uploadClientKeys(bitgoKeyId: string, userCommonKeychain: string, backupCommonKeychain: string): Promise<{
        userKeychain: Keychain;
        backupKeychain: Keychain;
        bitgoKeychain: Keychain;
    }>;
}
//# sourceMappingURL=utils.d.ts.map
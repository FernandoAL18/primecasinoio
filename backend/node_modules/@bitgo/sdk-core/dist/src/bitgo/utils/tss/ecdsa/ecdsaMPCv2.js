"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signRecoveryMpcV2 = exports.getMpcV2RecoveryKeyShares = exports.isGG18SigningMaterial = exports.EcdsaMPCv2Utils = void 0;
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const sjcl = __importStar(require("@bitgo/sjcl"));
const assert_1 = __importDefault(require("assert"));
const buffer_1 = require("buffer");
const io_ts_types_1 = require("io-ts-types");
const keccak_1 = __importDefault(require("keccak"));
const pgp = __importStar(require("openpgp"));
const public_types_1 = require("@bitgo/public-types");
const account_lib_1 = require("../../../../account-lib");
const tss_1 = require("../../../tss");
const common_1 = require("../../../tss/common");
const typesMPCv2_1 = require("./typesMPCv2");
const ecdsaMPCv2_1 = require("../../../tss/ecdsa/ecdsaMPCv2");
const opengpgUtils_1 = require("../../opengpgUtils");
const baseTypes_1 = require("../baseTypes");
const base_1 = require("./base");
class EcdsaMPCv2Utils extends base_1.BaseEcdsaUtils {
    /** @inheritdoc */
    async createKeychains(params) {
        var _a, _b;
        const { userSession, backupSession } = this.getUserAndBackupSession(2, 3, params.retrofit);
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const backupGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        // Get the BitGo public key based on user/enterprise feature flags
        // If it doesn't work, use the default public key from the constants
        const bitgoPublicGpgKey = ((_a = (await this.getBitgoGpgPubkeyBasedOnFeatureFlags(params.enterprise, true))) !== null && _a !== void 0 ? _a : this.bitgoMPCv2PublicGpgKey).armor();
        const userGpgPrvKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.USER,
            gpgKey: userGpgKey.privateKey,
        };
        const backupGpgPrvKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.BACKUP,
            gpgKey: backupGpgKey.privateKey,
        };
        const bitgoGpgPubKey = {
            partyId: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
            gpgKey: bitgoPublicGpgKey,
        };
        // #region round 1
        const userRound1BroadcastMsg = await userSession.initDkg();
        const backupRound1BroadcastMsg = await backupSession.initDkg();
        const round1SerializedMessages = sdk_lib_mpc_1.DklsTypes.serializeMessages({
            broadcastMessages: [userRound1BroadcastMsg, backupRound1BroadcastMsg],
            p2pMessages: [],
        });
        const round1Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages(round1SerializedMessages, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId, bitgoMsg1, bitgoToBackupMsg2, bitgoToUserMsg2 } = await this.sendKeyGenerationRound1(params.enterprise, userGpgKey.publicKey, backupGpgKey.publicKey, ((_b = params.retrofit) === null || _b === void 0 ? void 0 : _b.walletId)
            ? {
                ...round1Messages,
                walletId: params.retrofit.walletId,
            }
            : round1Messages);
        // #endregion
        // #region round 2
        const bitgoRound1BroadcastMessages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [], broadcastMessages: [this.formatBitgoBroadcastMessage(bitgoMsg1)] }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const bitgoRound1BroadcastMsg = bitgoRound1BroadcastMessages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(bitgoRound1BroadcastMsg, 'BitGo message 1 not found in broadcast messages');
        const userRound2P2PMessages = userSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [sdk_lib_mpc_1.DklsTypes.deserializeBroadcastMessage(bitgoRound1BroadcastMsg), backupRound1BroadcastMsg],
        });
        const userToBitgoMsg2 = userRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userToBitgoMsg2, 'User message 2 not found in P2P messages');
        const serializedUserToBitgoMsg2 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(userToBitgoMsg2);
        const backupRound2P2PMessages = backupSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [userRound1BroadcastMsg, sdk_lib_mpc_1.DklsTypes.deserializeBroadcastMessage(bitgoRound1BroadcastMsg)],
        });
        const serializedBackupToBitgoMsg2 = sdk_lib_mpc_1.DklsTypes.serializeMessages(backupRound2P2PMessages).p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(serializedBackupToBitgoMsg2, 'Backup message 2 not found in P2P messages');
        const round2Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages({ p2pMessages: [serializedUserToBitgoMsg2, serializedBackupToBitgoMsg2], broadcastMessages: [] }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId: sessionIdRound2, bitgoCommitment2, bitgoToUserMsg3, bitgoToBackupMsg3, } = await this.sendKeyGenerationRound2(params.enterprise, sessionId, round2Messages);
        // #endregion
        // #region round 3
        assert_1.default.equal(sessionId, sessionIdRound2, 'Round 1 and 2 Session IDs do not match');
        const decryptedBitgoToUserRound2Msgs = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [this.formatP2PMessage(bitgoToUserMsg2)], broadcastMessages: [] }, [bitgoGpgPubKey], [userGpgPrvKey]);
        const serializedBitgoToUserRound2Msg = decryptedBitgoToUserRound2Msgs.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(serializedBitgoToUserRound2Msg, 'BitGo to User message 2 not found in P2P messages');
        const bitgoToUserRound2Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToUserRound2Msg);
        const decryptedBitgoToBackupRound2Msg = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [this.formatP2PMessage(bitgoToBackupMsg2)], broadcastMessages: [] }, [bitgoGpgPubKey], [backupGpgPrvKey]);
        const serializedBitgoToBackupRound2Msg = decryptedBitgoToBackupRound2Msg.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(serializedBitgoToBackupRound2Msg, 'BitGo to Backup message 2 not found in P2P messages');
        const bitgoToBackupRound2Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToBackupRound2Msg);
        const userToBackupMsg2 = userRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(userToBackupMsg2, 'User to Backup message 2 not found in P2P messages');
        const backupToUserMsg2 = backupRound2P2PMessages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(backupToUserMsg2, 'Backup to User message 2 not found in P2P messages');
        const userRound3Messages = userSession.handleIncomingMessages({
            broadcastMessages: [],
            p2pMessages: [bitgoToUserRound2Msg, backupToUserMsg2],
        });
        const userToBackupMsg3 = userRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(userToBackupMsg3, 'User to Backup message 3 not found in P2P messages');
        const userToBitgoMsg3 = userRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userToBitgoMsg3, 'User to Bitgo message 3 not found in P2P messages');
        const serializedUserToBitgoMsg3 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(userToBitgoMsg3);
        const backupRound3Messages = backupSession.handleIncomingMessages({
            broadcastMessages: [],
            p2pMessages: [bitgoToBackupRound2Msg, userToBackupMsg2],
        });
        const backupToUserMsg3 = backupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(backupToUserMsg3, 'Backup to User message 3 not found in P2P messages');
        const backupToBitgoMsg3 = backupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(backupToBitgoMsg3, 'Backup to Bitgo message 3 not found in P2P messages');
        const serializedBackupToBitgoMsg3 = sdk_lib_mpc_1.DklsTypes.serializeP2PMessage(backupToBitgoMsg3);
        const decryptedBitgoToUserRound3Messages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ broadcastMessages: [], p2pMessages: [this.formatP2PMessage(bitgoToUserMsg3, bitgoCommitment2)] }, [bitgoGpgPubKey], [userGpgPrvKey]);
        const serializedBitgoToUserRound3Msg = decryptedBitgoToUserRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(serializedBitgoToUserRound3Msg, 'BitGo to User message 3 not found in P2P messages');
        const bitgoToUserRound3Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToUserRound3Msg);
        const decryptedBitgoToBackupRound3Messages = await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ broadcastMessages: [], p2pMessages: [this.formatP2PMessage(bitgoToBackupMsg3, bitgoCommitment2)] }, [bitgoGpgPubKey], [backupGpgPrvKey]);
        const serializedBitgoToBackupRound3Msg = decryptedBitgoToBackupRound3Messages.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO && m.to === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(serializedBitgoToBackupRound3Msg, 'BitGo to Backup message 3 not found in P2P messages');
        const bitgoToBackupRound3Msg = sdk_lib_mpc_1.DklsTypes.deserializeP2PMessage(serializedBitgoToBackupRound3Msg);
        const userRound4Messages = userSession.handleIncomingMessages({
            p2pMessages: [backupToUserMsg3, bitgoToUserRound3Msg],
            broadcastMessages: [],
        });
        const userRound4BroadcastMsg = userRound4Messages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER);
        (0, assert_1.default)(userRound4BroadcastMsg, 'User message 4 not found in broadcast messages');
        const serializedUserRound4BroadcastMsg = sdk_lib_mpc_1.DklsTypes.serializeBroadcastMessage(userRound4BroadcastMsg);
        const backupRound4Messages = backupSession.handleIncomingMessages({
            p2pMessages: [userToBackupMsg3, bitgoToBackupRound3Msg],
            broadcastMessages: [],
        });
        const backupRound4BroadcastMsg = backupRound4Messages.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        (0, assert_1.default)(backupRound4BroadcastMsg, 'Backup message 4 not found in broadcast messages');
        const serializedBackupRound4BroadcastMsg = sdk_lib_mpc_1.DklsTypes.serializeBroadcastMessage(backupRound4BroadcastMsg);
        const round3Messages = await sdk_lib_mpc_1.DklsComms.encryptAndAuthOutgoingMessages({
            p2pMessages: [serializedUserToBitgoMsg3, serializedBackupToBitgoMsg3],
            broadcastMessages: [serializedUserRound4BroadcastMsg, serializedBackupRound4BroadcastMsg],
        }, [bitgoGpgPubKey], [userGpgPrvKey, backupGpgPrvKey]);
        const { sessionId: sessionIdRound3, bitgoMsg4, commonKeychain: bitgoCommonKeychain, } = await this.sendKeyGenerationRound3(params.enterprise, sessionId, round3Messages);
        // #endregion
        // #region keychain creation
        assert_1.default.equal(sessionId, sessionIdRound3, 'Round 1 and 3 Session IDs do not match');
        const bitgoRound4BroadcastMessages = sdk_lib_mpc_1.DklsTypes.deserializeMessages(await sdk_lib_mpc_1.DklsComms.decryptAndVerifyIncomingMessages({ p2pMessages: [], broadcastMessages: [this.formatBitgoBroadcastMessage(bitgoMsg4)] }, [bitgoGpgPubKey], [])).broadcastMessages;
        const bitgoRound4BroadcastMsg = bitgoRound4BroadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(bitgoRound4BroadcastMsg, 'BitGo message 4 not found in broadcast messages');
        userSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [bitgoRound4BroadcastMsg, backupRound4BroadcastMsg],
        });
        backupSession.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: [bitgoRound4BroadcastMsg, userRound4BroadcastMsg],
        });
        const userPrivateMaterial = userSession.getKeyShare();
        const backupPrivateMaterial = backupSession.getKeyShare();
        const userReducedPrivateMaterial = userSession.getReducedKeyShare();
        const backupReducedPrivateMaterial = backupSession.getReducedKeyShare();
        const userCommonKeychain = sdk_lib_mpc_1.DklsTypes.getCommonKeychain(userPrivateMaterial);
        const backupCommonKeychain = sdk_lib_mpc_1.DklsTypes.getCommonKeychain(backupPrivateMaterial);
        assert_1.default.equal(bitgoCommonKeychain, userCommonKeychain, 'User and Bitgo Common keychains do not match');
        assert_1.default.equal(bitgoCommonKeychain, backupCommonKeychain, 'Backup and Bitgo Common keychains do not match');
        const userKeychainPromise = this.addUserKeychain(bitgoCommonKeychain, userPrivateMaterial, userReducedPrivateMaterial, params.passphrase, params.originalPasscodeEncryptionCode);
        const backupKeychainPromise = this.addBackupKeychain(bitgoCommonKeychain, userPrivateMaterial, backupReducedPrivateMaterial, params.passphrase, params.originalPasscodeEncryptionCode);
        const bitgoKeychainPromise = this.addBitgoKeychain(bitgoCommonKeychain);
        const [userKeychain, backupKeychain, bitgoKeychain] = await Promise.all([
            userKeychainPromise,
            backupKeychainPromise,
            bitgoKeychainPromise,
        ]);
        // #endregion
        return {
            userKeychain,
            backupKeychain,
            bitgoKeychain,
        };
    }
    // #region keychain utils
    async createParticipantKeychain(participantIndex, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        let source;
        let encryptedPrv = undefined;
        let reducedEncryptedPrv = undefined;
        switch (participantIndex) {
            case typesMPCv2_1.MPCv2PartiesEnum.USER:
            case typesMPCv2_1.MPCv2PartiesEnum.BACKUP:
                source = participantIndex === typesMPCv2_1.MPCv2PartiesEnum.USER ? 'user' : 'backup';
                (0, assert_1.default)(privateMaterial, `Private material is required for ${source} keychain`);
                (0, assert_1.default)(reducedPrivateMaterial, `Reduced private material is required for ${source} keychain`);
                (0, assert_1.default)(passphrase, `Passphrase is required for ${source} keychain`);
                encryptedPrv = this.bitgo.encrypt({
                    input: privateMaterial.toString('base64'),
                    password: passphrase,
                });
                reducedEncryptedPrv = this.bitgo.encrypt({
                    // Buffer.toString('base64') can not be used here as it does not work on the browser.
                    // The browser deals with a Buffer as Uint8Array, therefore in the browser .toString('base64') just creates a comma seperated string of the array values.
                    input: btoa(String.fromCharCode.apply(null, Array.from(new Uint8Array(reducedPrivateMaterial)))),
                    password: passphrase,
                });
                break;
            case typesMPCv2_1.MPCv2PartiesEnum.BITGO:
                source = 'bitgo';
                break;
            default:
                throw new Error('Invalid participant index');
        }
        const recipientKeychainParams = {
            source,
            keyType: 'tss',
            commonKeychain,
            encryptedPrv,
            originalPasscodeEncryptionCode,
            isMPCv2: true,
        };
        const keychains = this.baseCoin.keychains();
        return { ...(await keychains.add(recipientKeychainParams)), reducedEncryptedPrv: reducedEncryptedPrv };
    }
    /**
     * Converts user and backup MPCv1 SigningMaterial to RetrofitData needed by MPCv2 DKG.
     *
     * @param {Object} params - MPCv1 decrypted signing material for user and backup as a json.stringify string and bitgo's Big Si.
     * @returns {{ mpcv2UserKeyShare: DklsTypes.RetrofitData; mpcv2BakcupKeyShare: DklsTypes.RetrofitData }} - the retrofit data needed to start an MPCv2 DKG session.
     */
    getMpcV2RetrofitDataFromMpcV1Keys(params) {
        const mpc = new account_lib_1.Ecdsa();
        const xiList = [
            Array.from((0, sdk_lib_mpc_1.bigIntToBufferBE)(BigInt(1), 32)),
            Array.from((0, sdk_lib_mpc_1.bigIntToBufferBE)(BigInt(2), 32)),
            Array.from((0, sdk_lib_mpc_1.bigIntToBufferBE)(BigInt(3), 32)),
        ];
        return {
            mpcv2UserKeyShare: this.getMpcV2RetrofitDataFromMpcV1Key({
                mpcv1PartyKeyShare: params.mpcv1UserKeyShare,
                mpcv1PartyIndex: 1,
                xiList,
                mpc,
            }),
            mpcv2BackupKeyShare: this.getMpcV2RetrofitDataFromMpcV1Key({
                mpcv1PartyKeyShare: params.mpcv1BackupKeyShare,
                mpcv1PartyIndex: 2,
                xiList,
                mpc,
            }),
        };
    }
    getMpcV2RetrofitDataFromMpcV1Key({ mpcv1PartyKeyShare, mpcv1PartyIndex, xiList, mpc, }) {
        const signingMaterial = JSON.parse(mpcv1PartyKeyShare);
        let keyCombined = undefined;
        switch (mpcv1PartyIndex) {
            case 1:
                (0, assert_1.default)(signingMaterial.backupNShare, 'User MPCv1 key material should have backup NShare.');
                (0, assert_1.default)(signingMaterial.bitgoNShare, 'BitGo MPCv1 key material should have user NShare.');
                keyCombined = mpc.keyCombine(signingMaterial.pShare, [
                    signingMaterial.backupNShare,
                    signingMaterial.bitgoNShare,
                ]);
                break;
            case 2:
                (0, assert_1.default)(signingMaterial.userNShare, 'User MPCv1 key material should have backup NShare.');
                (0, assert_1.default)(signingMaterial.bitgoNShare, 'BitGo MPCv1 key material should have user NShare.');
                keyCombined = mpc.keyCombine(signingMaterial.pShare, [signingMaterial.userNShare, signingMaterial.bitgoNShare]);
                break;
            case 3:
                (0, assert_1.default)(signingMaterial.userNShare, 'User MPCv1 key material should have backup NShare.');
                (0, assert_1.default)(signingMaterial.backupNShare, 'Backup MPCv1 key material should have user NShare.');
                keyCombined = mpc.keyCombine(signingMaterial.pShare, [
                    signingMaterial.userNShare,
                    signingMaterial.backupNShare,
                ]);
                break;
            default:
                throw new Error('Invalid participant index');
        }
        return {
            xShare: keyCombined.xShare,
            xiList: xiList,
        };
    }
    async addUserKeychain(commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.USER, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode);
    }
    async addBackupKeychain(commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.BACKUP, commonKeychain, privateMaterial, reducedPrivateMaterial, passphrase, originalPasscodeEncryptionCode);
    }
    getUserAndBackupSession(m, n, retrofit) {
        if (retrofit) {
            const retrofitData = this.getMpcV2RetrofitDataFromMpcV1Keys({
                mpcv1UserKeyShare: retrofit.decryptedUserKey,
                mpcv1BackupKeyShare: retrofit.decryptedBackupKey,
            });
            const userSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.USER, undefined, retrofitData.mpcv2UserKeyShare);
            const backupSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.BACKUP, undefined, retrofitData.mpcv2BackupKeyShare);
            return { userSession, backupSession };
        }
        const userSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.USER);
        const backupSession = new sdk_lib_mpc_1.DklsDkg.Dkg(n, m, typesMPCv2_1.MPCv2PartiesEnum.BACKUP);
        return { userSession, backupSession };
    }
    async addBitgoKeychain(commonKeychain) {
        return this.createParticipantKeychain(typesMPCv2_1.MPCv2PartiesEnum.BITGO, commonKeychain);
    }
    // #endregion
    // #region generate key request utils
    async sendKeyGenerationRequest(enterprise, round, payload) {
        return this.bitgo
            .post(this.bitgo.url('/mpc/generatekey', 2))
            .send({ enterprise, type: public_types_1.KeyGenTypeEnum.MPCv2, round, payload })
            .result();
    }
    async sendKeyGenerationRound1(enterprise, userGpgPublicKey, backupGpgPublicKey, payload) {
        var _a, _b;
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(userGpgPublicKey), 'User GPG public key is required');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(backupGpgPublicKey), 'Backup GPG public key is required');
        const userMsg1 = (_a = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER)) === null || _a === void 0 ? void 0 : _a.payload;
        (0, assert_1.default)(userMsg1, 'User message 1 not found in broadcast messages');
        const backupMsg1 = (_b = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP)) === null || _b === void 0 ? void 0 : _b.payload;
        (0, assert_1.default)(backupMsg1, 'Backup message 1 not found in broadcast messages');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R1'], {
            userGpgPublicKey,
            backupGpgPublicKey,
            userMsg1: { from: 0, ...userMsg1 },
            backupMsg1: { from: 1, ...backupMsg1 },
            walletId: payload.walletId,
        });
    }
    async sendKeyGenerationRound2(enterprise, sessionId, payload) {
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(sessionId), 'Session ID is required');
        const userMsg2 = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(userMsg2, 'User to Bitgo message 2 not found in P2P messages');
        (0, assert_1.default)(userMsg2.commitment, 'User to Bitgo commitment not found in P2P messages');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(userMsg2.commitment), 'User to Bitgo commitment is required');
        const backupMsg2 = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO);
        (0, assert_1.default)(backupMsg2, 'Backup to Bitgo message 2 not found in P2P messages');
        (0, assert_1.default)(backupMsg2.commitment, 'Backup to Bitgo commitment not found in P2P messages');
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(backupMsg2.commitment), 'Backup to Bitgo commitment is required');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R2'], {
            sessionId,
            userMsg2: {
                from: typesMPCv2_1.MPCv2PartiesEnum.USER,
                to: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
                signature: userMsg2.payload.signature,
                encryptedMessage: userMsg2.payload.encryptedMessage,
            },
            userCommitment2: userMsg2.commitment,
            backupMsg2: {
                from: typesMPCv2_1.MPCv2PartiesEnum.BACKUP,
                to: typesMPCv2_1.MPCv2PartiesEnum.BITGO,
                signature: backupMsg2.payload.signature,
                encryptedMessage: backupMsg2.payload.encryptedMessage,
            },
            backupCommitment2: backupMsg2.commitment,
        });
    }
    async sendKeyGenerationRound3(enterprise, sessionId, payload) {
        var _a, _b, _c, _d;
        (0, assert_1.default)(io_ts_types_1.NonEmptyString.is(sessionId), 'Session ID is required');
        const userMsg3 = (_a = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO)) === null || _a === void 0 ? void 0 : _a.payload;
        (0, assert_1.default)(userMsg3, 'User to Bitgo message 3 not found in P2P messages');
        const backupMsg3 = (_b = payload.p2pMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP && m.to === typesMPCv2_1.MPCv2PartiesEnum.BITGO)) === null || _b === void 0 ? void 0 : _b.payload;
        (0, assert_1.default)(backupMsg3, 'Backup to Bitgo message 3 not found in P2P messages');
        const userMsg4 = (_c = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.USER)) === null || _c === void 0 ? void 0 : _c.payload;
        (0, assert_1.default)(userMsg4, 'User message 1 not found in broadcast messages');
        const backupMsg4 = (_d = payload.broadcastMessages.find((m) => m.from === typesMPCv2_1.MPCv2PartiesEnum.BACKUP)) === null || _d === void 0 ? void 0 : _d.payload;
        (0, assert_1.default)(backupMsg4, 'Backup message 1 not found in broadcast messages');
        return this.sendKeyGenerationRequest(enterprise, public_types_1.MPCv2KeyGenStateEnum['MPCv2-R3'], {
            sessionId,
            userMsg3: { from: 0, to: 2, ...userMsg3 },
            backupMsg3: { from: 1, to: 2, ...backupMsg3 },
            userMsg4: { from: 0, ...userMsg4 },
            backupMsg4: { from: 1, ...backupMsg4 },
        });
    }
    // #endregion
    // #region sign tx request
    /**
     * Signs the transaction associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @param {string} params.mpcv2PartyId - party id for the signer involved in this mpcv2 request (either 0 for user or 1 for backup)
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequest(params) {
        this.bitgo.setRequestTracer(params.reqId);
        return this.signRequestBase(params, baseTypes_1.RequestType.tx);
    }
    /**
     * Signs the message associated to the transaction request.
     * @param {string | TxRequest} params.txRequest - transaction request object or id
     * @param {string} params.prv - decrypted private key
     * @param {string} params.reqId - request id
     * @returns {Promise<TxRequest>} fully signed TxRequest object
     */
    async signTxRequestForMessage(params) {
        this.bitgo.setRequestTracer(params.reqId);
        return this.signRequestBase(params, baseTypes_1.RequestType.message);
    }
    async signRequestBase(params, requestType) {
        const userKeyShare = buffer_1.Buffer.from(params.prv, 'base64');
        const txRequest = typeof params.txRequest === 'string'
            ? await (0, tss_1.getTxRequest)(this.bitgo, this.wallet.id(), params.txRequest, params.reqId)
            : params.txRequest;
        let txOrMessageToSign;
        let derivationPath;
        let bufferContent;
        const [userGpgKey, bitgoGpgPubKey] = await Promise.all([
            (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1'),
            this.getBitgoGpgPubkeyBasedOnFeatureFlags(txRequest.enterpriseId, true, params.reqId).then((pubKey) => pubKey !== null && pubKey !== void 0 ? pubKey : this.bitgoMPCv2PublicGpgKey),
        ]);
        if (!bitgoGpgPubKey) {
            throw new Error('Missing BitGo GPG key for MPCv2');
        }
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions || txRequest.unsignedTxs, 'Unable to find transactions in txRequest');
            const unsignedTx = txRequest.apiVersion === 'full' ? txRequest.transactions[0].unsignedTx : txRequest.unsignedTxs[0];
            txOrMessageToSign = unsignedTx.signableHex;
            derivationPath = unsignedTx.derivationPath;
            bufferContent = buffer_1.Buffer.from(txOrMessageToSign, 'hex');
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            txOrMessageToSign = txRequest.messages[0].messageEncoded;
            derivationPath = txRequest.messages[0].derivationPath || 'm/0';
            bufferContent = buffer_1.Buffer.from(txOrMessageToSign);
        }
        else {
            throw new Error('Invalid request type');
        }
        let hash;
        try {
            hash = this.baseCoin.getHashFunction();
        }
        catch (err) {
            hash = (0, keccak_1.default)('keccak256');
        }
        // check what the encoding is supposed to be for message
        const hashBuffer = hash.update(bufferContent).digest();
        const otherSigner = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, params.mpcv2PartyId ? params.mpcv2PartyId : 0, derivationPath, hashBuffer);
        const userSignerBroadcastMsg1 = await otherSigner.init();
        const signatureShareRound1 = await (0, ecdsaMPCv2_1.getSignatureShareRoundOne)(userSignerBroadcastMsg1, userGpgKey, params.mpcv2PartyId);
        let latestTxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRound1], requestType, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion(), params.reqId);
        (0, assert_1.default)(latestTxRequest.transactions || latestTxRequest.messages, 'Invalid txRequest Object');
        let bitgoToUserMessages1And2;
        if (requestType === baseTypes_1.RequestType.tx) {
            bitgoToUserMessages1And2 = latestTxRequest.transactions[0].signatureShares;
        }
        else {
            bitgoToUserMessages1And2 = latestTxRequest.messages[0].signatureShares;
        }
        // TODO: Use codec for parsing
        const parsedBitGoToUserSigShareRoundOne = JSON.parse(bitgoToUserMessages1And2[bitgoToUserMessages1And2.length - 1].share);
        if (parsedBitGoToUserSigShareRoundOne.type !== 'round1Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound1And2 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundOne)(parsedBitGoToUserSigShareRoundOne, userGpgKey, bitgoGpgPubKey, params.mpcv2PartyId);
        /** Round 2 **/
        const deserializedMessages = sdk_lib_mpc_1.DklsTypes.deserializeMessages(serializedBitGoToUserMessagesRound1And2);
        const userToBitGoMessagesRound2 = otherSigner.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: deserializedMessages.broadcastMessages,
        });
        const userToBitGoMessagesRound3 = otherSigner.handleIncomingMessages({
            p2pMessages: deserializedMessages.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRoundTwo = await (0, ecdsaMPCv2_1.getSignatureShareRoundTwo)(userToBitGoMessagesRound2, userToBitGoMessagesRound3, userGpgKey, bitgoGpgPubKey, params.mpcv2PartyId);
        latestTxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRoundTwo], requestType, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion(), params.reqId);
        (0, assert_1.default)(latestTxRequest.transactions || latestTxRequest.messages, 'Invalid txRequest Object');
        const txRequestSignatureShares = requestType === baseTypes_1.RequestType.tx
            ? latestTxRequest.transactions[0].signatureShares
            : latestTxRequest.messages[0].signatureShares;
        // TODO: Use codec for parsing
        const parsedBitGoToUserSigShareRoundTwo = JSON.parse(txRequestSignatureShares[txRequestSignatureShares.length - 1].share);
        if (parsedBitGoToUserSigShareRoundTwo.type !== 'round2Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound3 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundTwo)(parsedBitGoToUserSigShareRoundTwo, userGpgKey, bitgoGpgPubKey, params.mpcv2PartyId);
        /** Round 3 **/
        const deserializedBitGoToUserMessagesRound3 = sdk_lib_mpc_1.DklsTypes.deserializeMessages({
            p2pMessages: serializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const userToBitGoMessagesRound4 = otherSigner.handleIncomingMessages({
            p2pMessages: deserializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRoundThree = await (0, ecdsaMPCv2_1.getSignatureShareRoundThree)(userToBitGoMessagesRound4, userGpgKey, bitgoGpgPubKey, params.mpcv2PartyId);
        // Submit for final signature share combine
        await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequest.walletId, txRequest.txRequestId, [signatureShareRoundThree], requestType, this.baseCoin.getMPCAlgorithm(), userGpgKey.publicKey, undefined, this.wallet.multisigTypeVersion(), params.reqId);
        return (0, common_1.sendTxRequest)(this.bitgo, txRequest.walletId, txRequest.txRequestId, requestType, params.reqId);
    }
    // #endregion
    // #region formatting utils
    formatBitgoBroadcastMessage(broadcastMessage) {
        return {
            from: broadcastMessage.from,
            payload: { message: broadcastMessage.message, signature: broadcastMessage.signature },
        };
    }
    formatP2PMessage(p2pMessage, commitment) {
        return {
            payload: { encryptedMessage: p2pMessage.encryptedMessage, signature: p2pMessage.signature },
            from: p2pMessage.from,
            to: p2pMessage.to,
            commitment,
        };
    }
    // #endregion
    // #region private utils
    /**
     * Get the hash string and derivation path from the transaction request.
     * @param {TxRequest} txRequest - the transaction request object
     * @param {RequestType} requestType - the request type
     * @returns {{ hashBuffer: Buffer; derivationPath: string }} - the hash string and derivation path
     */
    getHashStringAndDerivationPath(txRequest, requestType = baseTypes_1.RequestType.tx) {
        let txToSign;
        let derivationPath;
        if (requestType === baseTypes_1.RequestType.tx) {
            (0, assert_1.default)(txRequest.transactions && txRequest.transactions.length === 1, 'Unable to find transactions in txRequest');
            txToSign = txRequest.transactions[0].unsignedTx.signableHex;
            derivationPath = txRequest.transactions[0].unsignedTx.derivationPath;
        }
        else if (requestType === baseTypes_1.RequestType.message) {
            // TODO(WP-2176): Add support for message signing
            throw new Error('MPCv2 message signing not supported yet.');
        }
        else {
            throw new Error('Invalid request type, got: ' + requestType);
        }
        let hash;
        try {
            hash = this.baseCoin.getHashFunction();
        }
        catch (err) {
            hash = (0, keccak_1.default)('keccak256');
        }
        const hashBuffer = hash.update(buffer_1.Buffer.from(txToSign, 'hex')).digest();
        return { hashBuffer, derivationPath };
    }
    /**
     * Gets the BitGo and user GPG keys from the BitGo public GPG key and the encrypted user GPG private key.
     * @param {string} bitgoPublicGpgKey  - the BitGo public GPG key
     * @param {string} encryptedUserGpgPrvKey  - the encrypted user GPG private key
     * @param {string} walletPassphrase  - the wallet passphrase
     * @returns {Promise<{ bitgoGpgKey: pgp.Key; userGpgKey: pgp.SerializedKeyPair<string> }>} - the BitGo and user GPG keys
     */
    async getBitgoAndUserGpgKeys(bitgoPublicGpgKey, encryptedUserGpgPrvKey, walletPassphrase) {
        const bitgoGpgKey = await pgp.readKey({ armoredKey: bitgoPublicGpgKey });
        const userDecryptedKey = await pgp.readKey({
            armoredKey: this.bitgo.decrypt({ input: encryptedUserGpgPrvKey, password: walletPassphrase }),
        });
        const userGpgKey = {
            privateKey: userDecryptedKey.armor(),
            publicKey: userDecryptedKey.toPublic().armor(),
        };
        return {
            bitgoGpgKey,
            userGpgKey,
        };
    }
    /**
     * Validates the adata and cyphertext.
     * @param adata string
     * @param cyphertext string
     * @returns void
     * @throws {Error} if the adata or cyphertext is invalid
     */
    validateAdata(adata, cyphertext) {
        let cypherJson;
        try {
            cypherJson = JSON.parse(cyphertext);
        }
        catch (e) {
            throw new Error('Failed to parse cyphertext to JSON, got: ' + cyphertext);
        }
        // using decodeURIComponent to handle special characters
        if (decodeURIComponent(cypherJson.adata) !== decodeURIComponent(adata)) {
            throw new Error('Adata does not match cyphertext adata');
        }
    }
    // #endregion
    // #region external signer
    /** @inheritdoc */
    async signEcdsaMPCv2TssUsingExternalSigner(params, externalSignerMPCv2SigningRound1Generator, externalSignerMPCv2SigningRound2Generator, externalSignerMPCv2SigningRound3Generator, requestType = baseTypes_1.RequestType.tx) {
        var _a;
        const { txRequest, reqId } = params;
        let txRequestResolved;
        // TODO(WP-2176): Add support for message signing
        (0, assert_1.default)(requestType === baseTypes_1.RequestType.tx, 'Only transaction signing is supported for external signer, got: ' + requestType);
        if (typeof txRequest === 'string') {
            txRequestResolved = await (0, tss_1.getTxRequest)(this.bitgo, this.wallet.id(), txRequest, reqId);
        }
        else {
            txRequestResolved = txRequest;
        }
        const bitgoPublicGpgKey = (_a = (await this.getBitgoGpgPubkeyBasedOnFeatureFlags(txRequestResolved.enterpriseId, true, reqId))) !== null && _a !== void 0 ? _a : this.bitgoMPCv2PublicGpgKey;
        if (!bitgoPublicGpgKey) {
            throw new Error('Missing BitGo GPG key for MPCv2');
        }
        // round 1
        const { signatureShareRound1, userGpgPubKey, encryptedRound1Session, encryptedUserGpgPrvKey } = await externalSignerMPCv2SigningRound1Generator({ txRequest: txRequestResolved });
        const round1TxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequestResolved.walletId, txRequestResolved.txRequestId, [signatureShareRound1], requestType, this.baseCoin.getMPCAlgorithm(), userGpgPubKey, undefined, this.wallet.multisigTypeVersion(), reqId);
        // round 2
        const { signatureShareRound2, encryptedRound2Session } = await externalSignerMPCv2SigningRound2Generator({
            txRequest: round1TxRequest,
            encryptedRound1Session,
            encryptedUserGpgPrvKey,
            bitgoPublicGpgKey: bitgoPublicGpgKey.armor(),
        });
        const round2TxRequest = await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequestResolved.walletId, txRequestResolved.txRequestId, [signatureShareRound2], requestType, this.baseCoin.getMPCAlgorithm(), userGpgPubKey, undefined, this.wallet.multisigTypeVersion(), reqId);
        (0, assert_1.default)(round2TxRequest.transactions && round2TxRequest.transactions[0].signatureShares, 'Missing signature shares in round 2 txRequest');
        // round 3
        const { signatureShareRound3 } = await externalSignerMPCv2SigningRound3Generator({
            txRequest: round2TxRequest,
            encryptedRound2Session,
            encryptedUserGpgPrvKey,
            bitgoPublicGpgKey: bitgoPublicGpgKey.armor(),
        });
        await (0, common_1.sendSignatureShareV2)(this.bitgo, txRequestResolved.walletId, txRequestResolved.txRequestId, [signatureShareRound3], requestType, this.baseCoin.getMPCAlgorithm(), userGpgPubKey, undefined, this.wallet.multisigTypeVersion(), reqId);
        return (0, common_1.sendTxRequest)(this.bitgo, txRequestResolved.walletId, txRequestResolved.txRequestId, requestType, reqId);
    }
    async createOfflineRound1Share(params) {
        const { prv, walletPassphrase, txRequest } = params;
        const { hashBuffer, derivationPath } = this.getHashStringAndDerivationPath(txRequest);
        const adata = `${hashBuffer.toString('hex')}:${derivationPath}`;
        const userKeyShare = buffer_1.Buffer.from(prv, 'base64');
        const userGpgKey = await (0, opengpgUtils_1.generateGPGKeyPair)('secp256k1');
        const userSigner = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, 0, derivationPath, hashBuffer);
        const userSignerBroadcastMsg1 = await userSigner.init();
        const signatureShareRound1 = await (0, ecdsaMPCv2_1.getSignatureShareRoundOne)(userSignerBroadcastMsg1, userGpgKey);
        const session = userSigner.getSession();
        const encryptedRound1Session = this.bitgo.encrypt({ input: session, password: walletPassphrase, adata });
        const userGpgPubKey = userGpgKey.publicKey;
        const encryptedUserGpgPrvKey = this.bitgo.encrypt({
            input: userGpgKey.privateKey,
            password: walletPassphrase,
            adata,
        });
        return { signatureShareRound1, userGpgPubKey, encryptedRound1Session, encryptedUserGpgPrvKey };
    }
    async createOfflineRound2Share(params) {
        var _a;
        const { prv, walletPassphrase, encryptedUserGpgPrvKey, encryptedRound1Session, bitgoPublicGpgKey, txRequest } = params;
        const { hashBuffer, derivationPath } = this.getHashStringAndDerivationPath(txRequest);
        const adata = `${hashBuffer.toString('hex')}:${derivationPath}`;
        const { bitgoGpgKey, userGpgKey } = await this.getBitgoAndUserGpgKeys(bitgoPublicGpgKey, encryptedUserGpgPrvKey, walletPassphrase);
        const signatureShares = (_a = txRequest.transactions) === null || _a === void 0 ? void 0 : _a[0].signatureShares;
        (0, assert_1.default)(signatureShares, 'Missing signature shares in round 1 txRequest');
        const parsedBitGoToUserSigShareRoundOne = JSON.parse(signatureShares[signatureShares.length - 1].share);
        if (parsedBitGoToUserSigShareRoundOne.type !== 'round1Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound1 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundOne)(parsedBitGoToUserSigShareRoundOne, userGpgKey, bitgoGpgKey);
        const round1Session = this.bitgo.decrypt({ input: encryptedRound1Session, password: walletPassphrase });
        this.validateAdata(adata, encryptedRound1Session);
        const userKeyShare = buffer_1.Buffer.from(prv, 'base64');
        const userSigner = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, 0, derivationPath, hashBuffer);
        await userSigner.setSession(round1Session);
        const deserializedMessages = sdk_lib_mpc_1.DklsTypes.deserializeMessages(serializedBitGoToUserMessagesRound1);
        const userToBitGoMessagesRound2 = userSigner.handleIncomingMessages({
            p2pMessages: [],
            broadcastMessages: deserializedMessages.broadcastMessages,
        });
        const userToBitGoMessagesRound3 = userSigner.handleIncomingMessages({
            p2pMessages: deserializedMessages.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRound2 = await (0, ecdsaMPCv2_1.getSignatureShareRoundTwo)(userToBitGoMessagesRound2, userToBitGoMessagesRound3, userGpgKey, bitgoGpgKey);
        const session = userSigner.getSession();
        const encryptedRound2Session = this.bitgo.encrypt({ input: session, password: walletPassphrase, adata });
        return {
            signatureShareRound2,
            encryptedRound2Session,
        };
    }
    async createOfflineRound3Share(params) {
        var _a;
        const { prv, walletPassphrase, encryptedUserGpgPrvKey, encryptedRound2Session, bitgoPublicGpgKey, txRequest } = params;
        (0, assert_1.default)(txRequest.transactions && txRequest.transactions.length === 1, 'Unable to find transactions in txRequest');
        const { hashBuffer, derivationPath } = this.getHashStringAndDerivationPath(txRequest);
        const adata = `${hashBuffer.toString('hex')}:${derivationPath}`;
        const { bitgoGpgKey, userGpgKey } = await this.getBitgoAndUserGpgKeys(bitgoPublicGpgKey, encryptedUserGpgPrvKey, walletPassphrase);
        const signatureShares = (_a = txRequest.transactions) === null || _a === void 0 ? void 0 : _a[0].signatureShares;
        (0, assert_1.default)(signatureShares, 'Missing signature shares in round 2 txRequest');
        const parsedBitGoToUserSigShareRoundTwo = JSON.parse(signatureShares[signatureShares.length - 1].share);
        if (parsedBitGoToUserSigShareRoundTwo.type !== 'round2Output') {
            throw new Error('Unexpected signature share response. Unable to parse data.');
        }
        const serializedBitGoToUserMessagesRound3 = await (0, ecdsaMPCv2_1.verifyBitGoMessagesAndSignaturesRoundTwo)(parsedBitGoToUserSigShareRoundTwo, userGpgKey, bitgoGpgKey);
        const deserializedBitGoToUserMessagesRound3 = sdk_lib_mpc_1.DklsTypes.deserializeMessages({
            p2pMessages: serializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const round2Session = this.bitgo.decrypt({ input: encryptedRound2Session, password: walletPassphrase });
        this.validateAdata(adata, encryptedRound2Session);
        const userKeyShare = buffer_1.Buffer.from(prv, 'base64');
        const userSigner = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, 0, derivationPath, hashBuffer);
        await userSigner.setSession(round2Session);
        const userToBitGoMessagesRound4 = userSigner.handleIncomingMessages({
            p2pMessages: deserializedBitGoToUserMessagesRound3.p2pMessages,
            broadcastMessages: [],
        });
        const signatureShareRound3 = await (0, ecdsaMPCv2_1.getSignatureShareRoundThree)(userToBitGoMessagesRound4, userGpgKey, bitgoGpgKey);
        return { signatureShareRound3 };
    }
}
exports.EcdsaMPCv2Utils = EcdsaMPCv2Utils;
/**
 * Checks if the given key share, when decrypted, contains valid GG18 signing material.
 *
 * @param {string} keyShare - The encrypted key share string.
 * @param {string|undefined} walletPassphrase - The passphrase used to decrypt the key share
 * @returns {boolean} - Returns `true` if the decrypted data contains valid signing material, otherwise `false`.
 */
function isGG18SigningMaterial(keyShare, walletPassphrase) {
    const prv = sjcl.decrypt(walletPassphrase, keyShare);
    try {
        const signingMaterial = JSON.parse(prv);
        return (signingMaterial.pShare &&
            signingMaterial.bitgoNShare &&
            (signingMaterial.userNShare || signingMaterial.backupNShare));
    }
    catch (error) {
        return false;
    }
}
exports.isGG18SigningMaterial = isGG18SigningMaterial;
/**
 * Retrieves the MPC v2 recovery key shares from the provided user and backup key shares.
 *
 * @param {string} userPublicOrPrivateKeyShare
 * @param {string} backupPrivateOrPublicKeyShare
 * @param {string} [walletPassphrase] - The passphrase used to decrypt the key shares
 * @returns {Promise<{ userKeyShare: KeyShare, backupKeyShare: KeyShare, commonKeyChain: string }>}
 *
 * @async
 */
async function getMpcV2RecoveryKeyShares(userPublicOrPrivateKeyShare, backupPrivateOrPublicKeyShare, walletPassphrase) {
    const userCompressedPrv = buffer_1.Buffer.from(sjcl.decrypt(walletPassphrase, userPublicOrPrivateKeyShare), 'base64');
    const bakcupCompressedPrv = buffer_1.Buffer.from(sjcl.decrypt(walletPassphrase, backupPrivateOrPublicKeyShare), 'base64');
    const userPrvJSON = sdk_lib_mpc_1.DklsTypes.getDecodedReducedKeyShare(userCompressedPrv);
    const backupPrvJSON = sdk_lib_mpc_1.DklsTypes.getDecodedReducedKeyShare(bakcupCompressedPrv);
    const userKeyRetrofit = {
        xShare: {
            x: buffer_1.Buffer.from(userPrvJSON.prv).toString('hex'),
            y: buffer_1.Buffer.from(userPrvJSON.pub).toString('hex'),
            chaincode: buffer_1.Buffer.from(userPrvJSON.rootChainCode).toString('hex'),
        },
        xiList: userPrvJSON.xList.slice(0, 2),
    };
    const backupKeyRetrofit = {
        xShare: {
            x: buffer_1.Buffer.from(backupPrvJSON.prv).toString('hex'),
            y: buffer_1.Buffer.from(backupPrvJSON.pub).toString('hex'),
            chaincode: buffer_1.Buffer.from(backupPrvJSON.rootChainCode).toString('hex'),
        },
        xiList: backupPrvJSON.xList.slice(0, 2),
    };
    const [user, backup] = await sdk_lib_mpc_1.DklsUtils.generate2of2KeyShares(userKeyRetrofit, backupKeyRetrofit);
    const userKeyShare = user.getKeyShare();
    const backupKeyShare = backup.getKeyShare();
    const commonKeyChain = sdk_lib_mpc_1.DklsTypes.getCommonKeychain(userKeyShare);
    return { userKeyShare, backupKeyShare, commonKeyChain };
}
exports.getMpcV2RecoveryKeyShares = getMpcV2RecoveryKeyShares;
/**
 * Signs a message hash using MPC v2 recovery key shares.
 *
 * @param {Buffer} messageHash
 * @param {Buffer} userKeyShare
 * @param {Buffer} backupKeyShare
 * @param {string} commonKeyChain
 * @returns {Promise<{ recid: number, r: string, s: string, y: string }>}
 *
 * @async
 */
async function signRecoveryMpcV2(messageHash, userKeyShare, backupKeyShare, commonKeyChain) {
    const userDsg = new sdk_lib_mpc_1.DklsDsg.Dsg(userKeyShare, 0, 'm/0', messageHash);
    const backupDsg = new sdk_lib_mpc_1.DklsDsg.Dsg(backupKeyShare, 1, 'm/0', messageHash);
    const signatureString = sdk_lib_mpc_1.DklsUtils.verifyAndConvertDklsSignature(messageHash, (await sdk_lib_mpc_1.DklsUtils.executeTillRound(5, userDsg, backupDsg)), commonKeyChain, 'm/0', undefined, false);
    const sigParts = signatureString.split(':');
    return {
        recid: parseInt(sigParts[0], 10),
        r: sigParts[1],
        s: sigParts[2],
        y: sigParts[3],
    };
}
exports.signRecoveryMpcV2 = signRecoveryMpcV2;
//# sourceMappingURL=data:application/json;base64,
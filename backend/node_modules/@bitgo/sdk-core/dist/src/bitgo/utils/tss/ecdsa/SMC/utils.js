"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MPCv2SMCUtils = void 0;
const assert_1 = __importDefault(require("assert"));
const public_types_1 = require("@bitgo/public-types");
const ecdsaMPCv2_1 = require("../ecdsaMPCv2");
const __1 = require("../../../..");
class MPCv2SMCUtils {
    constructor(bitgo, baseCoin) {
        this.baseCoin = baseCoin;
        this.MPCv2Utils = new ecdsaMPCv2_1.EcdsaMPCv2Utils(bitgo, baseCoin);
    }
    async keyGenRound1(enterprise, payload) {
        (0, assert_1.default)(payload.state === public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data, `Invalid state for round 1, expected: ${public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound1Data}, got: ${payload.state}`);
        (0, __1.decodeOrElse)(public_types_1.OVC2ToBitgoRound1Payload.name, public_types_1.OVC2ToBitgoRound1Payload, payload, (errors) => {
            throw new Error(`error(s) parsing payload: ${errors}`);
        });
        const ovc1 = payload.ovc[public_types_1.OVCIndexEnum.ONE];
        const ovc2 = payload.ovc[public_types_1.OVCIndexEnum.TWO];
        const userGpgPublicKey = ovc1.gpgPubKey;
        const backupGpgPublicKey = ovc2.gpgPubKey;
        const messages = { p2pMessages: [], broadcastMessages: [ovc1.ovcMsg1, ovc2.ovcMsg1] };
        const result = await this.MPCv2Utils.sendKeyGenerationRound1(enterprise, userGpgPublicKey, backupGpgPublicKey, messages);
        const response = {
            state: public_types_1.KeyCreationMPCv2StateEnum.WaitingForOVC1Round2Data,
            tssVersion: payload.tssVersion,
            walletType: payload.walletType,
            coin: payload.coin,
            ovc: payload.ovc,
            platform: {
                walletGpgPubKeySigs: result.walletGpgPubKeySigs,
                sessionId: result.sessionId,
                bitgoMsg1: this.MPCv2Utils.formatBitgoBroadcastMessage(result.bitgoMsg1),
                ovc: {
                    [public_types_1.OVCIndexEnum.ONE]: { bitgoToOvcMsg2: this.MPCv2Utils.formatP2PMessage(result.bitgoToUserMsg2) },
                    [public_types_1.OVCIndexEnum.TWO]: { bitgoToOvcMsg2: this.MPCv2Utils.formatP2PMessage(result.bitgoToBackupMsg2) },
                },
            },
        };
        return (0, __1.decodeOrElse)(public_types_1.BitgoToOVC1Round1Response.name, public_types_1.BitgoToOVC1Round1Response, response, (errors) => {
            throw new Error(`error(s) parsing response: ${errors}`);
        });
    }
    async keyGenRound2(enterprise, payload) {
        (0, assert_1.default)(payload.state === public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data, `Invalid state for round 2, expected: ${public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound2Data}, got: ${payload.state}`);
        (0, __1.decodeOrElse)(public_types_1.OVC2ToBitgoRound2Payload.name, public_types_1.OVC2ToBitgoRound2Payload, payload, (errors) => {
            throw new Error(`error(s) parsing payload: ${errors}`);
        });
        const ovc1 = payload.ovc[public_types_1.OVCIndexEnum.ONE];
        const ovc2 = payload.ovc[public_types_1.OVCIndexEnum.TWO];
        const sessionId = payload.platform.sessionId;
        const messages = { p2pMessages: [ovc1.ovcToBitgoMsg2, ovc2.ovcToBitgoMsg2], broadcastMessages: [] };
        const result = await this.MPCv2Utils.sendKeyGenerationRound2(enterprise, sessionId, messages);
        const response = {
            state: public_types_1.KeyCreationMPCv2StateEnum.WaitingForOVC1Round3aData,
            tssVersion: payload.tssVersion,
            walletType: payload.walletType,
            coin: payload.coin,
            ovc: payload.ovc,
            platform: {
                ...payload.platform,
                sessionId: result.sessionId,
                bitgoCommitment2: result.bitgoCommitment2,
                ovc: {
                    [public_types_1.OVCIndexEnum.ONE]: {
                        ...payload.platform.ovc[public_types_1.OVCIndexEnum.ONE],
                        bitgoToOvcMsg3: this.MPCv2Utils.formatP2PMessage(result.bitgoToUserMsg3),
                    },
                    [public_types_1.OVCIndexEnum.TWO]: {
                        ...payload.platform.ovc[public_types_1.OVCIndexEnum.TWO],
                        bitgoToOvcMsg3: this.MPCv2Utils.formatP2PMessage(result.bitgoToBackupMsg3),
                    },
                },
            },
        };
        return (0, __1.decodeOrElse)(public_types_1.BitgoToOVC1Round2Response.name, public_types_1.BitgoToOVC1Round2Response, response, (errors) => {
            throw new Error(`error(s) parsing response: ${errors}`);
        });
    }
    async keyGenRound3(enterprise, payload) {
        (0, assert_1.default)(payload.state === public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data, `Invalid state for round 3, expected: ${public_types_1.KeyCreationMPCv2StateEnum.WaitingForBitgoRound3Data}, got: ${payload.state}`);
        (0, __1.decodeOrElse)(public_types_1.OVC1ToBitgoRound3Payload.name, public_types_1.OVC1ToBitgoRound3Payload, payload, (errors) => {
            throw new Error(`error(s) parsing payload: ${errors}`);
        });
        const ovc1 = payload.ovc[public_types_1.OVCIndexEnum.ONE];
        const ovc2 = payload.ovc[public_types_1.OVCIndexEnum.TWO];
        const sessionId = payload.platform.sessionId;
        const messages = {
            p2pMessages: [ovc1.ovcToBitgoMsg3, ovc2.ovcToBitgoMsg3],
            broadcastMessages: [ovc1.ovcMsg4, ovc2.ovcMsg4],
        };
        const result = await this.MPCv2Utils.sendKeyGenerationRound3(enterprise, sessionId, messages);
        const keychains = this.baseCoin.keychains();
        const bitgoKeychain = await keychains.add({
            source: 'bitgo',
            keyType: 'tss',
            commonKeychain: result.commonKeychain,
            isMPCv2: true,
        });
        const response = {
            state: public_types_1.KeyCreationMPCv2StateEnum.WaitingForOVC1GenerateKey,
            bitGoKeyId: bitgoKeychain.id,
            tssVersion: payload.tssVersion,
            walletType: payload.walletType,
            coin: payload.coin,
            ovc: payload.ovc,
            platform: {
                ...payload.platform,
                commonKeychain: result.commonKeychain,
                bitgoMsg4: this.MPCv2Utils.formatBitgoBroadcastMessage(result.bitgoMsg4),
            },
        };
        return (0, __1.decodeOrElse)(public_types_1.BitgoToOVC1Round3Response.name, public_types_1.BitgoToOVC1Round3Response, response, (errors) => {
            throw new Error(`error(s) parsing response: ${errors}`);
        });
    }
    async uploadClientKeys(bitgoKeyId, userCommonKeychain, backupCommonKeychain) {
        (0, assert_1.default)(userCommonKeychain === backupCommonKeychain, 'Common keychain mismatch between the user and backup keychains');
        const keychains = this.baseCoin.keychains();
        const bitgoKeychain = await keychains.get({ id: bitgoKeyId });
        (0, assert_1.default)(bitgoKeychain, 'Keychain not found');
        (0, assert_1.default)(bitgoKeychain.source === 'bitgo', 'The keychain is not a BitGo keychain');
        (0, assert_1.default)(bitgoKeychain.type === 'tss', 'BitGo keychain is not a TSS keychain');
        (0, assert_1.default)(bitgoKeychain.commonKeychain, 'BitGo keychain does not have a common keychain');
        (0, assert_1.default)(bitgoKeychain.commonKeychain === userCommonKeychain, 'Common keychain mismatch between the OVCs and BitGo');
        const userKeychainPromise = keychains.add({
            source: 'user',
            keyType: 'tss',
            commonKeychain: userCommonKeychain,
            isMPCv2: true,
        });
        const backupKeychainPromise = keychains.add({
            source: 'backup',
            keyType: 'tss',
            commonKeychain: backupCommonKeychain,
            isMPCv2: true,
        });
        const [userKeychain, backupKeychain] = await Promise.all([userKeychainPromise, backupKeychainPromise]);
        return { userKeychain, backupKeychain, bitgoKeychain };
    }
}
exports.MPCv2SMCUtils = MPCv2SMCUtils;
//# sourceMappingURL=data:application/json;base64,
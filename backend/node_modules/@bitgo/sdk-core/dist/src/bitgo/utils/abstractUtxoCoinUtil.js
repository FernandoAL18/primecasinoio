"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUtxoCoinScriptTypesForWalletType = exports.getUtxoCoinScriptTypes2Of3 = exports.inferAddressType = void 0;
const assert_1 = __importDefault(require("assert"));
const statics_1 = require("@bitgo/statics");
const utxolib = __importStar(require("@bitgo/utxo-lib"));
function inferAddressType(addressDetails) {
    return utxolib.bitgo.isChainCode(addressDetails.chain)
        ? utxolib.bitgo.scriptTypeForChain(addressDetails.chain)
        : null;
}
exports.inferAddressType = inferAddressType;
/**
 * Get the supported 2 of 3 script types for a given utxo coin
 */
function getUtxoCoinScriptTypes2Of3(coinName) {
    const coin = statics_1.coins.get(coinName);
    (0, assert_1.default)(coin instanceof statics_1.UtxoCoin, `coin ${coinName} is not a utxo coin`);
    const network = utxolib.networks[coin.network.utxolibName];
    return utxolib.bitgo.outputScripts.scriptTypes2Of3.filter((v) => utxolib.bitgo.outputScripts.isSupportedScriptType(network, v));
}
exports.getUtxoCoinScriptTypes2Of3 = getUtxoCoinScriptTypes2Of3;
/**
 * Check if script type is enabled for a given walletType and network
 * @param network
 * @param walletType
 * @param scriptType
 */
function isEnabledAddressType(network, walletType, scriptType) {
    if (!utxolib.bitgo.outputScripts.isSupportedScriptType(network, scriptType)) {
        return false;
    }
    if (scriptType === 'p2trMusig2') {
        return walletType === 'hot' || (walletType === 'cold' && utxolib.isTestnet(network));
    }
    return true;
}
/**
 * Get the supported 2 of 3 script types for a given utxo coin and wallet type
 * @param coinName
 * @param walletType
 */
function getUtxoCoinScriptTypesForWalletType(coinName, walletType) {
    const scriptTypes = getUtxoCoinScriptTypes2Of3(coinName);
    const coin = statics_1.coins.get(coinName);
    (0, assert_1.default)(coin instanceof statics_1.UtxoCoin, `coin ${coinName} is not a utxo coin`);
    const network = utxolib.networks[coin.network.utxolibName];
    return scriptTypes.filter((scriptType) => isEnabledAddressType(network, walletType, scriptType));
}
exports.getUtxoCoinScriptTypesForWalletType = getUtxoCoinScriptTypesForWalletType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3RVdHhvQ29pblV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vdXRpbHMvYWJzdHJhY3RVdHhvQ29pblV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEI7QUFDNUIsNENBQWlEO0FBQ2pELHlEQUEyQztBQUkzQyxTQUFnQixnQkFBZ0IsQ0FBQyxjQUFpQztJQUNoRSxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUN4RCxDQUFDLENBQUMsSUFBSSxDQUFDO0FBQ1gsQ0FBQztBQUpELDRDQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQiwwQkFBMEIsQ0FBQyxRQUFnQjtJQUN6RCxNQUFNLElBQUksR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLFlBQVksa0JBQVEsRUFBRSxRQUFRLFFBQVEscUJBQXFCLENBQUMsQ0FBQztJQUN4RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBa0MsQ0FBQyxDQUFDO0lBQ2xGLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQzlELE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FDOUQsQ0FBQztBQUNKLENBQUM7QUFQRCxnRUFPQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBUyxvQkFBb0IsQ0FBQyxPQUF3QixFQUFFLFVBQXNCLEVBQUUsVUFBMEI7SUFDeEcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTtRQUMzRSxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxVQUFVLEtBQUssWUFBWSxFQUFFO1FBQy9CLE9BQU8sVUFBVSxLQUFLLEtBQUssSUFBSSxDQUFDLFVBQVUsS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ3RGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLG1DQUFtQyxDQUNqRCxRQUFnQixFQUNoQixVQUFzQjtJQUV0QixNQUFNLFdBQVcsR0FBRywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV6RCxNQUFNLElBQUksR0FBRyxlQUFLLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLFlBQVksa0JBQVEsRUFBRSxRQUFRLFFBQVEscUJBQXFCLENBQUMsQ0FBQztJQUN4RSxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBa0MsQ0FBQyxDQUFDO0lBRWxGLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUE0QixDQUFDLENBQUMsQ0FBQztBQUNySCxDQUFDO0FBWEQsa0ZBV0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgeyBjb2lucywgVXR4b0NvaW4gfSBmcm9tICdAYml0Z28vc3RhdGljcyc7XG5pbXBvcnQgKiBhcyB1dHhvbGliIGZyb20gJ0BiaXRnby91dHhvLWxpYic7XG5pbXBvcnQgU2NyaXB0VHlwZTJPZjMgPSB1dHhvbGliLmJpdGdvLm91dHB1dFNjcmlwdHMuU2NyaXB0VHlwZTJPZjM7XG5pbXBvcnQgeyBXYWxsZXRUeXBlIH0gZnJvbSAnLi4vd2FsbGV0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGluZmVyQWRkcmVzc1R5cGUoYWRkcmVzc0RldGFpbHM6IHsgY2hhaW46IG51bWJlciB9KTogU2NyaXB0VHlwZTJPZjMgfCBudWxsIHtcbiAgcmV0dXJuIHV0eG9saWIuYml0Z28uaXNDaGFpbkNvZGUoYWRkcmVzc0RldGFpbHMuY2hhaW4pXG4gICAgPyB1dHhvbGliLmJpdGdvLnNjcmlwdFR5cGVGb3JDaGFpbihhZGRyZXNzRGV0YWlscy5jaGFpbilcbiAgICA6IG51bGw7XG59XG5cbi8qKlxuICogR2V0IHRoZSBzdXBwb3J0ZWQgMiBvZiAzIHNjcmlwdCB0eXBlcyBmb3IgYSBnaXZlbiB1dHhvIGNvaW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFV0eG9Db2luU2NyaXB0VHlwZXMyT2YzKGNvaW5OYW1lOiBzdHJpbmcpOiB1dHhvbGliLmJpdGdvLm91dHB1dFNjcmlwdHMuU2NyaXB0VHlwZTJPZjNbXSB7XG4gIGNvbnN0IGNvaW4gPSBjb2lucy5nZXQoY29pbk5hbWUpO1xuICBhc3NlcnQoY29pbiBpbnN0YW5jZW9mIFV0eG9Db2luLCBgY29pbiAke2NvaW5OYW1lfSBpcyBub3QgYSB1dHhvIGNvaW5gKTtcbiAgY29uc3QgbmV0d29yayA9IHV0eG9saWIubmV0d29ya3NbY29pbi5uZXR3b3JrLnV0eG9saWJOYW1lIGFzIHV0eG9saWIuTmV0d29ya05hbWVdO1xuICByZXR1cm4gdXR4b2xpYi5iaXRnby5vdXRwdXRTY3JpcHRzLnNjcmlwdFR5cGVzMk9mMy5maWx0ZXIoKHYpID0+XG4gICAgdXR4b2xpYi5iaXRnby5vdXRwdXRTY3JpcHRzLmlzU3VwcG9ydGVkU2NyaXB0VHlwZShuZXR3b3JrLCB2KVxuICApO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHNjcmlwdCB0eXBlIGlzIGVuYWJsZWQgZm9yIGEgZ2l2ZW4gd2FsbGV0VHlwZSBhbmQgbmV0d29ya1xuICogQHBhcmFtIG5ldHdvcmtcbiAqIEBwYXJhbSB3YWxsZXRUeXBlXG4gKiBAcGFyYW0gc2NyaXB0VHlwZVxuICovXG5mdW5jdGlvbiBpc0VuYWJsZWRBZGRyZXNzVHlwZShuZXR3b3JrOiB1dHhvbGliLk5ldHdvcmssIHdhbGxldFR5cGU6IFdhbGxldFR5cGUsIHNjcmlwdFR5cGU6IFNjcmlwdFR5cGUyT2YzKTogYm9vbGVhbiB7XG4gIGlmICghdXR4b2xpYi5iaXRnby5vdXRwdXRTY3JpcHRzLmlzU3VwcG9ydGVkU2NyaXB0VHlwZShuZXR3b3JrLCBzY3JpcHRUeXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoc2NyaXB0VHlwZSA9PT0gJ3AydHJNdXNpZzInKSB7XG4gICAgcmV0dXJuIHdhbGxldFR5cGUgPT09ICdob3QnIHx8ICh3YWxsZXRUeXBlID09PSAnY29sZCcgJiYgdXR4b2xpYi5pc1Rlc3RuZXQobmV0d29yaykpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgc3VwcG9ydGVkIDIgb2YgMyBzY3JpcHQgdHlwZXMgZm9yIGEgZ2l2ZW4gdXR4byBjb2luIGFuZCB3YWxsZXQgdHlwZVxuICogQHBhcmFtIGNvaW5OYW1lXG4gKiBAcGFyYW0gd2FsbGV0VHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXR4b0NvaW5TY3JpcHRUeXBlc0ZvcldhbGxldFR5cGUoXG4gIGNvaW5OYW1lOiBzdHJpbmcsXG4gIHdhbGxldFR5cGU6IFdhbGxldFR5cGVcbik6IHV0eG9saWIuYml0Z28ub3V0cHV0U2NyaXB0cy5TY3JpcHRUeXBlMk9mM1tdIHtcbiAgY29uc3Qgc2NyaXB0VHlwZXMgPSBnZXRVdHhvQ29pblNjcmlwdFR5cGVzMk9mMyhjb2luTmFtZSk7XG5cbiAgY29uc3QgY29pbiA9IGNvaW5zLmdldChjb2luTmFtZSk7XG4gIGFzc2VydChjb2luIGluc3RhbmNlb2YgVXR4b0NvaW4sIGBjb2luICR7Y29pbk5hbWV9IGlzIG5vdCBhIHV0eG8gY29pbmApO1xuICBjb25zdCBuZXR3b3JrID0gdXR4b2xpYi5uZXR3b3Jrc1tjb2luLm5ldHdvcmsudXR4b2xpYk5hbWUgYXMgdXR4b2xpYi5OZXR3b3JrTmFtZV07XG5cbiAgcmV0dXJuIHNjcmlwdFR5cGVzLmZpbHRlcigoc2NyaXB0VHlwZSkgPT4gaXNFbmFibGVkQWRkcmVzc1R5cGUobmV0d29yaywgd2FsbGV0VHlwZSwgc2NyaXB0VHlwZSBhcyBTY3JpcHRUeXBlMk9mMykpO1xufVxuIl19
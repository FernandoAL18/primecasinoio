"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingWallet = void 0;
const utils_1 = require("../utils");
class StakingWallet {
    constructor(wallet, isEthTss) {
        this.wallet = wallet;
        this.bitgo = wallet.bitgo;
        this.tssUtil = new utils_1.TssUtils(this.bitgo, this.wallet.baseCoin, this.wallet);
        this.isEthTss = isEthTss;
    }
    get walletId() {
        return this.wallet.id();
    }
    get coin() {
        return this.wallet.baseCoin.tokenConfig ? this.wallet.baseCoin.tokenConfig.type : this.wallet.coin();
    }
    /**
     * Stake coins
     * @param options - stake options
     * @return StakingRequest
     */
    async stake(options) {
        return await this.createStakingRequest(options, 'STAKE');
    }
    /**
     * Unstake coins
     * @param options - unstake options
     * @return StakingRequest
     */
    async unstake(options) {
        return await this.createStakingRequest(options, 'UNSTAKE');
    }
    /**
     * Submit a request to switch the validator used for a specific delegation
     * This will create a new delegation with the new validator address and mark the old delegation as inactive
     * @param options - switch validator options
     * @return StakingRequest
     */
    async switchValidator(options) {
        return await this.createStakingRequest(options, 'SWITCH_VALIDATOR');
    }
    /**
     * Submit a request to claim rewards for a specific delegation
     * @param options - claim rewards options
     * @return StakingRequest
     */
    async claimRewards(options) {
        return await this.createStakingRequest(options, 'CLAIM_REWARDS');
    }
    /**
     * Cancel staking request
     * @param stakingRequestId - id of the staking request to cancel
     * @return StakingRequest
     */
    async cancelStakingRequest(stakingRequestId) {
        return await this.bitgo.del(this.bitgo.microservicesUrl(this.stakingRequestUrl(stakingRequestId))).result();
    }
    /**
     * Fetch delegations for a specific wallet
     * @param options - unstake options
     * @return StakingRequest
     */
    async delegations(options) {
        return await this.getDelegations(options);
    }
    /**
     * Get a staking request by ID
     * @param stakingRequestId - id of the staking request to retrieve
     * @return StakingRequest
     */
    async getStakingRequest(stakingRequestId) {
        return await this.bitgo.get(this.bitgo.microservicesUrl(this.stakingRequestUrl(stakingRequestId))).result();
    }
    /**
     * Get transactions ready to sign
     * @param stakingRequestId
     * @return TransactionsReadyToSign
     */
    async getTransactionsReadyToSign(stakingRequestId) {
        const stakingRequest = await this.getStakingRequest(stakingRequestId);
        const readyToSign = stakingRequest.transactions.filter((transaction) => transaction.status === `READY`);
        const newTransactions = stakingRequest.transactions.filter((transaction) => transaction.status === `NEW`);
        return Promise.resolve({
            allSigningComplete: stakingRequest.transactions.length > 0 && newTransactions.length === 0 && readyToSign.length === 0,
            transactions: readyToSign,
        });
    }
    /**
     * Build the staking transaction
     * If TSS delete signature shares, else expand build params and then build
     * @param transaction - staking transaction to build
     */
    async build(transaction) {
        if ((this.wallet.baseCoin.supportsTss() && this.wallet.baseCoin.getFamily() !== 'eth') || this.isEthTss) {
            if (!transaction.txRequestId) {
                throw new Error('txRequestId is required to sign and send');
            }
            // delete signature shares before signing for transaction request API
            await this.tssUtil.deleteSignatureShares(transaction.txRequestId);
            return {
                transaction: transaction,
                result: {
                    walletId: this.walletId,
                    txRequestId: transaction.txRequestId,
                },
            };
        }
        else {
            transaction = await this.expandBuildParams(transaction);
            if (!transaction.buildParams) {
                throw Error(`Staking transaction ${transaction.id} build params not expanded`);
            }
            return {
                transaction: transaction,
                result: await (await this.getWalletForBuildingAndSigning()).prebuildTransaction(transaction.buildParams),
            };
        }
    }
    /**
     * Sign the staking transaction
     * @param signOptions
     * @param stakingPrebuildTransaction
     */
    async sign(signOptions, stakingPrebuildTransaction) {
        const reqId = new utils_1.RequestTracer();
        const keychain = await this.wallet.baseCoin.keychains().getKeysForSigning({
            wallet: this.wallet,
            reqId: reqId,
        });
        return {
            transaction: stakingPrebuildTransaction.transaction,
            signed: await (await this.getWalletForBuildingAndSigning()).signTransaction({
                txPrebuild: stakingPrebuildTransaction.result,
                walletPassphrase: signOptions.walletPassphrase,
                keychain: keychain[0],
            }),
        };
    }
    /**
     * Send the signed staking transaction if required. Send call is not required if api version is full
     * and this method will return the staking transaction from the incoming object.
     * @param signedTransaction
     */
    async send(signedTransaction) {
        if (this.isSendCallRequired()) {
            return await this.bitgo
                .post(this.bitgo.microservicesUrl(this.stakingTransactionURL(signedTransaction.transaction)))
                .send(signedTransaction.signed)
                .result();
        }
        return signedTransaction.transaction;
    }
    /**
     * Build, sign and send the transaction.
     * @param signOptions
     * @param transaction
     */
    async buildSignAndSend(signOptions, transaction) {
        return await this.buildAndSign(signOptions, transaction).then((result) => {
            return this.send(result);
        });
    }
    /**
     * Create prebuilt staking transaction.
     * @param transaction
     */
    async prebuildSelfManagedStakingTransaction(transaction) {
        const builtStakingTransaction = await this.build(transaction);
        const buildParams = builtStakingTransaction.transaction.buildParams;
        const formattedParams = {
            ...buildParams,
            coin: this.coin,
            walletId: this.walletId,
            walletType: this.wallet.type(),
            preview: true,
        };
        return await this.wallet.prebuildTransaction(formattedParams);
    }
    /**
     * Build and sign the transaction.
     * @param signOptions
     * @param transaction
     */
    async buildAndSign(signOptions, transaction) {
        const builtTx = await this.build(transaction);
        return await this.sign(signOptions, builtTx);
    }
    async expandBuildParams(stakingTransaction) {
        return await this.bitgo
            .get(this.bitgo.microservicesUrl(this.stakingTransactionURL(stakingTransaction)))
            .query({ expandBuildParams: true })
            .result();
    }
    async createStakingRequest(options, type) {
        return await this.bitgo
            .post(this.bitgo.microservicesUrl(this.stakingRequestsURL()))
            .send({
            ...options,
            type: type,
        })
            .result();
    }
    stakingRequestsURL() {
        return `/api/staking/v1/${this.coin}/wallets/${this.walletId}/requests`;
    }
    async getDelegations(options) {
        return await this.bitgo.get(this.bitgo.microservicesUrl(this.stakingDelegationsURL())).query(options).result();
    }
    stakingDelegationsURL() {
        return `/api/staking/v1/${this.coin}/wallets/${this.walletId}/delegations`;
    }
    stakingRequestUrl(stakingRequestId) {
        return `${this.stakingRequestsURL()}/${stakingRequestId}`;
    }
    stakingTransactionURL(stakingTransaction) {
        return `${this.stakingRequestUrl(stakingTransaction.stakingRequestId)}/transactions/${stakingTransaction.id}`;
    }
    async getWalletForBuildingAndSigning() {
        if (this.wallet.baseCoin.tokenConfig) {
            if (!this.tokenParentWallet) {
                this.tokenParentWallet = await this.bitgo
                    .coin(this.wallet.baseCoin.tokenConfig.coin)
                    .wallets()
                    .get({ id: this.wallet.id() });
            }
            return this.tokenParentWallet;
        }
        else {
            return Promise.resolve(this.wallet);
        }
    }
    /**
     * Send API call is only required for TSS TxRequest api version lite or multi-sig transactions.
     * For Full api version, sign transaction moves the transaction to delivered state.
     * @returns true if send API call to staking service is required else false
     */
    isSendCallRequired() {
        if (this.wallet.baseCoin.getFamily() === 'eth') {
            return !this.isEthTss;
        }
        else if (this.wallet.baseCoin.supportsTss()) {
            return this.wallet.baseCoin.getMPCAlgorithm() !== 'ecdsa';
        }
        else {
            return true;
        }
    }
}
exports.StakingWallet = StakingWallet;
//# sourceMappingURL=data:application/json;base64,
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerateLightningWalletOptionsCodec = exports.backupProviders = void 0;
const t = __importStar(require("io-ts"));
exports.backupProviders = ['BitGoTrustAsKrs'];
exports.GenerateLightningWalletOptionsCodec = t.strict({
    label: t.string,
    passphrase: t.string,
    enterprise: t.string,
    passcodeEncryptionCode: t.string,
}, 'GenerateLightningWalletOptions');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaVdhbGxldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYml0Z28vd2FsbGV0L2lXYWxsZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEseUNBQTJCO0FBMkNkLFFBQUEsZUFBZSxHQUFHLENBQUMsaUJBQWlCLENBQVUsQ0FBQztBQStCL0MsUUFBQSxtQ0FBbUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUN6RDtJQUNFLEtBQUssRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNmLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTTtJQUNwQixVQUFVLEVBQUUsQ0FBQyxDQUFDLE1BQU07SUFDcEIsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLE1BQU07Q0FDakMsRUFDRCxnQ0FBZ0MsQ0FDakMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHQgZnJvbSAnaW8tdHMnO1xuXG5pbXBvcnQgeyBJUmVxdWVzdFRyYWNlciB9IGZyb20gJy4uLy4uL2FwaSc7XG5pbXBvcnQgeyBLZXljaGFpbnNUcmlwbGV0LCBMaWdodG5pbmdLZXljaGFpbnNUcmlwbGV0IH0gZnJvbSAnLi4vYmFzZUNvaW4nO1xuaW1wb3J0IHsgSVdhbGxldCwgUGFnaW5hdGlvbk9wdGlvbnMgfSBmcm9tICcuL2lXYWxsZXQnO1xuaW1wb3J0IHsgV2FsbGV0IH0gZnJvbSAnLi93YWxsZXQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdhbGxldFdpdGhLZXljaGFpbnMgZXh0ZW5kcyBLZXljaGFpbnNUcmlwbGV0IHtcbiAgcmVzcG9uc2VUeXBlOiAnV2FsbGV0V2l0aEtleWNoYWlucyc7XG4gIHdhbGxldDogSVdhbGxldDtcbiAgd2FybmluZz86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMaWdodG5pbmdXYWxsZXRXaXRoS2V5Y2hhaW5zIGV4dGVuZHMgTGlnaHRuaW5nS2V5Y2hhaW5zVHJpcGxldCB7XG4gIHJlc3BvbnNlVHlwZTogJ0xpZ2h0bmluZ1dhbGxldFdpdGhLZXljaGFpbnMnO1xuICB3YWxsZXQ6IElXYWxsZXQ7XG4gIHdhcm5pbmc/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0V2FsbGV0T3B0aW9ucyB7XG4gIGFsbFRva2Vucz86IGJvb2xlYW47XG4gIHJlcUlkPzogSVJlcXVlc3RUcmFjZXI7XG4gIGlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlQmFzZU1wY1dhbGxldE9wdGlvbnMge1xuICBtdWx0aXNpZ1R5cGU6ICd0c3MnIHwgJ2Jsc2RrZyc7XG4gIGxhYmVsOiBzdHJpbmc7XG4gIGVudGVycHJpc2U6IHN0cmluZztcbiAgd2FsbGV0VmVyc2lvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZU1wY1dhbGxldE9wdGlvbnMgZXh0ZW5kcyBHZW5lcmF0ZUJhc2VNcGNXYWxsZXRPcHRpb25zIHtcbiAgcGFzc3BocmFzZTogc3RyaW5nO1xuICBvcmlnaW5hbFBhc3Njb2RlRW5jcnlwdGlvbkNvZGU/OiBzdHJpbmc7XG4gIGJhY2t1cFByb3ZpZGVyPzogQmFja3VwUHJvdmlkZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyYXRlU01DTXBjV2FsbGV0T3B0aW9ucyBleHRlbmRzIEdlbmVyYXRlQmFzZU1wY1dhbGxldE9wdGlvbnMge1xuICBiaXRnb0tleUlkOiBzdHJpbmc7XG4gIGNvbW1vbktleWNoYWluOiBzdHJpbmc7XG4gIGNvbGREZXJpdmF0aW9uU2VlZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGJhY2t1cFByb3ZpZGVycyA9IFsnQml0R29UcnVzdEFzS3JzJ10gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBCYWNrdXBQcm92aWRlciA9ICh0eXBlb2YgYmFja3VwUHJvdmlkZXJzKVtudW1iZXJdO1xuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZVdhbGxldE9wdGlvbnMge1xuICBsYWJlbD86IHN0cmluZztcbiAgcGFzc3BocmFzZT86IHN0cmluZztcbiAgdXNlcktleT86IHN0cmluZztcbiAgYmFja3VwWHB1Yj86IHN0cmluZztcbiAgYmFja3VwWHB1YlByb3ZpZGVyPzogc3RyaW5nO1xuICBiYWNrdXBQcm92aWRlcj86IEJhY2t1cFByb3ZpZGVyO1xuICBwYXNzY29kZUVuY3J5cHRpb25Db2RlPzogc3RyaW5nO1xuICBlbnRlcnByaXNlPzogc3RyaW5nO1xuICBkaXNhYmxlVHJhbnNhY3Rpb25Ob3RpZmljYXRpb25zPzogc3RyaW5nO1xuICBnYXNQcmljZT86IHN0cmluZztcbiAgZWlwMTU1OT86IHtcbiAgICBtYXhGZWVQZXJHYXM6IHN0cmluZztcbiAgICBtYXhQcmlvcml0eUZlZVBlckdhczogc3RyaW5nO1xuICB9O1xuICB3YWxsZXRWZXJzaW9uPzogbnVtYmVyO1xuICBkaXNhYmxlS1JTRW1haWw/OiBib29sZWFuO1xuICBrcnNTcGVjaWZpYz86IHtcbiAgICBbaW5kZXg6IHN0cmluZ106IGJvb2xlYW4gfCBzdHJpbmcgfCBudW1iZXI7XG4gIH07XG4gIGNvbGREZXJpdmF0aW9uU2VlZD86IHN0cmluZztcbiAgcm9vdFByaXZhdGVLZXk/OiBzdHJpbmc7XG4gIG11bHRpc2lnVHlwZT86ICdvbmNoYWluJyB8ICd0c3MnIHwgJ2Jsc2RrZyc7XG4gIGlzRGlzdHJpYnV0ZWRDdXN0b2R5PzogYm9vbGVhbjtcbiAgYml0Z29LZXlJZD86IHN0cmluZztcbiAgY29tbW9uS2V5Y2hhaW4/OiBzdHJpbmc7XG4gIHR5cGU/OiAnaG90JyB8ICdjb2xkJyB8ICdjdXN0b2RpYWwnO1xufVxuXG5leHBvcnQgY29uc3QgR2VuZXJhdGVMaWdodG5pbmdXYWxsZXRPcHRpb25zQ29kZWMgPSB0LnN0cmljdChcbiAge1xuICAgIGxhYmVsOiB0LnN0cmluZyxcbiAgICBwYXNzcGhyYXNlOiB0LnN0cmluZyxcbiAgICBlbnRlcnByaXNlOiB0LnN0cmluZyxcbiAgICBwYXNzY29kZUVuY3J5cHRpb25Db2RlOiB0LnN0cmluZyxcbiAgfSxcbiAgJ0dlbmVyYXRlTGlnaHRuaW5nV2FsbGV0T3B0aW9ucydcbik7XG5cbmV4cG9ydCB0eXBlIEdlbmVyYXRlTGlnaHRuaW5nV2FsbGV0T3B0aW9ucyA9IHQuVHlwZU9mPHR5cGVvZiBHZW5lcmF0ZUxpZ2h0bmluZ1dhbGxldE9wdGlvbnNDb2RlYz47XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0V2FsbGV0QnlBZGRyZXNzT3B0aW9ucyB7XG4gIGFkZHJlc3M/OiBzdHJpbmc7XG4gIHJlcUlkPzogSVJlcXVlc3RUcmFjZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXBkYXRlU2hhcmVPcHRpb25zIHtcbiAgd2FsbGV0U2hhcmVJZD86IHN0cmluZztcbiAgc3RhdGU/OiBzdHJpbmc7XG4gIGVuY3J5cHRlZFBydj86IHN0cmluZztcbiAga2V5SWQ/OiBzdHJpbmc7XG4gIHNpZ25hdHVyZT86IHN0cmluZztcbiAgcGF5bG9hZD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2NlcHRTaGFyZU9wdGlvbnMge1xuICBvdmVycmlkZUVuY3J5cHRlZFBydj86IHN0cmluZztcbiAgd2FsbGV0U2hhcmVJZD86IHN0cmluZztcbiAgdXNlclBhc3N3b3JkPzogc3RyaW5nO1xuICBuZXdXYWxsZXRQYXNzcGhyYXNlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFkZFdhbGxldE9wdGlvbnMge1xuICBjb2luU3BlY2lmaWM/OiBhbnk7XG4gIGVudGVycHJpc2U/OiBzdHJpbmc7XG4gIGlzQ29sZD86IElzQ29sZDtcbiAgaXNDdXN0b2RpYWw/OiBJc0N1c3RvZGlhbDtcbiAga2V5cz86IHN0cmluZ1tdO1xuICBrZXlTaWduYXR1cmVzPzogS2V5U2lnbmF0dXJlcztcbiAgbGFiZWw6IHN0cmluZztcbiAgbXVsdGlzaWdUeXBlPzogJ29uY2hhaW4nIHwgJ3RzcycgfCAnYmxzZGtnJztcbiAgYWRkcmVzcz86IHN0cmluZztcbiAgbT86IG51bWJlcjtcbiAgbj86IG51bWJlcjtcbiAgdGFncz86IHN0cmluZ1tdO1xuICB0eXBlPzogc3RyaW5nO1xuICB3YWxsZXRWZXJzaW9uPzogbnVtYmVyO1xuICBlaXAxNTU5PzogRWlwMTU1OTtcbiAgY2xpZW50RmxhZ3M/OiBzdHJpbmdbXTtcbiAgLy8gQWRkaXRpb25hbCBwYXJhbXMgbmVlZGVkIGZvciB4cnBcbiAgcm9vdFB1Yj86IHN0cmluZztcbiAgLy8gSW4gWFJQLCBYTE0gYW5kIENTUFIgdGhpcyBwcml2YXRlIGtleSBpcyB1c2VkIG9ubHkgZm9yIHdhbGxldCBjcmVhdGlvbiBwdXJwb3NlcyxcbiAgLy8gb25jZSB0aGUgd2FsbGV0IGlzIGluaXRpYWxpemVkIHRoZW4gd2UgdXBkYXRlIGl0cyB3ZWlnaHQgdG8gMCBtYWtpbmcgaXQgYW4gaW52YWxpZCBrZXkuXG4gIC8vIGh0dHBzOi8vd3d3LnN0ZWxsYXIub3JnL2RldmVsb3BlcnMvZ3VpZGVzL2NvbmNlcHRzL211bHRpLXNpZy5odG1sI2FkZGl0aW9uYWwtc2lnbmluZy1rZXlzXG4gIHJvb3RQcml2YXRlS2V5Pzogc3RyaW5nO1xuICBpbml0aWFsaXphdGlvblR4cz86IGFueTtcbiAgZGlzYWJsZVRyYW5zYWN0aW9uTm90aWZpY2F0aW9ucz86IGJvb2xlYW47XG4gIGdhc1ByaWNlPzogbnVtYmVyO1xufVxuXG50eXBlIEtleVNpZ25hdHVyZXMgPSB7XG4gIGJhY2t1cD86IHN0cmluZztcbiAgYml0Z28/OiBzdHJpbmc7XG59O1xuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbnR5cGUgSXNDb2xkID0gYm9vbGVhbjtcblxuLyoqIEBkZXByZWNhdGVkICovXG50eXBlIElzQ3VzdG9kaWFsID0gYm9vbGVhbjtcblxudHlwZSBFaXAxNTU5ID0ge1xuICBtYXhQcmlvcml0eUZlZVBlckdhczogc3RyaW5nO1xuICBtYXhGZWVQZXJHYXM6IHN0cmluZztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFdhbGxldE9wdGlvbnMgZXh0ZW5kcyBQYWdpbmF0aW9uT3B0aW9ucyB7XG4gIHNraXA/OiBudW1iZXI7XG4gIGdldGJhbGFuY2VzPzogYm9vbGVhbjtcbiAgYWxsVG9rZW5zPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJV2FsbGV0cyB7XG4gIGdldChwYXJhbXM/OiBHZXRXYWxsZXRPcHRpb25zKTogUHJvbWlzZTxXYWxsZXQ+O1xuICBsaXN0KHBhcmFtcz86IExpc3RXYWxsZXRPcHRpb25zKTogUHJvbWlzZTx7IHdhbGxldHM6IElXYWxsZXRbXSB9PjtcbiAgYWRkKHBhcmFtcz86IEFkZFdhbGxldE9wdGlvbnMpOiBQcm9taXNlPGFueT47XG4gIGdlbmVyYXRlV2FsbGV0KHBhcmFtcz86IEdlbmVyYXRlV2FsbGV0T3B0aW9ucyk6IFByb21pc2U8V2FsbGV0V2l0aEtleWNoYWlucyB8IExpZ2h0bmluZ1dhbGxldFdpdGhLZXljaGFpbnM+O1xuICBsaXN0U2hhcmVzKHBhcmFtcz86IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogUHJvbWlzZTxhbnk+O1xuICBnZXRTaGFyZShwYXJhbXM/OiB7IHdhbGxldFNoYXJlSWQ/OiBzdHJpbmcgfSk6IFByb21pc2U8YW55PjtcbiAgdXBkYXRlU2hhcmUocGFyYW1zPzogVXBkYXRlU2hhcmVPcHRpb25zKTogUHJvbWlzZTxhbnk+O1xuICByZXNlbmRTaGFyZUludml0ZShwYXJhbXM/OiB7IHdhbGxldFNoYXJlSWQ/OiBzdHJpbmcgfSk6IFByb21pc2U8YW55PjtcbiAgY2FuY2VsU2hhcmUocGFyYW1zPzogeyB3YWxsZXRTaGFyZUlkPzogc3RyaW5nIH0pOiBQcm9taXNlPGFueT47XG4gIGFjY2VwdFNoYXJlKHBhcmFtcz86IEFjY2VwdFNoYXJlT3B0aW9ucyk6IFByb21pc2U8YW55PjtcbiAgZ2V0V2FsbGV0KHBhcmFtcz86IEdldFdhbGxldE9wdGlvbnMpOiBQcm9taXNlPElXYWxsZXQ+O1xuICBnZXRXYWxsZXRCeUFkZHJlc3MocGFyYW1zPzogR2V0V2FsbGV0QnlBZGRyZXNzT3B0aW9ucyk6IFByb21pc2U8SVdhbGxldD47XG4gIGdldFRvdGFsQmFsYW5jZXMocGFyYW1zPzogUmVjb3JkPHN0cmluZywgbmV2ZXI+KTogUHJvbWlzZTxhbnk+O1xufVxuIl19
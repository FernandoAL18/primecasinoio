"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utxolib = __importStar(require("@bitgo/utxo-lib"));
const lightning_1 = require("../../../../src/bitgo/lightning");
const crypto_1 = __importDefault(require("crypto"));
function getKey(seed) {
    return utxolib.bip32.fromSeed(crypto_1.default.createHash('sha256').update(seed).digest());
}
describe('verifySignature', function () {
    const key = getKey('key');
    const keyPub = key.neutered();
    const wrongKey = getKey('wrongKey');
    it('returns true on valid signature', function () {
        const request = {
            invoice: 'some data',
        };
        const signature = (0, lightning_1.createMessageSignature)(request, key.toBase58());
        const result = (0, lightning_1.verifyMessageSignature)(request, signature, keyPub.toBase58());
        (0, assert_1.default)(result);
    });
    it('returns true on different order', function () {
        const request = {
            invoice: 'some data',
            fee: 123,
        };
        const otherRequest = {
            fee: 123,
            invoice: 'some data',
        };
        const signature = (0, lightning_1.createMessageSignature)(request, key.toBase58());
        const result = (0, lightning_1.verifyMessageSignature)(otherRequest, signature, keyPub.toBase58());
        (0, assert_1.default)(result);
    });
    it('returns false on wrong message', function () {
        const request = {
            invoice: 'some data',
        };
        const wrongRequest = {
            invoice: 'some other data',
        };
        const signature = (0, lightning_1.createMessageSignature)(request, key.toBase58());
        const result = (0, lightning_1.verifyMessageSignature)(wrongRequest, signature, keyPub.toBase58());
        (0, assert_1.default)(!result);
    });
    it('returns false on wrong key', function () {
        const request = {
            invoice: 'some data',
        };
        const signature = (0, lightning_1.createMessageSignature)(request, wrongKey.toBase58());
        const result = (0, lightning_1.verifyMessageSignature)(request, signature, keyPub.toBase58());
        (0, assert_1.default)(!result);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGVzdC91bml0L2JpdGdvL2xpZ2h0bmluZy9zaWduYXR1cmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9EQUE0QjtBQUU1Qix5REFBMkM7QUFFM0MsK0RBQWlHO0FBQ2pHLG9EQUE0QjtBQU81QixTQUFTLE1BQU0sQ0FBQyxJQUFZO0lBQzFCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsZ0JBQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDbkYsQ0FBQztBQUVELFFBQVEsQ0FBQyxpQkFBaUIsRUFBRTtJQUMxQixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwQyxFQUFFLENBQUMsaUNBQWlDLEVBQUU7UUFDcEMsTUFBTSxPQUFPLEdBQVk7WUFDdkIsT0FBTyxFQUFFLFdBQVc7U0FDckIsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHLElBQUEsa0NBQXNCLEVBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sTUFBTSxHQUFHLElBQUEsa0NBQXNCLEVBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLENBQUM7SUFDakIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUU7UUFDcEMsTUFBTSxPQUFPLEdBQVk7WUFDdkIsT0FBTyxFQUFFLFdBQVc7WUFDcEIsR0FBRyxFQUFFLEdBQUc7U0FDVCxDQUFDO1FBQ0YsTUFBTSxZQUFZLEdBQVk7WUFDNUIsR0FBRyxFQUFFLEdBQUc7WUFDUixPQUFPLEVBQUUsV0FBVztTQUNyQixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBQSxrQ0FBc0IsRUFBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEUsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQ0FBc0IsRUFBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsQ0FBQztJQUNqQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRTtRQUNuQyxNQUFNLE9BQU8sR0FBWTtZQUN2QixPQUFPLEVBQUUsV0FBVztTQUNyQixDQUFDO1FBQ0YsTUFBTSxZQUFZLEdBQVk7WUFDNUIsT0FBTyxFQUFFLGlCQUFpQjtTQUMzQixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBQSxrQ0FBc0IsRUFBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDbEUsTUFBTSxNQUFNLEdBQUcsSUFBQSxrQ0FBc0IsRUFBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ2xGLElBQUEsZ0JBQU0sRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRCQUE0QixFQUFFO1FBQy9CLE1BQU0sT0FBTyxHQUFZO1lBQ3ZCLE9BQU8sRUFBRSxXQUFXO1NBQ3JCLENBQUM7UUFDRixNQUFNLFNBQVMsR0FBRyxJQUFBLGtDQUFzQixFQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN2RSxNQUFNLE1BQU0sR0FBRyxJQUFBLGtDQUFzQixFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDN0UsSUFBQSxnQkFBTSxFQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0ICogYXMgdXR4b2xpYiBmcm9tICdAYml0Z28vdXR4by1saWInO1xuXG5pbXBvcnQgeyBjcmVhdGVNZXNzYWdlU2lnbmF0dXJlLCB2ZXJpZnlNZXNzYWdlU2lnbmF0dXJlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2JpdGdvL2xpZ2h0bmluZyc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5cbnR5cGUgUmVxdWVzdCA9IHtcbiAgaW52b2ljZTogc3RyaW5nO1xuICBmZWU/OiBudW1iZXI7XG59O1xuXG5mdW5jdGlvbiBnZXRLZXkoc2VlZDogc3RyaW5nKTogdXR4b2xpYi5CSVAzMkludGVyZmFjZSB7XG4gIHJldHVybiB1dHhvbGliLmJpcDMyLmZyb21TZWVkKGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoc2VlZCkuZGlnZXN0KCkpO1xufVxuXG5kZXNjcmliZSgndmVyaWZ5U2lnbmF0dXJlJywgZnVuY3Rpb24gKCkge1xuICBjb25zdCBrZXkgPSBnZXRLZXkoJ2tleScpO1xuICBjb25zdCBrZXlQdWIgPSBrZXkubmV1dGVyZWQoKTtcbiAgY29uc3Qgd3JvbmdLZXkgPSBnZXRLZXkoJ3dyb25nS2V5Jyk7XG5cbiAgaXQoJ3JldHVybnMgdHJ1ZSBvbiB2YWxpZCBzaWduYXR1cmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdDogUmVxdWVzdCA9IHtcbiAgICAgIGludm9pY2U6ICdzb21lIGRhdGEnLFxuICAgIH07XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gY3JlYXRlTWVzc2FnZVNpZ25hdHVyZShyZXF1ZXN0LCBrZXkudG9CYXNlNTgoKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdmVyaWZ5TWVzc2FnZVNpZ25hdHVyZShyZXF1ZXN0LCBzaWduYXR1cmUsIGtleVB1Yi50b0Jhc2U1OCgpKTtcbiAgICBhc3NlcnQocmVzdWx0KTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgdHJ1ZSBvbiBkaWZmZXJlbnQgb3JkZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVxdWVzdDogUmVxdWVzdCA9IHtcbiAgICAgIGludm9pY2U6ICdzb21lIGRhdGEnLFxuICAgICAgZmVlOiAxMjMsXG4gICAgfTtcbiAgICBjb25zdCBvdGhlclJlcXVlc3Q6IFJlcXVlc3QgPSB7XG4gICAgICBmZWU6IDEyMyxcbiAgICAgIGludm9pY2U6ICdzb21lIGRhdGEnLFxuICAgIH07XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gY3JlYXRlTWVzc2FnZVNpZ25hdHVyZShyZXF1ZXN0LCBrZXkudG9CYXNlNTgoKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdmVyaWZ5TWVzc2FnZVNpZ25hdHVyZShvdGhlclJlcXVlc3QsIHNpZ25hdHVyZSwga2V5UHViLnRvQmFzZTU4KCkpO1xuICAgIGFzc2VydChyZXN1bHQpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBmYWxzZSBvbiB3cm9uZyBtZXNzYWdlJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IFJlcXVlc3QgPSB7XG4gICAgICBpbnZvaWNlOiAnc29tZSBkYXRhJyxcbiAgICB9O1xuICAgIGNvbnN0IHdyb25nUmVxdWVzdDogUmVxdWVzdCA9IHtcbiAgICAgIGludm9pY2U6ICdzb21lIG90aGVyIGRhdGEnLFxuICAgIH07XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gY3JlYXRlTWVzc2FnZVNpZ25hdHVyZShyZXF1ZXN0LCBrZXkudG9CYXNlNTgoKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdmVyaWZ5TWVzc2FnZVNpZ25hdHVyZSh3cm9uZ1JlcXVlc3QsIHNpZ25hdHVyZSwga2V5UHViLnRvQmFzZTU4KCkpO1xuICAgIGFzc2VydCghcmVzdWx0KTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgZmFsc2Ugb24gd3Jvbmcga2V5JywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlcXVlc3Q6IFJlcXVlc3QgPSB7XG4gICAgICBpbnZvaWNlOiAnc29tZSBkYXRhJyxcbiAgICB9O1xuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGNyZWF0ZU1lc3NhZ2VTaWduYXR1cmUocmVxdWVzdCwgd3JvbmdLZXkudG9CYXNlNTgoKSk7XG4gICAgY29uc3QgcmVzdWx0ID0gdmVyaWZ5TWVzc2FnZVNpZ25hdHVyZShyZXF1ZXN0LCBzaWduYXR1cmUsIGtleVB1Yi50b0Jhc2U1OCgpKTtcbiAgICBhc3NlcnQoIXJlc3VsdCk7XG4gIH0pO1xufSk7XG4iXX0=
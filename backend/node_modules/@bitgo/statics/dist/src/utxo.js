"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.utxoCoins = exports.utxo = exports.UtxoCoin = void 0;
const base_1 = require("./base");
const networks_1 = require("./networks");
class UtxoCoin extends base_1.BaseCoin {
    constructor(options) {
        super({
            ...options,
            kind: base_1.CoinKind.CRYPTO,
            isToken: false,
            decimalPlaces: 8,
        });
        this.network = options.network;
    }
    disallowedFeatures() {
        return new Set([base_1.CoinFeature.ACCOUNT_MODEL]);
    }
    requiredFeatures() {
        return new Set([base_1.CoinFeature.UNSPENT_MODEL]);
    }
}
exports.UtxoCoin = UtxoCoin;
UtxoCoin.DEFAULT_FEATURES = [
    base_1.CoinFeature.UNSPENT_MODEL,
    base_1.CoinFeature.CHILD_PAYS_FOR_PARENT,
    base_1.CoinFeature.CUSTODY,
    base_1.CoinFeature.CUSTODY_BITGO_TRUST,
    base_1.CoinFeature.MULTISIG_COLD,
    base_1.CoinFeature.PAYGO,
];
/**
 * Factory function for utxo coin instances.
 *
 * @param id uuid v4 of the coin
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `UtxoCoin`
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
function utxo(id, name, fullName, network, asset, baseUnit, features = UtxoCoin.DEFAULT_FEATURES, prefix = '', suffix = name.toUpperCase(), 
/** All UTXOs BitGo supports are SECP256K1 **/
primaryKeyCurve = base_1.KeyCurve.Secp256k1) {
    return Object.freeze(new UtxoCoin({
        id,
        name,
        fullName,
        network,
        prefix,
        suffix,
        features,
        asset,
        primaryKeyCurve,
        baseUnit,
    }));
}
exports.utxo = utxo;
const BCH_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.BULK_TRANSACTION,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
];
const BTC_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SISTER_TRUST_ONE,
    base_1.CoinFeature.BULK_TRANSACTION,
    base_1.CoinFeature.DISTRIBUTED_CUSTODY,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
    base_1.CoinFeature.CUSTODY_BITGO_SWITZERLAND,
    base_1.CoinFeature.STUCK_TRANSACTION_MANAGEMENT_ONCHAIN,
];
const BTG_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
];
const LTC_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
];
const DOGE_FEATURES = [
    ...UtxoCoin.DEFAULT_FEATURES,
    base_1.CoinFeature.CUSTODY_BITGO_GERMANY,
    base_1.CoinFeature.CUSTODY_BITGO_FRANKFURT,
    base_1.CoinFeature.CUSTODY_BITGO_SINGAPORE,
    base_1.CoinFeature.CUSTODY_BITGO_NEW_YORK,
];
exports.utxoCoins = [
    utxo('8d6e08d5-399f-414f-8430-6ceca1798cbf', 'bch', 'Bitcoin Cash', networks_1.Networks.main.bitcoinCash, base_1.UnderlyingAsset.BCH, base_1.BaseUnit.BTC, BCH_FEATURES),
    utxo('aae6fafc-5091-4b10-9a11-aa6cefea2805', 'tbch', 'Testnet Bitcoin Cash', networks_1.Networks.test.bitcoinCash, base_1.UnderlyingAsset.BCH, base_1.BaseUnit.BTC, BCH_FEATURES),
    utxo('941587ce-1c7a-4305-b908-15455d15e961', 'bcha', 'ECash', networks_1.Networks.main.eCash, base_1.UnderlyingAsset.BCHA, base_1.BaseUnit.BTC),
    utxo('af8de1e0-3e33-47bf-94d3-fb3c2bebead2', 'tbcha', 'Testnet ECash', networks_1.Networks.test.eCash, base_1.UnderlyingAsset.BCHA, base_1.BaseUnit.BTC),
    utxo('f728cfc7-d0cf-4f99-bca0-d25273e65fcf', 'bsv', 'Bitcoin SV', networks_1.Networks.main.bitcoinSV, base_1.UnderlyingAsset.BSV, base_1.BaseUnit.BTC, [base_1.CoinFeature.DEPRECATED, ...UtxoCoin.DEFAULT_FEATURES]),
    utxo('7cb81518-85d7-400f-960e-7bc00b3bfa62', 'tbsv', 'Testnet Bitcoin SV', networks_1.Networks.test.bitcoinSV, base_1.UnderlyingAsset.BSV, base_1.BaseUnit.BTC, [base_1.CoinFeature.DEPRECATED, ...UtxoCoin.DEFAULT_FEATURES]),
    utxo('5c1691c5-c9cc-49ed-abe0-c433dab2edaa', 'btc', 'Bitcoin', networks_1.Networks.main.bitcoin, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('cde7559d-a536-4d12-8de4-90baa09f90bd', 'tbtc', 'Testnet Bitcoin', networks_1.Networks.test.bitcoin, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('a0d53dc9-2dcc-4ebb-a2d4-51983fe20da6', 'tbtcsig', 'Public Signet Bitcoin', networks_1.Networks.test.bitcoinPublicSignet, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('722522dc-a613-4bff-a1d1-183ebe5138ae', 'tbtcbgsig', 'BitGo Signet Bitcoin', networks_1.Networks.test.bitcoinBitGoSignet, base_1.UnderlyingAsset.BTC, base_1.BaseUnit.BTC, BTC_FEATURES),
    utxo('8feb110d-0d68-44ce-ae97-b8c30ec870a9', 'btg', 'Bitcoin Gold', networks_1.Networks.main.bitcoinGold, base_1.UnderlyingAsset.BTG, base_1.BaseUnit.BTC, BTG_FEATURES),
    utxo('633246f2-af21-41b8-8b9e-ba9ae25d386f', 'tbtg', 'Testnet Bitcoin Gold', networks_1.Networks.test.bitcoinGold, base_1.UnderlyingAsset.BTG, base_1.BaseUnit.BTC, BTG_FEATURES.filter((f) => f !== base_1.CoinFeature.MULTISIG_COLD)),
    utxo('9c8097f1-5d2c-4a62-a94c-96c271c0e5e0', 'ltc', 'Litecoin', networks_1.Networks.main.litecoin, base_1.UnderlyingAsset.LTC, base_1.BaseUnit.LTC, LTC_FEATURES),
    utxo('1aca32c8-a3e5-42eb-82df-4c263d8bfc68', 'tltc', 'Testnet Litecoin', networks_1.Networks.test.litecoin, base_1.UnderlyingAsset.LTC, base_1.BaseUnit.LTC, LTC_FEATURES),
    utxo('0739be6a-c72e-468d-9464-ca5601965708', 'dash', 'Dash', networks_1.Networks.main.dash, base_1.UnderlyingAsset.DASH, base_1.BaseUnit.DASH),
    utxo('5950d78f-e8dd-457a-ab5d-310e6b476bb1', 'tdash', 'Testnet Dash', networks_1.Networks.test.dash, base_1.UnderlyingAsset.DASH, base_1.BaseUnit.DASH),
    utxo('508f6b53-1e6e-41fd-b541-b2498b7c4b61', 'zec', 'ZCash', networks_1.Networks.main.zCash, base_1.UnderlyingAsset.ZEC, base_1.BaseUnit.ZEC),
    utxo('549a4499-387c-42d3-9048-c01d6724d98a', 'tzec', 'Testnet ZCash', networks_1.Networks.test.zCash, base_1.UnderlyingAsset.ZEC, base_1.BaseUnit.ZEC),
    utxo('c93a9160-458f-4a31-bea0-4a93ae8b1d2d', 'doge', 'Dogecoin', networks_1.Networks.main.dogecoin, base_1.UnderlyingAsset.DOGE, base_1.BaseUnit.BTC, DOGE_FEATURES),
    utxo('7a1597e8-fd8e-4b68-8086-f9159e37e0ce', 'tdoge', 'Testnet Dogecoin', networks_1.Networks.test.dogecoin, base_1.UnderlyingAsset.DOGE, base_1.BaseUnit.BTC, DOGE_FEATURES),
];
//# sourceMappingURL=data:application/json;base64,
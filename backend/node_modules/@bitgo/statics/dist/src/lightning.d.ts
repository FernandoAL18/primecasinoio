import { BaseCoin, BaseUnit, CoinFeature, KeyCurve, UnderlyingAsset } from './base';
import { LightningNetwork } from './networks';
interface LightningConstructorOptions {
    id: string;
    fullName: string;
    name: string;
    network: LightningNetwork;
    features: CoinFeature[];
    asset: UnderlyingAsset;
    baseUnit: BaseUnit;
    prefix?: string;
    suffix?: string;
    primaryKeyCurve: KeyCurve;
}
export declare class LightningCoin extends BaseCoin {
    static readonly DEFAULT_FEATURES: CoinFeature[];
    /**
     * Additional fields for lightning coins
     */
    readonly network: LightningNetwork;
    constructor(options: LightningConstructorOptions);
    protected disallowedFeatures(): Set<CoinFeature>;
    protected requiredFeatures(): Set<CoinFeature>;
}
/**
 * Factory function for lightning coin instances.
 *
 * @param id uuid v4 of the coin
 * @param name unique identifier of the coin
 * @param fullName Complete human-readable name of the coin
 * @param network Network object for this coin
 * @param asset Asset which this coin represents. This is the same for both mainnet and testnet variants of a coin.
 * @param features? Features of this coin. Defaults to the DEFAULT_FEATURES defined in `LightningCoin`
 * @param prefix? Optional coin prefix. Defaults to empty string
 * @param suffix? Optional coin suffix. Defaults to coin name.
 * @param primaryKeyCurve The elliptic curve for this chain/token
 */
export declare function lightning(id: string, name: string, fullName: string, network: LightningNetwork, asset: UnderlyingAsset, baseUnit: BaseUnit, features?: CoinFeature[], prefix?: string, suffix?: string, 
/** All Lightnings BitGo supports are SECP256K1 **/
primaryKeyCurve?: KeyCurve): Readonly<LightningCoin>;
export declare const lightningCoins: Readonly<BaseCoin>[];
export {};
//# sourceMappingURL=lightning.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionBuilder = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const transaction_1 = require("./transaction");
const utils_1 = __importDefault(require("./utils"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const tonweb_1 = __importDefault(require("tonweb"));
class TransactionBuilder extends sdk_core_1.BaseTransactionBuilder {
    constructor(coinConfig) {
        super(coinConfig);
        this._signatures = [];
        this._transaction = new transaction_1.Transaction(coinConfig);
    }
    /** @inheritdoc */
    get transaction() {
        return this._transaction;
    }
    /** @inheritdoc */
    set transaction(transaction) {
        this._transaction = transaction;
    }
    /** @inheritdoc */
    signImplementation(key) {
        throw new Error('Method not implemented.');
    }
    /** @inheritDoc */
    addSignature(publicKey, signature) {
        this.transaction.signature[0] = signature.toString('hex');
    }
    /**
     * Sets the sender of this transaction.
     * This account will be responsible for paying transaction fees.
     *
     * @param {string} senderAddress the account that is sending this transaction
     * @returns {TransactionBuilder} This transaction builder
     */
    sender(senderAddress) {
        this.transaction.sender = senderAddress;
        return this;
    }
    /**
     * Sets the transaction to be bounceable or not.
     *
     * @param {string} bounceable whether the transaction can be bounced
     * @returns {TransactionBuilder} This transaction builder
     */
    bounceable(bounceable) {
        this.transaction.bounceable = bounceable;
        return this;
    }
    /**
     * Sets the fromAddress to be in bounceable format or not.
     *
     * @param {string} bounceable whether the address format is bounceable
     * @returns {TransactionBuilder} This transaction builder
     */
    fromAddressBounceable(bounceable) {
        this.transaction.fromAddressBounceable = bounceable;
        this.sender(new tonweb_1.default.Address(this.transaction.sender).toString(true, true, bounceable));
        return this;
    }
    /**
     * Sets the toAddress to be in bounceable format or not.
     *
     * @param {string} bounceable whether the address format is bounceable
     * @returns {TransactionBuilder} This transaction builder
     */
    toAddressBounceable(bounceable) {
        this.transaction.toAddressBounceable = bounceable;
        this.transaction.recipient.address = new tonweb_1.default.Address(this.transaction.recipient.address).toString(true, true, bounceable);
        return this;
    }
    fee(feeOptions) {
        throw new Error('Method not implemented.');
    }
    /** @inheritdoc */
    fromImplementation(rawTransaction) {
        this.transaction.fromRawTransaction(rawTransaction);
        return this.transaction;
    }
    /** @inheritdoc */
    async buildImplementation() {
        await this.transaction.build();
        this.transaction.loadInputsAndOutputs();
        return this.transaction;
    }
    // region Validators
    /** @inheritdoc */
    validateAddress(address, addressFormat) {
        if (!utils_1.default.isValidAddress(address.address)) {
            throw new sdk_core_1.BuildTransactionError('Invalid address ' + address.address);
        }
    }
    /** @inheritdoc */
    validateKey(key) {
        throw new Error('Method not implemented.');
    }
    /** @inheritdoc */
    validateRawTransaction(rawTransaction) {
        return;
    }
    /** @inheritdoc */
    validateTransaction(transaction) {
        if (!transaction) {
            throw new Error('transaction not defined');
        }
        this.validateAddress(transaction.recipient);
        this.validateValue(new bignumber_js_1.default(transaction.recipient.amount));
    }
    /** @inheritdoc */
    validateValue(value) {
        if (value.isLessThan(0)) {
            throw new sdk_core_1.BuildTransactionError('Value cannot be less than zero');
        }
    }
    setMessage(msg) {
        this.transaction.message = msg;
        return this;
    }
    sequenceNumber(number) {
        this.transaction.seqno = number;
        return this;
    }
    expireTime(number) {
        this.transaction.expireTime = number;
        return this;
    }
    publicKey(key) {
        this.transaction.publicKey = key;
        return this;
    }
}
exports.TransactionBuilder = TransactionBuilder;
//# sourceMappingURL=data:application/json;base64,
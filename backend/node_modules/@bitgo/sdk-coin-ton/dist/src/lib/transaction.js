"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const sdk_core_1 = require("@bitgo/sdk-core");
const tonweb_1 = __importDefault(require("tonweb"));
const bn_js_1 = require("bn.js");
const WALLET_ID = 698983191;
class Transaction extends sdk_core_1.BaseTransaction {
    constructor(coinConfig) {
        super(coinConfig);
        this.bounceable = false;
        this.fromAddressBounceable = true;
        this.toAddressBounceable = true;
    }
    canSign(key) {
        return false;
    }
    toBroadcastFormat() {
        return this.finalMessage;
    }
    toJson() {
        const otherFormat = new tonweb_1.default.Address(this.recipient.address).toString(true, true, !new tonweb_1.default.Address(this.recipient.address).isBounceable);
        return {
            id: this._id,
            sender: this.sender,
            destination: this.recipient.address,
            destinationAlias: otherFormat,
            amount: this.recipient.amount,
            seqno: this.seqno,
            expirationTime: this.expireTime,
            publicKey: this.publicKey,
            signature: this._signatures[0],
            bounceable: this.bounceable,
        };
    }
    get signablePayload() {
        return Buffer.from(this.unsignedMessage, 'hex');
    }
    async build() {
        this._type = sdk_core_1.TransactionType.Send;
        const signingMessage = this.createSigningMessage(WALLET_ID, this.seqno, this.expireTime);
        const sendMode = 3;
        signingMessage.bits.writeUint8(sendMode);
        const outMsg = this.createOutMsg(this.recipient.address, this.recipient.amount, this.message);
        signingMessage.refs.push(outMsg);
        this.unsignedMessage = Buffer.from(await signingMessage.hash()).toString('hex');
        const signature = this._signatures.length > 0 ? this._signatures[0] : Buffer.from(new Uint8Array(64)).toString('hex');
        const finalMessage = await this.createExternalMessage(signingMessage, this.seqno, signature);
        this.finalMessage = tonweb_1.default.utils.bytesToBase64(await finalMessage.toBoc(false));
        const originalTxId = tonweb_1.default.utils.bytesToBase64(await finalMessage.hash());
        this._id = originalTxId.replace(/\//g, '_').replace(/\+/g, '-');
    }
    createSigningMessage(walletId, seqno, expireAt) {
        const message = new tonweb_1.default.boc.Cell();
        message.bits.writeUint(walletId, 32);
        // expireAt should be set as per the provided arg value, regardless of the seqno
        message.bits.writeUint(expireAt, 32);
        message.bits.writeUint(seqno, 32);
        message.bits.writeUint(0, 8); // op
        return message;
    }
    createOutMsg(address, amount, payload) {
        let payloadCell = new tonweb_1.default.boc.Cell();
        if (payload) {
            if (payload.refs) {
                // is Cell
                payloadCell = payload;
            }
            else if (typeof payload === 'string') {
                if (payload.length > 0) {
                    payloadCell.bits.writeUint(0, 32);
                    payloadCell.bits.writeString(payload);
                }
            }
            else {
                payloadCell.bits.writeBytes(payload);
            }
        }
        const orderHeader = tonweb_1.default.Contract.createInternalMessageHeader(new tonweb_1.default.Address(address), new bn_js_1.BN(amount), true, this.bounceable);
        return tonweb_1.default.Contract.createCommonMsgInfo(orderHeader, undefined, payloadCell);
    }
    async createExternalMessage(signingMessage, seqno, signature) {
        const body = new tonweb_1.default.boc.Cell();
        body.bits.writeBytes(Buffer.from(signature, 'hex'));
        body.writeCell(signingMessage);
        let stateInit;
        if (seqno === 0) {
            const WalletClass = tonweb_1.default.Wallets.all['v4R2'];
            const wallet = new WalletClass(new tonweb_1.default.HttpProvider(), {
                publicKey: tonweb_1.default.utils.hexToBytes(this.publicKey),
                wc: 0,
            });
            const deploy = await wallet.createStateInit();
            stateInit = deploy.stateInit;
        }
        const header = tonweb_1.default.Contract.createExternalMessageHeader(this.sender);
        const resultMessage = tonweb_1.default.Contract.createCommonMsgInfo(header, stateInit, body);
        return resultMessage;
    }
    loadInputsAndOutputs() {
        const outputs = [];
        const inputs = [];
        inputs.push({
            address: this.sender,
            value: this.recipient.amount,
            coin: this._coinConfig.name,
        });
        outputs.push({
            address: this.recipient.address,
            value: this.recipient.amount,
            coin: this._coinConfig.name,
        });
        this._outputs = outputs;
        this._inputs = inputs;
    }
    fromRawTransaction(rawTransaction) {
        try {
            const cell = tonweb_1.default.boc.Cell.oneFromBoc(tonweb_1.default.utils.base64ToBytes(rawTransaction));
            const parsed = this.parseTransfer(cell);
            parsed.value = parsed.value.toString();
            parsed.fromAddress = parsed.fromAddress.toString(true, true, this.fromAddressBounceable);
            parsed.toAddress = parsed.toAddress.toString(true, true, this.toAddressBounceable);
            this.sender = parsed.fromAddress;
            this.recipient = { address: parsed.toAddress, amount: parsed.value };
            this.seqno = parsed.seqno;
            this.publicKey = parsed.publicKey;
            this.expireTime = parsed.expireAt;
            this.message = parsed.payload;
            this._signatures.push(parsed.signature);
            this.bounceable = parsed.bounce;
        }
        catch (e) {
            throw new Error('invalid raw transaction');
        }
    }
    /** @inheritDoc */
    explainTransaction() {
        const displayOrder = ['id', 'outputs', 'outputAmount', 'changeOutputs', 'changeAmount', 'fee'];
        const outputs = [this.recipient];
        const outputAmount = this.recipient.amount;
        return {
            displayOrder,
            id: this.id,
            outputs,
            outputAmount,
            changeOutputs: [],
            changeAmount: '0',
            fee: { fee: 'UNKNOWN' },
        };
    }
    parseTransfer(cell) {
        const slice = cell.beginParse();
        // header
        if (slice.loadUint(2).toNumber() !== 2)
            throw Error('invalid header');
        const externalSourceAddress = slice.loadAddress();
        if (externalSourceAddress !== null)
            throw Error('invalid externalSourceAddress');
        const externalDestAddress = slice.loadAddress();
        const externalImportFee = slice.loadCoins();
        if (!externalImportFee.eq(new bn_js_1.BN(0)))
            throw new Error('invalid externalImportFee');
        // stateInit
        let publicKey;
        if (slice.loadBit()) {
            if (slice.loadBit()) {
                const stateInit = slice.loadRef();
                stateInit.loadRef();
                const data = stateInit.loadRef();
                const seqno = data.loadUint(32).toNumber();
                if (seqno !== 0)
                    throw new Error('invalid seqno');
                const walletId = data.loadUint(32).toNumber();
                if (walletId !== WALLET_ID)
                    throw new Error('invalid wallet id');
                const publicKeyBuf = new Uint8Array(32);
                for (let i = 0; i < publicKeyBuf.length; i++) {
                    publicKeyBuf[i] = data.loadUint(8);
                }
                publicKey = Buffer.from(publicKeyBuf).toString('hex');
            }
        }
        // body
        const bodySlice = slice.loadBit() ? slice.loadRef() : slice;
        return {
            fromAddress: externalDestAddress,
            publicKey,
            ...this.parseTransferBody(bodySlice),
        };
    }
    parseTransferBody(slice) {
        const signature = Buffer.from(slice.loadBits(512)).toString('hex');
        // signing message
        const walletId = slice.loadUint(32).toNumber();
        if (walletId !== WALLET_ID)
            throw new Error('invalid walletId');
        const expireAt = slice.loadUint(32).toNumber();
        const seqno = slice.loadUint(32).toNumber();
        const op = slice.loadUint(8).toNumber();
        if (op !== 0)
            throw new Error('invalid op');
        const sendMode = slice.loadUint(8).toNumber();
        if (sendMode !== 3)
            throw new Error('invalid sendMode');
        let order = slice.loadRef();
        if (order.loadBit())
            throw Error('invalid internal header');
        if (!order.loadBit())
            throw Error('invalid ihrDisabled');
        const bounce = order.loadBit();
        if (order.loadBit())
            throw Error('invalid bounced');
        const sourceAddress = order.loadAddress();
        if (sourceAddress !== null)
            throw Error('invalid externalSourceAddress');
        const destAddress = order.loadAddress();
        const value = order.loadCoins();
        if (order.loadBit())
            throw Error('invalid currencyCollection');
        const ihrFees = order.loadCoins();
        if (!ihrFees.eq(new bn_js_1.BN(0)))
            throw new Error('invalid ihrFees');
        const fwdFees = order.loadCoins();
        if (!fwdFees.eq(new bn_js_1.BN(0)))
            throw new Error('invalid fwdFees');
        const createdLt = order.loadUint(64);
        if (!createdLt.eq(new bn_js_1.BN(0)))
            throw new Error('invalid createdLt');
        const createdAt = order.loadUint(32);
        if (!createdAt.eq(new bn_js_1.BN(0)))
            throw new Error('invalid createdAt');
        // order stateInit
        if (order.loadBit()) {
            order.loadRef(); // don't parse stateInit
        }
        // order body
        let payload;
        if (order.getFreeBits() > 0) {
            if (order.loadBit()) {
                order = order.loadRef();
            }
            if (order.getFreeBits() > 32) {
                const op = order.loadUint(32);
                const payloadBytes = order.loadBits(order.getFreeBits());
                payload = op.eq(new bn_js_1.BN(0)) ? new TextDecoder().decode(payloadBytes) : '';
            }
        }
        return {
            toAddress: destAddress,
            value,
            bounce,
            seqno,
            expireAt,
            payload,
            signature,
            walletId,
        };
    }
    parseTransferStateInit(slice) {
        if (slice === null)
            return {};
        slice.loadRef();
        const data = slice.loadRef();
        const seqno = data.loadUint(32).toNumber();
        if (seqno !== 0)
            throw new Error('invalid seqno');
        const walletId = data.loadUint(32).toNumber();
        if (walletId !== WALLET_ID)
            throw new Error('invalid wallet id');
        const publicKey = new Uint8Array(32);
        for (let i = 0; i < publicKey.length; i++) {
            publicKey[i] = data.loadUint(8);
        }
        return {
            publicKey: Buffer.from(publicKey).toString('hex'),
        };
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=data:application/json;base64,
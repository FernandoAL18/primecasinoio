"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChainAndIndexFromPath = exports.parsePubScript = exports.parsePubScript2Of3 = exports.parseSignatureScript2Of3 = exports.parseSignatureScript = exports.getLeafVersion = exports.calculateScriptPathLevel = exports.isValidControlBock = exports.isPlaceholderSignature = void 0;
/* eslint no-redeclare: 0 */
const opcodes = require("bitcoin-ops");
const bitcoinjs_lib_1 = require("bitcoinjs-lib");
const types_1 = require("./types");
const outputScripts_1 = require("./outputScripts");
function isPlaceholderSignature(v) {
    if (Buffer.isBuffer(v)) {
        return v.length === 0;
    }
    return v === 0;
}
exports.isPlaceholderSignature = isPlaceholderSignature;
/**
 * @return true iff P2TR script path's control block matches BitGo's need
 */
function isValidControlBock(controlBlock) {
    // The last stack element is called the control block c, and must have length 33 + 32m
    return Buffer.isBuffer(controlBlock) && 33 <= controlBlock.length && controlBlock.length % 32 === 1;
}
exports.isValidControlBock = isValidControlBock;
/**
 * @return script path level for P2TR control block
 */
function calculateScriptPathLevel(controlBlock) {
    if (!Buffer.isBuffer(controlBlock)) {
        throw new Error('Invalid control block type.');
    }
    if (controlBlock.length === 65) {
        return 1;
    }
    if (controlBlock.length === 97) {
        return 2;
    }
    throw new Error('unexpected control block length.');
}
exports.calculateScriptPathLevel = calculateScriptPathLevel;
/**
 * @return leaf version for P2TR control block.
 */
function getLeafVersion(controlBlock) {
    if (Buffer.isBuffer(controlBlock) && controlBlock.length > 0) {
        return controlBlock[0] & 0xfe;
    }
    throw new Error('unexpected leafVersion.');
}
exports.getLeafVersion = getLeafVersion;
function emptyMatchResult() {
    return {
        ':pubkey': [],
        ':pubkey-xonly': [],
        ':control-block': [],
        ':signature': [],
        ':script': [],
    };
}
class MatchError extends Error {
    constructor(message) {
        super(message);
        // this property is required to prohibit `return new Error()` when the return type demands `MatchError`
        this.__type = 'MatchError';
    }
    static forPatternElement(p) {
        if (typeof p === 'object' && ':script' in p) {
            return new MatchError(`error matching nested script`);
        }
        return new MatchError(`error matching ${p}`);
    }
}
/**
 * @param script
 * @param pattern
 * @return MatchResult if script matches pattern. The result will contain the matched values.
 */
function matchScript(script, pattern) {
    /**
     * Match a single script element with a ScriptPatternElement
     */
    function matchElement(e, p) {
        switch (p) {
            case 'OP_0':
                return e === opcodes.OP_0 || (Buffer.isBuffer(e) && e.length === 0);
            case 'OP_1':
            case 'OP_2':
            case 'OP_3':
            case 'OP_CHECKMULTISIG':
            case 'OP_CHECKSIG':
            case 'OP_CHECKSIGVERIFY':
                return e === opcodes[p];
            case ':pubkey':
                return Buffer.isBuffer(e) && (e.length === 33 || e.length === 65);
            case ':pubkey-xonly':
                return Buffer.isBuffer(e) && e.length === 32;
            case ':signature':
                return Buffer.isBuffer(e) || isPlaceholderSignature(e);
            case ':control-block':
                return Buffer.isBuffer(e) && isValidControlBock(e);
            default:
                throw new Error(`unknown pattern element ${p}`);
        }
    }
    if (script.length !== pattern.length) {
        return new MatchError(`length mismatch`);
    }
    // Go over each pattern element.
    // Collect captures into a result object.
    return pattern.reduce((obj, p, i) => {
        // if we had a previous mismatch, short-circuit
        if (obj instanceof MatchError) {
            return obj;
        }
        const e = script[i];
        // for ':script' pattern elements, decompile script element and recurse
        if (typeof p === 'object' && ':script' in p) {
            if (!Buffer.isBuffer(e)) {
                return new MatchError(`expected buffer for :script`);
            }
            const dec = bitcoinjs_lib_1.script.decompile(e);
            if (!dec) {
                return new MatchError(`error decompiling nested script`);
            }
            const match = matchScript(dec, p[':script']);
            if (match instanceof MatchError) {
                return match;
            }
            obj[':script'].push({
                buffer: e,
                match,
            });
            return obj;
        }
        const match = matchElement(e, p);
        if (!match) {
            return MatchError.forPatternElement(p);
        }
        // if pattern element is a capture, add it to the result obj
        if (p === ':signature' && e === 0) {
            obj[p].push(e);
        }
        else if (p in obj) {
            if (!Buffer.isBuffer(e)) {
                throw new Error(`invalid capture value`);
            }
            obj[p].push(e);
        }
        return obj;
    }, emptyMatchResult());
}
/**
 * @param script
 * @param patterns
 * @return first match
 */
function matchScriptSome(script, patterns) {
    for (const p of patterns) {
        const m = matchScript(script, p);
        if (m instanceof MatchError) {
            continue;
        }
        return m;
    }
    return new MatchError(`no match for script`);
}
function isLegacy(p) {
    return Boolean(p.script && !p.witness);
}
function isWrappedSegwit(p) {
    return Boolean(p.script && p.witness);
}
function isNativeSegwit(p) {
    return Boolean(!p.script && p.witness);
}
const parseP2shP2pk = (p) => {
    if (!isLegacy(p)) {
        return new MatchError(`expected legacy input`);
    }
    const match = matchScript(p.script, [':signature', { ':script': [':pubkey', 'OP_CHECKSIG'] }]);
    if (match instanceof MatchError) {
        return match;
    }
    return {
        scriptType: 'p2shP2pk',
        publicKeys: match[':script'][0].match[':pubkey'],
        signatures: match[':signature'],
    };
};
function parseP2ms(decScript, scriptType) {
    const pattern2Of3 = ['OP_2', ':pubkey', ':pubkey', ':pubkey', 'OP_3', 'OP_CHECKMULTISIG'];
    const match = matchScriptSome(decScript, [
        /* full-signed, no placeholder signature */
        ['OP_0', ':signature', ':signature', { ':script': pattern2Of3 }],
        /* half-signed, placeholder signatures */
        ['OP_0', ':signature', ':signature', ':signature', { ':script': pattern2Of3 }],
    ]);
    if (match instanceof MatchError) {
        return match;
    }
    const [redeemScript] = match[':script'];
    if (!(0, types_1.isTriple)(redeemScript.match[':pubkey'])) {
        throw new Error(`invalid pubkey count`);
    }
    return {
        scriptType,
        publicKeys: redeemScript.match[':pubkey'],
        pubScript: redeemScript.buffer,
        signatures: match[':signature'],
        redeemScript: scriptType === 'p2sh' ? redeemScript.buffer : undefined,
        witnessScript: scriptType === 'p2shP2wsh' || scriptType === 'p2wsh' ? redeemScript.buffer : undefined,
    };
}
const parseP2sh2Of3 = (p) => {
    if (!isLegacy(p)) {
        return new MatchError(`expected legacy input`);
    }
    return parseP2ms(p.script, 'p2sh');
};
const parseP2shP2wsh2Of3 = (p) => {
    if (!isWrappedSegwit(p)) {
        return new MatchError(`expected wrapped segwit input`);
    }
    return { ...parseP2ms(p.witness, 'p2shP2wsh'), redeemScript: p.script[0] };
};
const parseP2wsh2Of3 = (p) => {
    if (!isNativeSegwit(p)) {
        return new MatchError(`expected native segwit`);
    }
    return parseP2ms(p.witness, 'p2wsh');
};
const parseTaprootKeyPath2Of3 = (p) => {
    if (!isNativeSegwit(p)) {
        return new MatchError(`expected native segwit`);
    }
    const match = matchScript(p.witness, [':signature']);
    if (match instanceof MatchError) {
        return match;
    }
    const signatures = match[':signature'];
    if (isPlaceholderSignature(signatures[0])) {
        throw new Error(`invalid taproot key path signature`);
    }
    return {
        scriptType: 'taprootKeyPathSpend',
        signatures,
    };
};
const parseTaprootScriptPath2Of3 = (p) => {
    if (!isNativeSegwit(p)) {
        return new MatchError(`expected native segwit`);
    }
    // assumes no annex
    const match = matchScript(p.witness, [
        ':signature',
        ':signature',
        { ':script': [':pubkey-xonly', 'OP_CHECKSIGVERIFY', ':pubkey-xonly', 'OP_CHECKSIG'] },
        ':control-block',
    ]);
    if (match instanceof MatchError) {
        return match;
    }
    const [controlBlock] = match[':control-block'];
    const scriptPathLevel = calculateScriptPathLevel(controlBlock);
    const leafVersion = getLeafVersion(controlBlock);
    return {
        scriptType: 'taprootScriptPathSpend',
        pubScript: match[':script'][0].buffer,
        publicKeys: match[':script'][0].match[':pubkey-xonly'],
        signatures: match[':signature'],
        controlBlock,
        scriptPathLevel,
        leafVersion,
    };
};
/**
 * Parse a transaction's signature script to obtain public keys, signatures, the sig script,
 * and other properties.
 *
 * Only supports script types used in BitGo transactions.
 *
 * @param input
 * @returns ParsedSignatureScript
 */
function parseSignatureScript(input) {
    const decScript = bitcoinjs_lib_1.script.decompile(input.script);
    const parsers = [
        parseP2sh2Of3,
        parseP2shP2wsh2Of3,
        parseP2wsh2Of3,
        parseTaprootKeyPath2Of3,
        parseTaprootScriptPath2Of3,
        parseP2shP2pk,
    ];
    for (const f of parsers) {
        const parsed = f({
            script: (decScript === null || decScript === void 0 ? void 0 : decScript.length) === 0 ? null : decScript,
            witness: input.witness.length === 0 ? null : input.witness,
        });
        if (parsed instanceof MatchError) {
            continue;
        }
        return parsed;
    }
    throw new Error(`could not parse input`);
}
exports.parseSignatureScript = parseSignatureScript;
function parseSignatureScript2Of3(input) {
    const result = parseSignatureScript(input);
    if (!(0, outputScripts_1.isScriptType2Of3)(result.scriptType) &&
        result.scriptType !== 'taprootKeyPathSpend' &&
        result.scriptType !== 'taprootScriptPathSpend') {
        throw new Error(`invalid script type`);
    }
    if (!result.signatures) {
        throw new Error(`missing signatures`);
    }
    if (result.scriptType !== 'taprootKeyPathSpend' &&
        result.publicKeys.length !== 3 &&
        (result.publicKeys.length !== 2 || result.scriptType !== 'taprootScriptPathSpend')) {
        throw new Error(`unexpected pubkey count`);
    }
    return result;
}
exports.parseSignatureScript2Of3 = parseSignatureScript2Of3;
const parseP2shP2pkPubScript = (pubScript, scriptType) => {
    if (scriptType !== 'p2shP2pk') {
        throw new Error('invalid script type');
    }
    const match = matchScript([pubScript], [{ ':script': [':pubkey', 'OP_CHECKSIG'] }]);
    if (match instanceof MatchError) {
        return match;
    }
    const [script] = match[':script'];
    return {
        scriptType,
        publicKeys: script.match[':pubkey'],
        pubScript: pubScript,
        redeemScript: pubScript,
    };
};
const parseP2msPubScript = (pubScript, scriptType) => {
    if (scriptType === 'taprootScriptPathSpend' || scriptType === 'taprootKeyPathSpend' || scriptType === 'p2shP2pk') {
        throw new Error('invalid script type');
    }
    const match = matchScript([pubScript], [{ ':script': ['OP_2', ':pubkey', ':pubkey', ':pubkey', 'OP_3', 'OP_CHECKMULTISIG'] }]);
    if (match instanceof MatchError) {
        return match;
    }
    const [redeemScript] = match[':script'];
    if (!(0, types_1.isTriple)(redeemScript.match[':pubkey'])) {
        throw new Error('invalid pubkey count');
    }
    return {
        scriptType,
        publicKeys: redeemScript.match[':pubkey'],
        pubScript: redeemScript.buffer,
        redeemScript: scriptType === 'p2sh' ? redeemScript.buffer : undefined,
        witnessScript: scriptType === 'p2shP2wsh' || scriptType === 'p2wsh' ? redeemScript.buffer : undefined,
    };
};
const parseTaprootKeyPathPubScript = (pubScript, scriptType) => {
    if (scriptType === 'p2sh' ||
        scriptType === 'p2wsh' ||
        scriptType === 'p2shP2wsh' ||
        scriptType === 'taprootScriptPathSpend' ||
        scriptType === 'p2shP2pk') {
        throw new Error('invalid script type');
    }
    const match = matchScript([pubScript], [{ ':script': ['OP_1', ':pubkey-xonly'] }]);
    if (match instanceof MatchError) {
        return match;
    }
    const [script] = match[':script'];
    return {
        scriptType: 'taprootKeyPathSpend',
        publicKeys: script.match[':pubkey-xonly'],
        pubScript: pubScript,
    };
};
const parseTaprootScriptPathPubScript = (pubScript, scriptType) => {
    if (scriptType === 'p2sh' ||
        scriptType === 'p2wsh' ||
        scriptType === 'p2shP2wsh' ||
        scriptType === 'taprootKeyPathSpend' ||
        scriptType === 'p2shP2pk') {
        throw new Error('invalid script type');
    }
    const match = matchScript([pubScript], [{ ':script': [':pubkey-xonly', 'OP_CHECKSIGVERIFY', ':pubkey-xonly', 'OP_CHECKSIG'] }]);
    if (match instanceof MatchError) {
        return match;
    }
    return {
        scriptType,
        pubScript: match[':script'][0].buffer,
        publicKeys: match[':script'][0].match[':pubkey-xonly'],
    };
};
function parsePubScript2Of3(inputPubScript, scriptType) {
    const result = scriptType === 'taprootKeyPathSpend'
        ? parseTaprootKeyPathPubScript(inputPubScript, scriptType)
        : scriptType === 'taprootScriptPathSpend'
            ? parseTaprootScriptPathPubScript(inputPubScript, scriptType)
            : parseP2msPubScript(inputPubScript, scriptType);
    if (result instanceof MatchError) {
        throw new Error(result.message);
    }
    if ((result.scriptType === 'taprootKeyPathSpend' && result.publicKeys.length !== 1) ||
        (result.scriptType === 'taprootScriptPathSpend' && result.publicKeys.length !== 2) ||
        ((0, outputScripts_1.isScriptType2Of3)(result.scriptType) && result.publicKeys.length !== 3)) {
        throw new Error('unexpected pubkey count');
    }
    return result;
}
exports.parsePubScript2Of3 = parsePubScript2Of3;
function parsePubScript(inputPubScript, scriptType) {
    const result = scriptType === 'p2shP2pk'
        ? parseP2shP2pkPubScript(inputPubScript, scriptType)
        : parsePubScript2Of3(inputPubScript, scriptType);
    if (result instanceof MatchError) {
        throw new Error(result.message);
    }
    if (result.scriptType === 'p2shP2pk' && result.publicKeys.length !== 1) {
        throw new Error('unexpected pubkey count');
    }
    return result;
}
exports.parsePubScript = parsePubScript;
function getChainAndIndexFromPath(path) {
    const parts = path.split('/');
    if (parts.length <= 2) {
        throw new Error(`invalid path "${path}"`);
    }
    const chain = Number(parts[parts.length - 2]);
    const index = Number(parts[parts.length - 1]);
    if (isNaN(chain) || isNaN(index)) {
        throw new Error(`Could not parse chain and index into numbers from path ${path}`);
    }
    if (chain < 0 || index < 0) {
        throw new Error(`chain and index must be non-negative`);
    }
    return { chain, index };
}
exports.getChainAndIndexFromPath = getChainAndIndexFromPath;
//# sourceMappingURL=data:application/json;base64,
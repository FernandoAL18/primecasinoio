"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockstreamApi = void 0;
const utxo_lib_1 = require("@bitgo/utxo-lib");
const BaseHttpClient_1 = require("../BaseHttpClient");
const ApiBuilder_1 = require("../ApiBuilder");
const formatOutputId = utxo_lib_1.bitgo.formatOutputId;
function toBitGoUnspent(u, address, value) {
    return {
        id: formatOutputId(u),
        address,
        value,
    };
}
class BlockstreamApi {
    constructor(client) {
        this.client = client;
    }
    static forCoin(coinName, params = {}) {
        const { httpClient = new BaseHttpClient_1.BaseHttpClient() } = params;
        switch (coinName) {
            case 'btc':
                return new BlockstreamApi(httpClient.withBaseUrl('https://blockstream.info/api'));
            case 'tbtc':
                return new BlockstreamApi(httpClient.withBaseUrl('https://blockstream.info/testnet/api'));
        }
        throw new ApiBuilder_1.ApiNotImplementedError(coinName);
    }
    async getBlockIdAtHeight(height) {
        // https://github.com/Blockstream/esplora/blob/master/API.md#get-block-heightheight
        return (await this.client.get(`/block-height/${height}`)).map((body) => body);
    }
    async getTransactionIds(hash) {
        // https://github.com/Blockstream/esplora/blob/master/API.md#get-blockhashtxids
        return (await this.client.get(`/block/${hash}/txids`)).map((body) => body);
    }
    async getAddressInfo(address) {
        const response = await this.client.get(`/address/${address}`);
        return response.map((body) => {
            return {
                txCount: body.chain_stats.tx_count,
                balance: body.chain_stats.funded_txo_sum - body.chain_stats.spent_txo_sum,
            };
        });
    }
    async getUnspentsForAddresses(addrs) {
        if (addrs.length !== 1) {
            return (await (0, BaseHttpClient_1.mapSeries)(addrs, (a) => this.getUnspentsForAddresses([a]))).flat();
        }
        const [address] = addrs;
        return (await this.client.get(`/address/${address}/utxo`)).map((unspents) => unspents.map((u) => toBitGoUnspent(u, address, u.value)));
    }
    async getTransactionHex(txid) {
        return (await this.client.get(`/tx/${txid}/hex`)).map((v) => v);
    }
    async getTransactionStatus(txid) {
        try {
            return (await this.client.get(`/tx/${txid}`)).map(({ status }) => status.confirmed
                ? { found: true, confirmed: true, blockHeight: status.block_height, blockHash: status.block_hash }
                : { found: true, confirmed: false });
        }
        catch (e) {
            if (e instanceof BaseHttpClient_1.ApiRequestError) {
                const reason = e.reason;
                if (reason.response.status === 404 && reason.response.text === 'Transaction not found') {
                    return { found: false };
                }
            }
            throw e;
        }
    }
    async getTransactionInputs(txid) {
        return (await this.client.get(`/tx/${txid}`)).map((body) => body.vin.map((u) => toBitGoUnspent(u, u.prevout.scriptpubkey_address, u.prevout.value)));
    }
    async getTransactionIO(txid) {
        const tx = await this.client.get(`/tx/${txid}`);
        const inputs = tx.map((body) => body.vin.map((u) => {
            return {
                address: u.prevout.scriptpubkey_address,
            };
        }));
        const outputs = tx.map((body) => body.vout.map((u) => {
            return {
                address: u.scriptpubkey_address,
            };
        }));
        return {
            inputs,
            outputs,
        };
    }
    async getTransactionSpends(txid) {
        return (await this.client.get(`/tx/${txid}/outspends`)).map((arr) => arr.map((v) => (v.txid ? { txid: v.txid, vin: v.vin } : { txid: undefined, vin: undefined })));
    }
}
exports.BlockstreamApi = BlockstreamApi;
//# sourceMappingURL=data:application/json;base64,
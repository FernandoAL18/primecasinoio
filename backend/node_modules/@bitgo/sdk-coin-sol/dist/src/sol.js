"use strict";
/**
 * @prettier
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sol = exports.DEFAULT_SCAN_FACTOR = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const base58 = __importStar(require("bs58"));
const sdk_core_1 = require("@bitgo/sdk-core");
const sdk_lib_mpc_1 = require("@bitgo/sdk-lib-mpc");
const statics_1 = require("@bitgo/statics");
const _ = __importStar(require("lodash"));
const request = __importStar(require("superagent"));
const lib_1 = require("./lib");
const utils_1 = require("./lib/utils");
exports.DEFAULT_SCAN_FACTOR = 20; // default number of receive addresses to scan for funds
const HEX_REGEX = /^[0-9a-fA-F]+$/;
class Sol extends sdk_core_1.BaseCoin {
    constructor(bitgo, staticsCoin) {
        super(bitgo);
        if (!staticsCoin) {
            throw new Error('missing required constructor parameter staticsCoin');
        }
        this._staticsCoin = staticsCoin;
    }
    static createInstance(bitgo, staticsCoin) {
        return new Sol(bitgo, staticsCoin);
    }
    allowsAccountConsolidations() {
        return true;
    }
    supportsTss() {
        return true;
    }
    getMPCAlgorithm() {
        return 'eddsa';
    }
    getChain() {
        return this._staticsCoin.name;
    }
    getFamily() {
        return this._staticsCoin.family;
    }
    getFullName() {
        return this._staticsCoin.fullName;
    }
    getNetwork() {
        return this._staticsCoin.network;
    }
    getBaseFactor() {
        return Math.pow(10, this._staticsCoin.decimalPlaces);
    }
    async verifyTransaction(params) {
        var _a, _b;
        // asset name to transfer amount map
        const totalAmount = {};
        const coinConfig = statics_1.coins.get(this.getChain());
        const { txParams: txParams, txPrebuild: txPrebuild, memo: memo, durableNonce: durableNonce } = params;
        const transaction = new lib_1.Transaction(coinConfig);
        const rawTx = txPrebuild.txBase64 || txPrebuild.txHex;
        const consolidateId = txPrebuild.consolidateId;
        const walletRootAddress = (_a = params.wallet.coinSpecific()) === null || _a === void 0 ? void 0 : _a.rootAddress;
        if (!rawTx) {
            throw new Error('missing required tx prebuild property txBase64 or txHex');
        }
        let rawTxBase64 = rawTx;
        if (HEX_REGEX.test(rawTx)) {
            rawTxBase64 = Buffer.from(rawTx, 'hex').toString('base64');
        }
        transaction.fromRawTransaction(rawTxBase64);
        const explainedTx = transaction.explainTransaction();
        // users do not input recipients for consolidation requests as they are generated by the server
        if (txParams.recipients !== undefined) {
            const filteredRecipients = (_b = txParams.recipients) === null || _b === void 0 ? void 0 : _b.map((recipient) => _.pick(recipient, ['address', 'amount', 'tokenName']));
            const filteredOutputs = explainedTx.outputs.map((output) => _.pick(output, ['address', 'amount', 'tokenName']));
            if (filteredRecipients.length !== filteredOutputs.length) {
                throw new Error('Number of tx outputs does not match with number of txParams recipients');
            }
            // For each recipient, check if it's a token tx (tokenName will exist if so)
            // If it is a token tx, verify that the recipient address equals the derived address from explainedTx
            // Derive the ATA if it is a native address and confirm it is equal to the explained tx recipient
            const recipientChecks = await Promise.all(filteredRecipients.map(async (recipientFromUser, index) => {
                const recipientFromTx = filteredOutputs[index]; // This address should be an ATA
                // Compare the BigNumber values because amount is (string | number)
                const userAmount = new bignumber_js_1.default(recipientFromUser.amount);
                const txAmount = new bignumber_js_1.default(recipientFromTx.amount);
                if (!userAmount.isEqualTo(txAmount)) {
                    return false;
                }
                // Compare the addresses and tokenNames
                // Else if the addresses are not the same, check the derived ATA for parity
                if (recipientFromUser.address === recipientFromTx.address &&
                    recipientFromUser.tokenName === recipientFromTx.tokenName) {
                    return true;
                }
                else if (recipientFromUser.address !== recipientFromTx.address && recipientFromUser.tokenName) {
                    // Try to check if the user's derived ATA is equal to the tx recipient address
                    // If getAssociatedTokenAccountAddress throws an error, then we are unable to derive the ATA for that address.
                    // Return false and throw an error if that is the case.
                    try {
                        const tokenMintAddress = (0, utils_1.getSolTokenFromTokenName)(recipientFromUser.tokenName);
                        return (0, utils_1.getAssociatedTokenAccountAddress)(tokenMintAddress.tokenAddress, recipientFromUser.address).then((ata) => {
                            return ata === recipientFromTx.address;
                        });
                    }
                    catch {
                        // Unable to derive ATA
                        return false;
                    }
                }
                return false;
            }));
            if (recipientChecks.includes(false)) {
                throw new Error('Tx outputs does not match with expected txParams recipients');
            }
        }
        const transactionJson = transaction.toJson();
        if (memo && memo.value !== explainedTx.memo) {
            throw new Error('Tx memo does not match with expected txParams recipient memo');
        }
        if (txParams.recipients) {
            for (const recipients of txParams.recipients) {
                // totalAmount based on each token
                const assetName = recipients.tokenName || this.getChain();
                const amount = totalAmount[assetName] || new bignumber_js_1.default(0);
                totalAmount[assetName] = amount.plus(recipients.amount);
            }
            // total output amount from explainedTx
            const explainedTxTotal = {};
            for (const output of explainedTx.outputs) {
                // total output amount based on each token
                const assetName = output.tokenName || this.getChain();
                const amount = explainedTxTotal[assetName] || new bignumber_js_1.default(0);
                explainedTxTotal[assetName] = amount.plus(output.amount);
            }
            if (!_.isEqual(explainedTxTotal, totalAmount)) {
                throw new Error('Tx total amount does not match with expected total amount field');
            }
        }
        // For non-consolidate transactions, feePayer must be the wallet's root address
        if (consolidateId === undefined && transactionJson.feePayer !== walletRootAddress) {
            throw new Error('Tx fee payer is not the wallet root address');
        }
        if (durableNonce && !_.isEqual(explainedTx.durableNonce, durableNonce)) {
            throw new Error('Tx durableNonce does not match with param durableNonce');
        }
        return true;
    }
    async isWalletAddress(params) {
        throw new sdk_core_1.MethodNotImplementedError();
    }
    /**
     * Generate Solana key pair
     *
     * @param {Buffer} seed - Seed from which the new SolKeyPair should be generated, otherwise a random seed is used
     * @returns {Object} object with generated pub and prv
     */
    generateKeyPair(seed) {
        const result = seed ? new lib_1.KeyPair({ seed }).getKeys() : new lib_1.KeyPair().getKeys();
        return result;
    }
    /**
     * Return boolean indicating whether input is valid public key for the coin
     *
     * @param {string} pub the prv to be checked
     * @returns is it valid?
     */
    isValidPub(pub) {
        return (0, utils_1.isValidPublicKey)(pub);
    }
    /**
     * Return boolean indicating whether input is valid private key for the coin
     *
     * @param {string} prv the prv to be checked
     * @returns is it valid?
     */
    isValidPrv(prv) {
        return (0, utils_1.isValidPrivateKey)(prv);
    }
    isValidAddress(address) {
        return (0, utils_1.isValidAddress)(address);
    }
    async signMessage(key, message) {
        const solKeypair = new lib_1.KeyPair({ prv: key.prv });
        if (Buffer.isBuffer(message)) {
            message = base58.encode(message);
        }
        return Buffer.from(solKeypair.signMessage(message));
    }
    /**
     * Signs Solana transaction
     * @param params
     * @param callback
     */
    async signTransaction(params) {
        const factory = this.getBuilder();
        const rawTx = params.txPrebuild.txHex || params.txPrebuild.txBase64;
        const txBuilder = factory.from(rawTx);
        txBuilder.sign({ key: params.prv });
        const transaction = await txBuilder.build();
        if (!transaction) {
            throw new Error('Invalid transaction');
        }
        const serializedTx = transaction.toBroadcastFormat();
        return {
            txHex: serializedTx,
        };
    }
    async parseTransaction(params) {
        const transactionExplanation = await this.explainTransaction({
            txBase64: params.txBase64,
            feeInfo: params.feeInfo,
            tokenAccountRentExemptAmount: params.tokenAccountRentExemptAmount,
        });
        if (!transactionExplanation) {
            throw new Error('Invalid transaction');
        }
        const solTransaction = transactionExplanation;
        if (solTransaction.outputs.length <= 0) {
            return {
                inputs: [],
                outputs: [],
            };
        }
        const senderAddress = solTransaction.outputs[0].address;
        const feeAmount = new bignumber_js_1.default(solTransaction.fee.fee);
        // assume 1 sender, who is also the fee payer
        const inputs = [
            {
                address: senderAddress,
                amount: new bignumber_js_1.default(solTransaction.outputAmount).plus(feeAmount).toNumber(),
            },
        ];
        const outputs = solTransaction.outputs.map(({ address, amount, tokenName }) => {
            const output = { address, amount };
            if (tokenName) {
                output.tokenName = tokenName;
            }
            return output;
        });
        return {
            inputs,
            outputs,
        };
    }
    /**
     * Explain a Solana transaction from txBase64
     * @param params
     */
    async explainTransaction(params) {
        const factory = this.getBuilder();
        let rebuiltTransaction;
        try {
            const transactionBuilder = factory.from(params.txBase64);
            if (transactionBuilder instanceof lib_1.TransactionBuilder) {
                const txBuilder = transactionBuilder;
                txBuilder.fee({ amount: params.feeInfo.fee });
                if (params.tokenAccountRentExemptAmount) {
                    txBuilder.associatedTokenAccountRent(params.tokenAccountRentExemptAmount);
                }
            }
            rebuiltTransaction = await transactionBuilder.build();
        }
        catch (e) {
            console.log(e);
            throw new Error('Invalid transaction');
        }
        const explainedTransaction = rebuiltTransaction.explainTransaction();
        return explainedTransaction;
    }
    /** @inheritDoc */
    async getSignablePayload(serializedTx) {
        const factory = this.getBuilder();
        const rebuiltTransaction = await factory.from(serializedTx).build();
        return rebuiltTransaction.signablePayload;
    }
    /** @inheritDoc */
    async presignTransaction(params) {
        var _a, _b, _c;
        // Hot wallet txns are only valid for 1-2 minutes.
        // To buy more time, we rebuild the transaction with a new blockhash right before we sign.
        if (params.walletData.type !== 'hot') {
            return Promise.resolve(params);
        }
        const txRequestId = (_a = params.txPrebuild) === null || _a === void 0 ? void 0 : _a.txRequestId;
        if (txRequestId === undefined) {
            throw new Error('Missing txRequestId');
        }
        const { tssUtils } = params;
        await tssUtils.deleteSignatureShares(txRequestId);
        const recreated = await tssUtils.getTxRequest(txRequestId);
        let txHex = '';
        if (recreated.unsignedTxs) {
            txHex = (_b = recreated.unsignedTxs[0]) === null || _b === void 0 ? void 0 : _b.serializedTxHex;
        }
        else {
            txHex = recreated.transactions ? (_c = recreated.transactions[0]) === null || _c === void 0 ? void 0 : _c.unsignedTx.serializedTxHex : '';
        }
        if (!txHex) {
            throw new Error('Missing serialized tx hex');
        }
        return Promise.resolve({
            ...params,
            txPrebuild: recreated,
            txHex,
        });
    }
    getPublicNodeUrl() {
        return sdk_core_1.Environments[this.bitgo.getEnv()].solNodeUrl;
    }
    /**
     * Make a request to one of the public SOL nodes available
     * @param params.payload
     */
    async getDataFromNode(params) {
        const nodeUrl = this.getPublicNodeUrl();
        try {
            return await request.post(nodeUrl).send(params.payload);
        }
        catch (e) {
            console.debug(e);
        }
        throw new Error(`Unable to call endpoint: '/' from node: ${nodeUrl}`);
    }
    async getBlockhash() {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getLatestBlockhash',
                params: [
                    {
                        commitment: 'finalized',
                    },
                ],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.result.value.blockhash;
    }
    /** TODO Update to getFeeForMessage and make necssary changes in fee calculation, GetFees is deprecated */
    async getFees() {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getFees',
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.result.value.feeCalculator.lamportsPerSignature;
    }
    async getRentExemptAmount() {
        const response = await this.getDataFromNode({
            payload: {
                jsonrpc: '2.0',
                id: '1',
                method: 'getMinimumBalanceForRentExemption',
                params: [165],
            },
        });
        if (response.status !== 200 || response.error) {
            throw new Error(JSON.stringify(response.error));
        }
        return response.body.result;
    }
    async getAccountBalance(pubKey) {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getBalance',
                params: [pubKey],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return response.body.result.value;
    }
    async getAccountInfo(pubKey) {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getAccountInfo',
                params: [
                    pubKey,
                    {
                        encoding: 'jsonParsed',
                    },
                ],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return {
            authority: response.body.result.value.data.parsed.info.authority,
            blockhash: response.body.result.value.data.parsed.info.blockhash,
        };
    }
    async getTokenAccountsByOwner(pubKey = '') {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getTokenAccountsByOwner',
                params: [
                    pubKey,
                    {
                        programId: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
                    },
                    {
                        encoding: 'jsonParsed',
                    },
                ],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        if (response.body.result.value.length !== 0) {
            const tokenAccounts = [];
            for (const tokenAccount of response.body.result.value) {
                tokenAccounts.push({ info: tokenAccount.account.data.parsed.info, pubKey: tokenAccount.pubKey });
            }
            return tokenAccounts;
        }
        return [];
    }
    async getTokenAccountInfo(pubKey) {
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'getAccountInfo',
                params: [
                    pubKey,
                    {
                        encoding: 'jsonParsed',
                    },
                ],
            },
        });
        if (response.status !== 200) {
            throw new Error('Account not found');
        }
        return {
            pubKey: pubKey,
            info: response.body.result.value.data.parsed.info,
        };
    }
    /** inherited doc */
    async createBroadcastableSweepTransaction(params) {
        var _a;
        if (!params.signatureShares) {
            ('Missing transaction(s)');
        }
        const req = params.signatureShares;
        const broadcastableTransactions = [];
        let lastScanIndex = 0;
        for (let i = 0; i < req.length; i++) {
            const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
            const transaction = req[i].txRequest.transactions[0].unsignedTx;
            if (!req[i].ovc || !req[i].ovc[0].eddsaSignature) {
                throw new Error('Missing signature(s)');
            }
            const signature = req[i].ovc[0].eddsaSignature;
            if (!transaction.signableHex) {
                throw new Error('Missing signable hex');
            }
            const messageBuffer = Buffer.from(transaction.signableHex, 'hex');
            const result = MPC.verify(messageBuffer, signature);
            if (!result) {
                throw new Error('Invalid signature');
            }
            const signatureHex = Buffer.concat([Buffer.from(signature.R, 'hex'), Buffer.from(signature.sigma, 'hex')]);
            const txBuilder = this.getBuilder().from(transaction.serializedTx);
            if (!((_a = transaction.coinSpecific) === null || _a === void 0 ? void 0 : _a.commonKeychain)) {
                throw new Error('Missing common keychain');
            }
            const commonKeychain = transaction.coinSpecific.commonKeychain;
            if (!transaction.derivationPath) {
                throw new Error('Missing derivation path');
            }
            const derivationPath = transaction.derivationPath;
            const accountId = MPC.deriveUnhardened(commonKeychain, derivationPath).slice(0, 64);
            const bs58EncodedPublicKey = new lib_1.KeyPair({ pub: accountId }).getAddress();
            // add combined signature from ovc
            const publicKeyObj = { pub: bs58EncodedPublicKey };
            txBuilder.addSignature(publicKeyObj, signatureHex);
            const signedTransaction = await txBuilder.build();
            const serializedTx = signedTransaction.toBroadcastFormat();
            broadcastableTransactions.push({
                serializedTx: serializedTx,
                scanIndex: transaction.scanIndex,
            });
            if (i === req.length - 1 && transaction.coinSpecific.lastScanIndex) {
                lastScanIndex = transaction.coinSpecific.lastScanIndex;
            }
        }
        return { transactions: broadcastableTransactions, lastScanIndex };
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param {SolRecoveryOptions} params parameters needed to construct and
     * (maybe) sign the transaction
     *
     * @returns {MPCTx | MPCSweepTxs} the serialized transaction hex string and index
     * of the address being swept
     */
    async recover(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        // Build the transaction
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        let balance = 0;
        const feePerSignature = await this.getFees();
        const baseFee = params.durableNonce ? feePerSignature * 2 : feePerSignature;
        let totalFee = new bignumber_js_1.default(baseFee);
        const index = params.index || 0;
        const currPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 64);
        const bs58EncodedPublicKey = new lib_1.KeyPair({ pub: accountId }).getAddress();
        balance = await this.getAccountBalance(bs58EncodedPublicKey);
        if (totalFee.gt(balance)) {
            throw Error('Did not find address with funds to recover');
        }
        const factory = this.getBuilder();
        const walletCoin = this.getChain();
        let txBuilder;
        let blockhash = await this.getBlockhash();
        let rentExemptAmount;
        let authority = '';
        if (params.durableNonce) {
            const durableNonceInfo = await this.getAccountInfo(params.durableNonce.publicKey);
            blockhash = durableNonceInfo.blockhash;
            authority = durableNonceInfo.authority;
        }
        // check for possible token recovery, recover the token provide by user
        if (params.tokenContractAddress) {
            const tokenAccounts = await this.getTokenAccountsByOwner(bs58EncodedPublicKey);
            if (tokenAccounts.length !== 0) {
                // there exists token accounts on the given address, but need to check certain conditions:
                // 1. if there is a recoverable balance
                // 2. if the token is supported by bitgo
                const recovereableTokenAccounts = [];
                for (const tokenAccount of tokenAccounts) {
                    if (params.tokenContractAddress === tokenAccount.info.mint) {
                        const tokenAmount = new bignumber_js_1.default(tokenAccount.info.tokenAmount.amount);
                        const network = this.getNetwork();
                        const token = (0, utils_1.getSolTokenFromAddress)(tokenAccount.info.mint, network);
                        if (!_.isUndefined(token) && tokenAmount.gt(new bignumber_js_1.default(0))) {
                            tokenAccount.tokenName = token.name;
                            recovereableTokenAccounts.push(tokenAccount);
                        }
                        break;
                    }
                }
                if (recovereableTokenAccounts.length !== 0) {
                    rentExemptAmount = await this.getRentExemptAmount();
                    txBuilder = factory
                        .getTokenTransferBuilder()
                        .nonce(blockhash)
                        .sender(bs58EncodedPublicKey)
                        .fee({ amount: feePerSignature })
                        .associatedTokenAccountRent(rentExemptAmount.toString())
                        .feePayer(bs58EncodedPublicKey);
                    // need to get all token accounts of the recipient address and need to create them if they do not exist
                    const recipientTokenAccounts = await this.getTokenAccountsByOwner(params.recoveryDestination);
                    for (const tokenAccount of recovereableTokenAccounts) {
                        let recipientTokenAccountExists = false;
                        for (const recipientTokenAccount of recipientTokenAccounts) {
                            if (recipientTokenAccount.info.mint === tokenAccount.info.mint) {
                                recipientTokenAccountExists = true;
                                break;
                            }
                        }
                        const recipientTokenAccount = await (0, utils_1.getAssociatedTokenAccountAddress)(tokenAccount.info.mint, params.recoveryDestination);
                        const tokenName = tokenAccount.tokenName;
                        txBuilder.send({
                            address: recipientTokenAccount,
                            amount: tokenAccount.info.tokenAmount.amount,
                            tokenName: tokenName,
                        });
                        if (!recipientTokenAccountExists) {
                            // recipient token account does not exist for token and must be created
                            txBuilder.createAssociatedTokenAccount({
                                ownerAddress: params.recoveryDestination,
                                tokenName: tokenName,
                            });
                            // add rent exempt amount to total fee for each token account that has to be created
                            totalFee = totalFee.plus(rentExemptAmount);
                        }
                    }
                    // there are recoverable token accounts, need to check if there is sufficient native solana to recover tokens
                    if (new bignumber_js_1.default(balance).lt(totalFee)) {
                        throw Error('Not enough funds to pay for recover tokens fees, have: ' + balance + ' need: ' + totalFee.toString());
                    }
                }
                else {
                    throw Error('Not enough token funds to recover');
                }
            }
            else {
                // there are no recoverable token accounts , need to check if there are tokens to recover
                throw Error('Did not find token account to recover tokens, please check token account');
            }
        }
        else {
            const netAmount = new bignumber_js_1.default(balance).minus(totalFee);
            txBuilder = factory
                .getTransferBuilder()
                .nonce(blockhash)
                .sender(bs58EncodedPublicKey)
                .send({ address: params.recoveryDestination, amount: netAmount.toString() })
                .fee({ amount: feePerSignature })
                .feePayer(bs58EncodedPublicKey);
        }
        if (params.durableNonce) {
            txBuilder.nonce(blockhash, {
                walletNonceAddress: params.durableNonce.publicKey,
                authWalletAddress: authority,
            });
        }
        if (!isUnsignedSweep) {
            // Sign the txn
            if (!params.userKey) {
                throw new Error('missing userKey');
            }
            if (!params.backupKey) {
                throw new Error('missing backupKey');
            }
            if (!params.walletPassphrase) {
                throw new Error('missing wallet passphrase');
            }
            const unsignedTransaction = (await txBuilder.build());
            const userKey = params.userKey.replace(/\s/g, '');
            const backupKey = params.backupKey.replace(/\s/g, '');
            // Decrypt private keys from KeyCard values
            let userPrv;
            try {
                userPrv = this.bitgo.decrypt({
                    input: userKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting user keychain: ${e.message}`);
            }
            const userSigningMaterial = JSON.parse(userPrv);
            let backupPrv;
            try {
                backupPrv = this.bitgo.decrypt({
                    input: backupKey,
                    password: params.walletPassphrase,
                });
            }
            catch (e) {
                throw new Error(`Error decrypting backup keychain: ${e.message}`);
            }
            const backupSigningMaterial = JSON.parse(backupPrv);
            const signatureHex = await sdk_core_1.EDDSAMethods.getTSSSignature(userSigningMaterial, backupSigningMaterial, currPath, unsignedTransaction);
            const publicKeyObj = { pub: bs58EncodedPublicKey };
            txBuilder.addSignature(publicKeyObj, signatureHex);
        }
        if (params.durableNonce) {
            // add durable nonce account signature
            txBuilder.sign({ key: params.durableNonce.secretKey });
        }
        const completedTransaction = await txBuilder.build();
        const serializedTx = completedTransaction.toBroadcastFormat();
        const derivationPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const inputs = [];
        for (const input of completedTransaction.inputs) {
            inputs.push({
                address: input.address,
                valueString: input.value,
                value: new bignumber_js_1.default(input.value).toNumber(),
            });
        }
        const outputs = [];
        for (const output of completedTransaction.outputs) {
            outputs.push({
                address: output.address,
                valueString: output.value,
                coinName: output.coin ? output.coin : walletCoin,
            });
        }
        const spendAmount = completedTransaction.inputs.length === 1 ? completedTransaction.inputs[0].value : 0;
        const parsedTx = { inputs: inputs, outputs: outputs, spendAmount: spendAmount, type: '' };
        const feeInfo = { fee: totalFee.toNumber(), feeString: totalFee.toString() };
        const coinSpecific = { commonKeychain: bitgoKey };
        if (isUnsignedSweep) {
            const transaction = {
                serializedTx: serializedTx,
                scanIndex: index,
                coin: walletCoin,
                signableHex: completedTransaction.signablePayload.toString('hex'),
                derivationPath: derivationPath,
                parsedTx: parsedTx,
                feeInfo: feeInfo,
                coinSpecific: coinSpecific,
            };
            const unsignedTx = { unsignedTx: transaction, signatureShares: [] };
            const transactions = [unsignedTx];
            const txRequest = {
                transactions: transactions,
                walletCoin: walletCoin,
            };
            const txRequests = { txRequests: [txRequest] };
            return txRequests;
        }
        const transaction = {
            serializedTx: serializedTx,
            scanIndex: index,
        };
        return transaction;
    }
    /**
     * Builds a funds recovery transaction without BitGo
     * @param {SolRecoveryOptions} params parameters needed to construct and
     * (maybe) sign the transaction
     *
     * @returns {BaseBroadcastTransactionResult[]} the serialized transaction hex string and index
     * of the address being swept
     */
    async recoverCloseATA(params) {
        if (!params.bitgoKey) {
            throw new Error('missing bitgoKey');
        }
        if (!params.recoveryDestination || !this.isValidAddress(params.recoveryDestination)) {
            throw new Error('invalid recoveryDestination');
        }
        if (!params.closeAtaAddress || !this.isValidAddress(params.closeAtaAddress)) {
            throw new Error('invalid closeAtaAddress');
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        // Build the transaction
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        let balance = 0;
        const feePerSignature = await this.getFees();
        const baseFee = params.durableNonce ? feePerSignature * 2 : feePerSignature;
        const totalFee = new bignumber_js_1.default(baseFee);
        const index = params.index || 0;
        const currPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, currPath).slice(0, 64);
        const bs58EncodedPublicKey = new lib_1.KeyPair({ pub: accountId }).getAddress();
        balance = await this.getAccountBalance(bs58EncodedPublicKey);
        if (totalFee.gt(balance)) {
            throw Error('Did not find address with funds to recover');
        }
        balance = await this.getAccountBalance(params.closeAtaAddress);
        if (balance <= 0) {
            throw Error('Did not find closeAtaAddress with sol funds to recover');
        }
        const factory = this.getBuilder();
        let txBuilder;
        let blockhash;
        const recovertTxns = [];
        const rentExemptAmount = await this.getRentExemptAmount();
        // do token recovery before closing ATA address
        // check if any token is present on the closeAtaAddress
        const tokenInfo = await this.getTokenAccountInfo(params.closeAtaAddress);
        const tokenBalance = Number(tokenInfo.info.tokenAmount.amount);
        if (tokenBalance > 0) {
            // closeATA address has some token balance, it needs to be withdrawn before closing ATA
            console.log(`closeATA address ${params.closeAtaAddress} has token balance ${tokenBalance}, it needs to be withdrawn before closing ATA address`);
            if (!params.recoveryDestinationAtaAddress || !this.isValidAddress(params.recoveryDestinationAtaAddress)) {
                throw new Error('invalid recoveryDestinationAtaAddress');
            }
            blockhash = await this.getBlockhash();
            txBuilder = factory
                .getTokenTransferBuilder()
                .nonce(blockhash)
                .sender(bs58EncodedPublicKey)
                .fee({ amount: feePerSignature })
                .associatedTokenAccountRent(rentExemptAmount.toString())
                .feePayer(bs58EncodedPublicKey);
            const network = this.getNetwork();
            const token = (0, utils_1.getSolTokenFromAddress)(tokenInfo.info.mint, network);
            txBuilder.send({
                address: params.recoveryDestinationAtaAddress,
                amount: tokenBalance,
                tokenName: token === null || token === void 0 ? void 0 : token.name,
            });
            const tokenRecoveryTxn = await this.signAndGenerateBroadcastableTransaction(params, txBuilder, bs58EncodedPublicKey);
            const serializedTokenRecoveryTxn = (await tokenRecoveryTxn).serializedTx;
            const broadcastTokenRecoveryTxn = await this.broadcastTransaction({
                serializedSignedTransaction: serializedTokenRecoveryTxn,
            });
            console.log(broadcastTokenRecoveryTxn);
            recovertTxns.push(broadcastTokenRecoveryTxn);
        }
        // after recovering the token amount, attempting to close the ATA address
        if (params.closeAtaAddress) {
            blockhash = await this.getBlockhash();
            const ataCloseBuilder = () => {
                var _a;
                const txBuilder = factory.getCloseAtaInitializationBuilder();
                txBuilder.nonce(blockhash);
                txBuilder.sender(bs58EncodedPublicKey);
                txBuilder.accountAddress((_a = params.closeAtaAddress) !== null && _a !== void 0 ? _a : '');
                txBuilder.destinationAddress(params.recoveryDestination);
                txBuilder.authorityAddress(bs58EncodedPublicKey);
                txBuilder.associatedTokenAccountRent(rentExemptAmount.toString());
                return txBuilder;
            };
            txBuilder = ataCloseBuilder();
        }
        const closeATARecoveryTxn = await this.signAndGenerateBroadcastableTransaction(params, txBuilder, bs58EncodedPublicKey);
        const serializedCloseATARecoveryTxn = (await closeATARecoveryTxn).serializedTx;
        const broadcastCloseATARecoveryTxn = await this.broadcastTransaction({
            serializedSignedTransaction: serializedCloseATARecoveryTxn,
        });
        console.log(broadcastCloseATARecoveryTxn);
        recovertTxns.push(broadcastCloseATARecoveryTxn);
        return recovertTxns;
    }
    async signAndGenerateBroadcastableTransaction(params, txBuilder, bs58EncodedPublicKey) {
        // Sign the txn
        if (!params.userKey) {
            throw new Error('missing userKey');
        }
        if (!params.backupKey) {
            throw new Error('missing backupKey');
        }
        if (!params.walletPassphrase) {
            throw new Error('missing wallet passphrase');
        }
        const unsignedTransaction = (await txBuilder.build());
        const userKey = params.userKey.replace(/\s/g, '');
        const backupKey = params.backupKey.replace(/\s/g, '');
        // Decrypt private keys from KeyCard values
        let userPrv;
        try {
            userPrv = this.bitgo.decrypt({
                input: userKey,
                password: params.walletPassphrase,
            });
        }
        catch (e) {
            throw new Error(`Error decrypting user keychain: ${e.message}`);
        }
        const userSigningMaterial = JSON.parse(userPrv);
        let backupPrv;
        try {
            backupPrv = this.bitgo.decrypt({
                input: backupKey,
                password: params.walletPassphrase,
            });
        }
        catch (e) {
            throw new Error(`Error decrypting backup keychain: ${e.message}`);
        }
        const backupSigningMaterial = JSON.parse(backupPrv);
        const index = params.index || 0;
        const currPath = params.seed ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${index}` : `m/${index}`;
        const signatureHex = await sdk_core_1.EDDSAMethods.getTSSSignature(userSigningMaterial, backupSigningMaterial, currPath, unsignedTransaction);
        const publicKeyObj = { pub: bs58EncodedPublicKey };
        txBuilder.addSignature(publicKeyObj, signatureHex);
        const completedTransaction = await txBuilder.build();
        const serializedTx = completedTransaction.toBroadcastFormat();
        const transaction = {
            serializedTx: serializedTx,
            scanIndex: index,
        };
        return transaction;
    }
    /**
     * Builds native SOL recoveries of receive addresses in batch without BitGo.
     * Funds will be recovered to base address first. You need to initiate another sweep txn after that.
     *
     * @param {SolConsolidationRecoveryOptions} params - options for consolidation recovery.
     * @param {string} [params.startingScanIndex] - receive address index to start scanning from. default to 1 (inclusive).
     * @param {string} [params.endingScanIndex] - receive address index to end scanning at. default to startingScanIndex + 20 (exclusive).
     */
    async recoverConsolidations(params) {
        const isUnsignedSweep = !params.userKey && !params.backupKey && !params.walletPassphrase;
        const startIdx = params.startingScanIndex || 1;
        const endIdx = params.endingScanIndex || startIdx + exports.DEFAULT_SCAN_FACTOR;
        if (startIdx < 1 || endIdx <= startIdx || endIdx - startIdx > 10 * exports.DEFAULT_SCAN_FACTOR) {
            throw new Error(`Invalid starting or ending index to scan for addresses. startingScanIndex: ${startIdx}, endingScanIndex: ${endIdx}.`);
        }
        // validate durable nonces array
        if (!params.durableNonces) {
            throw new Error('Missing durable nonces');
        }
        if (!params.durableNonces.publicKeys) {
            throw new Error('Invalid durable nonces: missing public keys');
        }
        if (!params.durableNonces.secretKey) {
            throw new Error('Invalid durable nonces array: missing secret key');
        }
        const bitgoKey = params.bitgoKey.replace(/\s/g, '');
        const MPC = await sdk_core_1.EDDSAMethods.getInitializedMpcInstance();
        const baseAddressIndex = 0;
        const baseAddressPath = params.seed
            ? (0, sdk_lib_mpc_1.getDerivationPath)(params.seed) + `/${baseAddressIndex}`
            : `m/${baseAddressIndex}`;
        const accountId = MPC.deriveUnhardened(bitgoKey, baseAddressPath).slice(0, 64);
        const baseAddress = new lib_1.KeyPair({ pub: accountId }).getAddress();
        let durableNoncePubKeysIndex = 0;
        const durableNoncePubKeysLength = params.durableNonces.publicKeys.length;
        const consolidationTransactions = [];
        let lastScanIndex = startIdx;
        for (let i = startIdx; i < endIdx; i++) {
            const recoverParams = {
                userKey: params.userKey,
                backupKey: params.backupKey,
                bitgoKey: params.bitgoKey,
                walletPassphrase: params.walletPassphrase,
                recoveryDestination: baseAddress,
                seed: params.seed,
                index: i,
                durableNonce: {
                    publicKey: params.durableNonces.publicKeys[durableNoncePubKeysIndex],
                    secretKey: params.durableNonces.secretKey,
                },
                tokenContractAddress: params.tokenContractAddress,
            };
            let recoveryTransaction;
            try {
                recoveryTransaction = await this.recover(recoverParams);
            }
            catch (e) {
                if (e.message === 'Did not find address with funds to recover' ||
                    e.message === 'Did not find token account to recover tokens, please check token account' ||
                    e.message === 'Not enough token funds to recover') {
                    lastScanIndex = i;
                    continue;
                }
                throw e;
            }
            if (isUnsignedSweep) {
                consolidationTransactions.push(recoveryTransaction.txRequests[0]);
            }
            else {
                consolidationTransactions.push(recoveryTransaction);
            }
            lastScanIndex = i;
            durableNoncePubKeysIndex++;
            if (durableNoncePubKeysIndex >= durableNoncePubKeysLength) {
                // no more available nonce accounts to create transactions
                break;
            }
        }
        if (consolidationTransactions.length === 0) {
            throw new Error('Did not find an address with funds to recover');
        }
        if (isUnsignedSweep) {
            // lastScanIndex will be used to inform user the last address index scanned for available funds (so they can
            // appropriately adjust the scan range on the next iteration of consolidation recoveries). In the case of unsigned
            // sweep consolidations, this lastScanIndex will be provided in the coinSpecific of the last txn made.
            const lastTransactionCoinSpecific = {
                commonKeychain: consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific
                    .commonKeychain,
                lastScanIndex: lastScanIndex,
            };
            consolidationTransactions[consolidationTransactions.length - 1].transactions[0].unsignedTx.coinSpecific =
                lastTransactionCoinSpecific;
            const consolidationSweepTransactions = { txRequests: consolidationTransactions };
            return consolidationSweepTransactions;
        }
        return { transactions: consolidationTransactions, lastScanIndex };
    }
    getTokenEnablementConfig() {
        return {
            requiresTokenEnablement: true,
            supportsMultipleTokenEnablements: true,
        };
    }
    getBuilder() {
        return new lib_1.TransactionBuilderFactory(statics_1.coins.get(this.getChain()));
    }
    async broadcastTransaction({ serializedSignedTransaction, }) {
        (0, utils_1.validateRawTransaction)(serializedSignedTransaction, true, true);
        const response = await this.getDataFromNode({
            payload: {
                id: '1',
                jsonrpc: '2.0',
                method: 'sendTransaction',
                params: [
                    serializedSignedTransaction,
                    {
                        encoding: 'base64',
                    },
                ],
            },
        });
        if (response.body.error) {
            throw new Error('Error broadcasting transaction: ' + response.body.error.message);
        }
        return { txId: response.body.result };
    }
}
exports.Sol = Sol;
//# sourceMappingURL=data:application/json;base64,